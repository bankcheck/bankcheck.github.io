create or replace FUNCTION "NHS_LIS_BOOKING" (
	v_BKGSDATE        IN VARCHAR2,
	v_BKGEDATE        IN VARCHAR2,
	v_DOCCODE         IN VARCHAR2,
	v_BKGSTS          IN VARCHAR2,
	v_PATNO           IN VARCHAR2,
	v_BGKPNAME        IN VARCHAR2,
	v_DOCLOCID        IN VARCHAR2,
	v_SPCCODE1        IN VARCHAR2,
	v_SPCCODE2        IN VARCHAR2,
	v_REMARK          IN VARCHAR2,
	v_NATUREOFVISIT   IN VARCHAR2,
	v_INITIALASSESSED IN VARCHAR2,
  v_SOURCE          IN VARCHAR2,
	v_SORTBY          IN VARCHAR2,
	v_USRID           IN VARCHAR2
)
	RETURN TYPES.CURSOR_TYPE
AS
	OUTCUR TYPES.CURSOR_TYPE;
	SQLSTR  VARCHAR2(5000);
	v_COUNT NUMBER;
BEGIN
	SELECT COUNT(1) INTO v_COUNT FROM USRACCESSDOC WHERE USRID = v_USRID;

	-- /*+ NO_MERGE */
	-- /*+ INDEX( B IDX_BOOKING_BKGSDATE P IDX_PATIENT_10 ) ORDERED USE_NL(B, S, D) */
	SQLSTR := 'SELECT
			B.DOCLOCID,
			AL.ALERT,
			B.BKGID,
			TO_CHAR(B.BKGSDATE, ''DD/MM/YYYY HH24:MI''),
			TO_CHAR(B.BKGEDATE, ''HH24:MI''),
			B.BKGSCNT,
			B.PATNO,
			DECODE(NVL(P.TITDESC, ''''), '''', '''',  ''<font color=blue>'' || P.TITDESC || ''</font> '') || B.BKGPNAME,
			DECODE(NVL(B.PATNO, ''''), '''', '''',
			DECODE(NVL(P.PATSEX, ''''), '''', '''', ''M'', ''<font color=blue>M</font>'', ''F'', ''<font color=red>F</font>'', P.PATSEX) || DECODE(NVL(P.PATBDATE, ''''), '''', '''', ''/'' || TRUNC(MONTHS_BETWEEN(SYSDATE, P.PATBDATE)/ 12))) AS AGE,
			DECODE(NVL(BE.NATUREOFVISIT, ''''), '''', '''', ''Clean'', ''Clean Case'', ''Tent'', ''<span style="padding: 2px; background-color: red; color: white;">Tent Case</span> '', BE.NATUREOFVISIT),
			REPLACE(B.BKGRMK,'''''''', ''&#146;''),
			S.DOCCODE,
			D.DOCFNAME,
			D.DOCGNAME || DECODE(NVL(D.DOCCNAME, ''''), '''', '''', '' ('' || D.DOCCNAME || '')'') AS DOCGNAME,
			D.SPCCODE,
			P.LOCCODE,
			B.BKGMTEL,
			B.BKGPTEL,
			B.BKGALERT,
			B.BKGSTS,
			B.BKGPCNAME,
			DECODE(NVL(P.PATITP, 0), -1, ''Yes'', ''No'') PATITP,
			U1.USRNAME,
			TO_CHAR(B.BKGCDATE, ''DD/MM/YYYY HH24:MI''),
			U2.USRNAME,
			TO_CHAR(BE.BKGUDATE, ''DD/MM/YYYY HH24:MI''),
			U3.USRNAME,
			TO_CHAR(B.BKGADATE, ''DD/MM/YYYY HH24:MI''),
			B.SMS,
			TO_CHAR(B.SMSSDT, ''DD/MM/YYYY HH24:MI''),
			TO_CHAR(B.SMSSDTOK, ''DD/MM/YYYY HH24:MI''),
			B.SMSRTNMSG,
			TO_CHAR(BE.DOCSMSSDT, ''DD/MM/YYYY HH24:MI''),
			TO_CHAR(BE.DOCSMSSDTOK, ''DD/MM/YYYY HH24:MI''),
			BE.DOCSMSRTNMSG,
			TO_CHAR(B.BKGOBLMP, ''DD/MM/YYYY''),
			TO_CHAR(B.BKGOBEDC, ''DD/MM/YYYY''),
			B.BKGOBBIRTHORDER,
			B.BKGOBREFERRALDOC,
			B.BKGOBWEEKS,
			B.SLTID,
			B.SCHID,
			PE.DENTALNO,
      BS.BKSDESC    
		FROM BOOKING B
		LEFT JOIN BOOKING_EXTRA BE ON B.BKGID = BE.BKGID
		LEFT JOIN PATIENT P ON B.PATNO = P.PATNO
		LEFT JOIN PATIENT_EXTRA PE ON B.PATNO = PE.PATNO
		INNER JOIN SCHEDULE S ON B.SCHID = S.SCHID
		LEFT JOIN USR U1 ON B.USRID = U1.USRID
		LEFT JOIN USR U2 ON BE.BKGUUSER = U2.USRID
		LEFT JOIN USR U3 ON B.CANCELBY = U3.USRID
    LEFT JOIN BOOKINGSRC BS ON B.BKSID = BS.BKSID ';

	IF v_SPCCODE1 IS NOT NULL THEN
		SQLSTR := SQLSTR || ' INNER JOIN DOCTOR D ON S.DOCCODE = D.DOCCODE ';

		IF INSTR(v_SPCCODE1, ',') > 0 THEN
			SQLSTR := SQLSTR || ' AND D.SPCCODE in ( ''' || REPLACE(UPPER(v_SPCCODE1), ',', ''',''') || ''' ) ';
		ELSE
			SQLSTR := SQLSTR || ' AND D.SPCCODE like ''' || UPPER(v_SPCCODE1) || '%''';
		END IF;
	ELSE
		SQLSTR := SQLSTR || ' LEFT JOIN DOCTOR D ON S.DOCCODE = D.DOCCODE ';
	END IF;

	SQLSTR := SQLSTR || ' LEFT OUTER JOIN ( SELECT PL.PATNO, LISTAGG( A.ALTCODE, '','' ) WITHIN GROUP ( ORDER BY A.ALTCODE ) ALERT
						FROM PATALTLINK PL, ALERT A
						WHERE PL.ALTID = A.ALTID ';

	IF v_PATNO IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND PL.PATNO = '''|| v_PATNO || '''';
	END IF;

	SQLSTR := SQLSTR || ' AND PL.PALCDATE IS NULL
		AND PL.ALTID IN ( SELECT DISTINCT R.ALTID FROM USRROLE U, ROLALTLINK R WHERE U.ROLID = R.ROLID ';

	IF v_USRID IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND U.USRID = ''' || v_USRID || ''')';
	END IF;

	SQLSTR := SQLSTR || ' GROUP BY PL.PATNO ) AL ON AL.PATNO = B.PATNO ';
	SQLSTR := SQLSTR || ' WHERE B.STECODE = '''|| GET_CURRENT_STECODE || '''';

	IF v_PATNO IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND B.PATNO = '''|| v_PATNO || '''';
	END IF;

	IF v_DOCCODE IS NOT NULL AND LENGTH(v_DOCCODE) > 0 THEN
		IF INSTR(v_doccode, ',') > 0 THEN
			SQLSTR := SQLSTR || ' AND S.DOCCODE in ( ''' || REPLACE(UPPER(v_DOCCODE), ',', ''',''') || ''' ) ';
		ELSE
			SQLSTR := SQLSTR || ' AND S.DOCCODE like ''' || UPPER(v_DOCCODE) || '%''';
		END IF;
	END IF;

	IF v_COUNT > 0 THEN
		SQLSTR := SQLSTR || ' AND (S.DOCCODE IN (SELECT DOCCODE FROM USRACCESSDOC WHERE USRID = ''' || v_USRID || ''' AND SPCCODE = ''ALL'')';
		SQLSTR := SQLSTR || ' OR   S.DOCCODE IN (SELECT DOCCODE FROM DOCTOR WHERE SPCCODE IN (SELECT SPCCODE FROM USRACCESSDOC WHERE USRID = ''' || v_USRID || '''  AND DOCCODE = ''ALL'')))';
	END IF;

	IF v_BGKPNAME IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND UPPER(B.BKGPNAME) LIKE ''' || UPPER(v_BGKPNAME) || '%''';
	END IF;

	IF v_DOCLOCID IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND B.DOCLOCID = ''' || UPPER(v_DOCLOCID) || '''';
	END IF;

	IF v_BKGSDATE IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND B.BKGSDATE >= TO_DATE(''' || v_BKGSDATE || ' 00:00:00'', ''DD/MM/YYYY HH24:MI:SS'')';

		IF v_BKGEDATE IS NOT NULL THEN
			SQLSTR := SQLSTR || ' AND B.BKGSDATE < TO_DATE(''' || v_BKGEDATE || ' 00:00:00'', ''DD/MM/YYYY HH24:MI:SS'') + 1';
		END IF;
	END IF;

	IF v_BKGEDATE IS NOT NULL THEN
		IF v_BKGSDATE IS NOT NULL THEN
			SQLSTR := SQLSTR || ' AND B.BKGEDATE >= TO_DATE(''' || v_BKGSDATE || ' 00:00:00'', ''DD/MM/YYYY HH24:MI:SS'') ';
		END IF;

		SQLSTR := SQLSTR || ' AND B.BKGEDATE < TO_DATE(''' || v_BKGEDATE || ' 00:00:00'', ''DD/MM/YYYY HH24:MI:SS'') + 1';
	END IF;

	IF v_BKGSTS IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND B.BKGSTS = ''' || v_BKGSTS || '''';
	END IF;

	IF v_REMARK IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND REPLACE(B.BKGRMK,'''''''', ''&#146;'') LIKE ''%' || v_REMARK || '%''';
	END IF;

	IF v_NATUREOFVISIT IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND BE.NATUREOFVISIT = ''' || v_NATUREOFVISIT || '''';
	END IF;

	IF v_INITIALASSESSED IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND B.BKGALERT = ''' || v_INITIALASSESSED || '''';
	END IF;
  
  	IF v_SOURCE IS NOT NULL THEN
		SQLSTR := SQLSTR || ' AND BS.BKSID = ''' || v_SOURCE || '''';
	END IF;

	IF v_SORTBY = 'R' THEN
		SQLSTR := SQLSTR || ' ORDER BY B.BKGRMK ';
	ELSE
		SQLSTR := SQLSTR || ' ORDER BY B.BKGSDATE ';
	END IF;
DBMS_OUTPUT.PUT_LINE(SQLSTR);

	OPEN OUTCUR FOR SQLSTR;

	RETURN OUTCUR;
END NHS_LIS_BOOKING;
/
