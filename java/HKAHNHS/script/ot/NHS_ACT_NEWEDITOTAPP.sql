create or replace FUNCTION "NHS_ACT_NEWEDITOTAPP"(
	v_ACTION                IN VARCHAR2,
	v_OTAID                 IN VARCHAR2,
	v_PATNO                 IN VARCHAR2,
	v_OTAFNAME              IN VARCHAR2,
	v_OTAGNAME              IN VARCHAR2,
	v_OTAHKID               IN VARCHAR2,
	v_OTABDATE              IN VARCHAR2,
	v_OTATEL                IN VARCHAR2,
	v_OTAOSDATE             IN VARCHAR2,
	v_OTAOEDATE             IN VARCHAR2,
	v_OTCID_RM              IN VARCHAR2,
	v_OTPID                 IN VARCHAR2,
	v_OTCID_AM              IN VARCHAR2,
	v_DECCODE_S             IN VARCHAR2,
	v_DECCODE_A             IN VARCHAR2,
	v_OTASNDATE             IN VARCHAR2,
	v_OTAANDATE             IN VARCHAR2,
	v_OTARMK                IN VARCHAR2,
	v_USRID                 IN VARCHAR2,
	v_OTASEX                IN VARCHAR2,
	v_PBPID                 IN VARCHAR2,
	v_PATTYPE               IN VARCHAR2,
	v_OTAPROCRMK            IN VARCHAR2,
	v_OTADIAG               IN VARCHAR2,
	v_DECCODE_E             IN VARCHAR2,
	v_OTAENDATE             IN VARCHAR2,
	v_DOCCODE_R             IN VARCHAR2,
	v_ISOTABED              IN VARCHAR2,
	v_ISFROMPB              IN VARCHAR2,
	v_DOCCODE               IN VARCHAR2,
	v_BPBHDATE              IN VARCHAR2,
	v_PATCNAME              IN VARCHAR2,
	v_ACMCODE               IN VARCHAR2,
	v_WRDCODE               IN VARCHAR2,
	v_BPBRMK                IN VARCHAR2,
	v_ARCCODE               IN VARCHAR2,
	v_COPAYTYP              IN VARCHAR2,
	v_COPAYAMT              IN VARCHAR2,
	v_POLICY                IN VARCHAR2,
	v_ARLMTAMT              IN VARCHAR2,
	v_CVREDATE              IN VARCHAR2,
	v_ISDOCTOR              IN VARCHAR2,
	v_ISSPECIAL             IN VARCHAR2,
	v_ISHOSPITAL            IN VARCHAR2,
	v_ISOTHER               IN VARCHAR2,
	v_VOUCHER               IN VARCHAR2,
	v_ISMAINLAND            IN VARCHAR2,
	v_FORDELIVERY           IN VARCHAR2,
	v_PATPAGER              IN VARCHAR2,
	v_CABLABRMK             IN VARCHAR2,
	v_BEDCODE               IN VARCHAR2,
	v_ISREFUSED             IN VARCHAR2,
	v_ISCHANGEDREFUSED      IN VARCHAR2,
	v_REFUSEREASON          IN VARCHAR2,
	v_REFUSEDUSERID         IN VARCHAR2,
	v_REFUSEDDATE           IN VARCHAR2,
	v_ACTIVATEDUSERID       IN VARCHAR2,
	v_ACTIVATEDDATE         IN VARCHAR2,
	v_ESTSTAYLEN            IN VARCHAR2,
	v_OTREMARK              IN VARCHAR2,
	v_OLDSDATE              IN VARCHAR2,
	v_OLDEDATE              IN VARCHAR2,
	v_OLDROOM               IN VARCHAR2,
	v_OLDSDOCCODE           IN VARCHAR2,
	v_OLDADOCCODE           IN VARCHAR2,
	v_OLDEDOCCODE           IN VARCHAR2,
	v_ISCONTINUEMULTI       IN VARCHAR2,
	v_ISCONTINUEOVERLAP     IN VARCHAR2,
	v_ISCONTINUEOVERLAPSDOC IN VARCHAR2,
	v_ISCONTINUEOVERLAPADOC IN VARCHAR2,
	v_ISCONTINUEOVERLAPEDOC IN VARCHAR2,
	v_ISCONTINUEOVERDUESDOC IN VARCHAR2,
	v_ISCONTINUEOVERDUEADOC IN VARCHAR2,
	v_ISCONTINUEOVERDUEEDOC IN VARCHAR2,
	v_ISCONTINUEPROPRIVSDOC IN VARCHAR2,
	v_ISCONTINUEPROPRIVEDOC IN VARCHAR2,
	v_ISCONTINUEDUPLICATE   IN VARCHAR2,
	v_DECCODE_SS            IN VARCHAR2,
	v_OTASSNDATE            IN VARCHAR2,
	v_FEREQ                 IN VARCHAR2,
	v_FEREC                 IN VARCHAR2,
	v_PBMID             	IN VARCHAR2,
	v_PBSID             	IN VARCHAR2,
	v_PBSNO             	IN VARCHAR2,
	v_PBPKGCODE         	IN VARCHAR2,
	V_BE					        IN VARCHAR2,
  V_PBPKGCODE2   		    IN VARCHAR2,
-- table
	v_OTAPPID	        	IN VARCHAR2,
	o_ERRMSG                OUT VARCHAR2
)
	RETURN NUMBER
AS
	o_errcode NUMBER;
	v_noOfRec NUMBER;
	v_newOtpid NUMBER;
	v_NEWPBPID NUMBER;
	v_RET_UPD NUMBER;
	v_OTAID2 VARCHAR2(22);
	v_OAPID VARCHAR2(22);
	v_OTPCODE VARCHAR2(20);
	ACTION_MOD VARCHAR2(3);
	ACTION_DEL VARCHAR2(3);
	v_SECSURGISEXIT VARCHAR2(1);
	V_FID FIN_EST_HOSP.FESTID%TYPE;
  	I_BE FIN_EST_HOSP.OSB_BE%TYPE;

	v_PROCEDURE OT_PROC.OTPDESC%TYPE;
	v_OTSDATE OT_APP.OTAOSDATE%TYPE;
	v_DOCTDATE DOCTOR.DOCTDATE%TYPE;
	v_DOCSTS DOCTOR.DOCSTS%TYPE;
	v_CHKPROCPRIV DOCTOR.CHKPRCPRIV%TYPE;
	v_ISDUPLICATE BOOLEAN := FALSE;
BEGIN
	o_ERRCODE := 0;
	o_ERRMSG := 'OK';
	v_NOOFREC := 0;

	IF v_ACTION = 'ADD' AND v_ISCONTINUEMULTI = 'N' THEN
		IF TO_NUMBER(v_PBPID) > 0 THEN
			BEGIN
				SELECT PROC.OTPDESC, APP.OTAOSDATE INTO v_PROCEDURE, v_OTSDATE
				FROM   OT_APP APP, OT_PROC PROC
				WHERE  PROC.OTPID = APP.OTPID
				AND    PBPID = v_PBPID;

				IF (v_PROCEDURE IS NOT NULL AND LENGTH(v_PROCEDURE) > 0 )
						OR
						(v_OTSDATE IS NOT NULL) THEN
					-- WARN MULTIPLE OT BOOKING
					o_ERRMSG := 'The patient is already scheduled an OT appointment:<br/><br/>' ||
							'Procedure: ' || v_PROCEDURE || '<br/>' ||
							'Date/Time: ' || TO_CHAR(v_OTSDATE, 'DD/MM/YYYY HH24:MI:SS') || '<br/><br/>' ||
							'Confirm save?';
						RETURN -100;
				END IF;
			EXCEPTION WHEN OTHERS THEN
				o_ERRCODE := 0;
			END;
		END IF;
	END IF;

	IF (v_ACTION = 'ADD' OR
		(v_ACTION = 'MOD' AND
			(v_OLDSDATE <> v_OTAOSDATE OR v_OLDEDATE <> v_OTAOEDATE OR v_OLDROOM <> v_OTCID_RM))) AND
			v_ISCONTINUEOVERLAP = 'N' THEN

		SELECT COUNT(1) INTO v_NOOFREC
		FROM   OT_APP A, OT_CODE C
		WHERE  C.OTCSTS = -1
		AND    C.OTCTYPE = 'RM'
		AND    A.OTASTS <> 'C'
		AND    (v_OTAID IS NULL OR A.OTAID <> v_OTAID)
		AND    (v_OTCID_RM IS NULL OR A.OTCID_RM = v_OTCID_RM)
		AND    (A.OTAOSDATE < TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR A.OTAOSDATE < TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'))
		AND    (A.OTAOEDATE > TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR A.OTAOEDATE > TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'));

		IF v_NOOFREC > 0 THEN
			RETURN -200;
		END IF;
	END IF;

	-- Check Overlap
	IF v_DECCODE_S IS NOT NULL AND LENGTH(v_DECCODE_S) > 0 AND v_ISCONTINUEOVERLAPSDOC = 'N' THEN
		SELECT COUNT(1) INTO v_NOOFREC
		FROM   OT_APP
		WHERE  (OTAOSDATE < TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR OTAOSDATE < TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'))
		AND    (OTAOEDATE > TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR OTAOEDATE > TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'))
		AND    (DOCCODE_S = v_DECCODE_S OR DOCCODE_E = v_DECCODE_S)
		AND    OTASTS <> 'C';

		IF v_ACTION = 'ADD' AND v_NOOFREC > 0 THEN
			RETURN -300;
		ELSIF v_ACTION = 'MOD' THEN
			IF v_NOOFREC = 0 OR (v_NOOFREC = 1 AND v_OLDSDOCCODE = v_DECCODE_S) THEN
				o_ERRCODE := 0;
			ELSE
				RETURN -300;
			END IF;
		END IF;
	END IF;

	IF v_DECCODE_A IS NOT NULL AND LENGTH(v_DECCODE_A) > 0 AND v_ISCONTINUEOVERLAPADOC = 'N' THEN
		SELECT COUNT(1) INTO v_NOOFREC
		FROM   OT_APP
		WHERE (OTAOSDATE < TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR OTAOSDATE < TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'))
		AND   (OTAOEDATE > TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR OTAOEDATE > TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'))
		AND   (DOCCODE_A = v_DECCODE_A)
		AND   OTASTS <> 'C';

		IF v_ACTION = 'ADD' AND v_NOOFREC > 0 THEN
			RETURN -310;
		ELSIF v_ACTION = 'MOD' THEN
			IF v_NOOFREC = 0 OR (v_NOOFREC = 1 AND v_OLDADOCCODE = v_DECCODE_A) THEN
				o_ERRCODE := 0;
			ELSE
				RETURN -310;
			END IF;
		END IF;
	END IF;

	IF v_DECCODE_E IS NOT NULL AND LENGTH(v_DECCODE_E) > 0 AND v_ISCONTINUEOVERLAPEDOC = 'N' THEN
		SELECT COUNT(1) INTO v_NOOFREC
		FROM   OT_APP
		WHERE (OTAOSDATE < TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR OTAOSDATE < TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'))
		AND   (OTAOEDATE > TO_DATE(v_OTAOSDATE, 'DD/MM/YYYY HH24:MI') OR OTAOEDATE > TO_DATE(v_OTAOEDATE, 'DD/MM/YYYY HH24:MI'))
		AND   (DOCCODE_S = v_DECCODE_E OR DOCCODE_E = v_DECCODE_E)
		AND   OTASTS <> 'C';

		IF v_ACTION = 'ADD' AND v_NOOFREC > 0 THEN
			RETURN -320;
		ELSIF v_ACTION = 'MOD' THEN
			IF v_NOOFREC = 0 OR (v_NOOFREC = 1 AND v_OLDEDOCCODE = v_DECCODE_E) THEN
				o_ERRCODE := 0;
			ELSE
				RETURN -320;
			END IF;
		END IF;
	END IF;

	-- Check Overdue
	IF v_DECCODE_S IS NOT NULL AND LENGTH(v_DECCODE_S) > 0 AND v_ISCONTINUEOVERDUESDOC = 'N' THEN
		SELECT DOCTDATE, DOCSTS INTO v_DOCTDATE, v_DOCSTS
		FROM DOCTOR
		WHERE DOCCODE = v_DECCODE_S;

		IF v_DOCTDATE IS NOT NULL THEN
			o_ERRMSG := TO_CHAR(v_DOCTDATE, 'DD/MM/YYYY');
			IF TO_DATE(SUBSTR(v_OTAOSDATE, 1, 10)||' 00:00:00', 'DD/MM/YYYY HH24:MI:SS') -
					TO_DATE(TO_CHAR(v_DOCTDATE, 'DD/MM/YYYY')||' 00:00:00', 'DD/MM/YYYY HH24:MI:SS') > 0 THEN
				IF v_DOCSTS = -1 THEN
					RETURN -401;
				ELSE
					RETURN -400;
				END IF;
			END IF;
		ELSE
			IF v_DOCSTS = -1 THEN
				o_ERRMSG := '';
			ELSE
				RETURN -410;
			END IF;
		END IF;
	END IF;

	IF v_DECCODE_A IS NOT NULL AND LENGTH(v_DECCODE_A) > 0 AND v_ISCONTINUEOVERDUEADOC = 'N' THEN
		SELECT DOCTDATE, DOCSTS INTO v_DOCTDATE, v_DOCSTS
		FROM   DOCTOR
		WHERE  DOCCODE = v_DECCODE_A;

		IF v_DOCTDATE IS NOT NULL THEN
			o_ERRMSG := TO_CHAR(v_DOCTDATE, 'DD/MM/YYYY');
			IF TO_DATE(SUBSTR(v_OTAOSDATE, 1, 10)||' 00:00:00', 'DD/MM/YYYY HH24:MI:SS') -
					TO_DATE(TO_CHAR(v_DOCTDATE, 'DD/MM/YYYY')||' 00:00:00', 'DD/MM/YYYY HH24:MI:SS') > 0 THEN
				IF v_DOCSTS = -1 THEN
					RETURN -403;
				ELSE
					RETURN -402;
				END IF;
			END IF;
		ELSE
			IF v_DOCSTS = -1 THEN
					o_ERRMSG := '';
			ELSE
					RETURN -420;
			END IF;
		END IF;
	END IF;

	IF v_DECCODE_E IS NOT NULL AND LENGTH(v_DECCODE_E) > 0 AND v_ISCONTINUEOVERDUEEDOC = 'N' THEN
		SELECT DOCTDATE, DOCSTS INTO v_DOCTDATE, v_DOCSTS
		FROM DOCTOR
		WHERE DOCCODE = v_DECCODE_E;

		IF v_DOCTDATE IS NOT NULL THEN
			o_ERRMSG := TO_CHAR(v_DOCTDATE, 'DD/MM/YYYY');
			IF TO_DATE(SUBSTR(v_OTAOSDATE, 1, 10)||' 00:00:00', 'DD/MM/YYYY HH24:MI:SS') -
					TO_DATE(TO_CHAR(v_DOCTDATE, 'DD/MM/YYYY')||' 00:00:00', 'DD/MM/YYYY HH24:MI:SS') > 0 THEN
				IF v_DOCSTS = -1 THEN
					RETURN -405;
				ELSE
					RETURN -404;
				END IF;
			END IF;
		ELSE
			IF v_DOCSTS = -1 THEN
				o_ERRMSG := '';
			ELSE
				RETURN -430;
			END IF;
		END IF;
	END IF;

	-- check propriv
	IF v_OTPID IS NOT NULL AND LENGTH(v_OTPID) > 0 AND v_ISCONTINUEPROPRIVSDOC = 'N' THEN
		IF v_DECCODE_S IS NOT NULL AND LENGTH(v_DECCODE_S) > 0 THEN
			SELECT CHKPRCPRIV INTO v_CHKPROCPRIV
			FROM DOCTOR
			WHERE DOCCODE = v_DECCODE_S;

			IF v_CHKPROCPRIV = -1 THEN
				SELECT COUNT(DPCLID) INTO v_NOOFREC
				FROM DOCPRCLINK
				WHERE DOCCODE = v_DECCODE_S
				AND OTPID = v_OTPID;

				IF v_NOOFREC = 0 THEN
					RETURN -500;
				END IF;
			END IF;
		END IF;
	END IF;

	IF v_OTPID IS NOT NULL AND LENGTH(v_OTPID) > 0 AND v_ISCONTINUEPROPRIVEDOC = 'N' THEN
		IF v_DECCODE_E IS NOT NULL AND LENGTH(v_DECCODE_E) > 0 THEN
			SELECT CHKPRCPRIV INTO v_CHKPROCPRIV
			FROM DOCTOR
			WHERE DOCCODE = v_DECCODE_E;

			IF v_CHKPROCPRIV = -1 THEN
				SELECT COUNT(DPCLID) INTO v_NOOFREC
				FROM DOCPRCLINK
				WHERE DOCCODE = v_DECCODE_E
				AND OTPID = v_OTPID;

				IF v_NOOFREC = 0 THEN
					RETURN -501;
				END IF;
			END IF;
		END IF;
	END IF;

	-- duplicate pre-booking
	IF v_ISOTABED = 'Y' THEN
		IF v_ISFROMPB = 'N' AND v_ISCONTINUEDUPLICATE = 'N' THEN
			v_ISDUPLICATE := NHS_CHK_DUPLPREBOK(v_ACTION, v_PATNO, v_OTAHKID, REPLACE(v_OTAFNAME, '''', ''''''), REPLACE(v_OTAGNAME, '''', ''''''));
		END IF;

		IF v_ISCONTINUEDUPLICATE = 'N' THEN
			IF v_ISDUPLICATE THEN
				RETURN -600;
			END IF;
		END IF;
	END IF;

	-- SAVE
	IF v_ACTION = 'ADD' THEN
		SELECT SEQ_OT_APP.NEXTVAL INTO v_NEWOTPID FROM DUAL;
		IF v_ISOTABED = 'Y' THEN
			IF v_ISFROMPB = 'Y' THEN
				v_NEWPBPID := v_PBPID;
			ELSE
				SELECT SEQ_BEDPREBOK.NEXTVAL INTO v_NEWPBPID FROM DUAL;
			END IF;
		END IF;

		INSERT INTO OT_APP (
			OTAID, PATNO, OTAFNAME, OTAGNAME, OTAHKID, OTABDATE, OTATEL,
			OTAOSDATE, OTAOEDATE, OTCID_RM, OTPID, OTCID_AM, DOCCODE_S,
			DOCCODE_A, OTASNDATE, OTAANDATE, OTARMK, OTASTS, OTACDATE,
			OTUSRID, STECODE, OTASEX, PBPID, PATTYPE, OTAPROCRMK, OTADIAG,
			DOCCODE_E, OTAENDATE, DOCCODE_R
		) VALUES (
			v_NEWOTPID, v_PATNO, v_OTAFNAME, v_OTAGNAME, v_OTAHKID,
			TO_DATE(v_OTABDATE,'DD/MM/YYYY'),
			v_OTATEL,
			TO_DATE(v_OTAOSDATE,'DD/MM/YYYY HH24:MI'),
			TO_DATE(v_OTAOEDATE,'DD/MM/YYYY HH24:MI'),
			v_OTCID_RM, v_OTPID, v_OTCID_AM, v_DECCODE_S, v_DECCODE_A,
			TO_DATE(v_OTASNDATE,'DD/MM/YYYY HH24:MI'),
			TO_DATE(v_OTAANDATE,'DD/MM/YYYY HH24:MI'),
			v_OTARMK, 'N', SYSDATE, v_USRID, GET_CURRENT_STECODE(), v_OTASEX, v_NEWPBPID,
			v_PATTYPE, v_OTAPROCRMK, v_OTADIAG, v_DECCODE_E,
			TO_DATE(v_OTAENDATE,'DD/MM/YYYY HH24:MI'),
			v_DOCCODE_R
		);

		INSERT INTO OT_APP_EXTRA (
			OTAID, FEREQ, FEREC, OTAUPUSR, OTAUPDT
		) VALUES (
			v_NEWOTPID, v_FEREQ, v_FEREC, v_USRID, SYSDATE
		);

		---------------
		-- save table
		---------------
		v_OTAID2 := v_NEWOTPID;

		IF v_DECCODE_SS IS NOT NULL THEN
			INSERT INTO OT_APP_SURG (
				OTAID,
				DOCCODE,
				OTASNDATE
			) VALUES (
				v_NEWOTPID,
				v_DECCODE_SS,
				TO_DATE(v_OTASSNDATE,'DD/MM/YYYY HH24:MI')
			);
		END IF;

		IF v_ISOTABED = 'Y' THEN
			IF v_ISFROMPB = 'N' THEN
				INSERT INTO BEDPREBOK (
					PBPID, DOCCODE, BPBODATE, BPBHDATE, USRID, BPBSTS, STECODE, PATNO,
					BPBPNAME, BPBCNAME, ACMCODE, WRDCODE, BPBRMK, OTAID, ARCCODE,
					COPAYTYP, COPAYAMT, POLICY, ARLMTAMT, CVREDATE, ISDOCTOR, ISSPECIAL,
					ISHOSPITAL, ISOTHER, VOUCHER, PATFNAME, PATGNAME, ISMAINLAND, FORDELIVERY,
					PATKHTEL, PATPAGER, PATIDNO, BPBTYPE, BPBNO, CABLABRMK, BEDCODE, BEDTIME,
					SEX, SLPNO, EDITUSER, EDITDATE, ISREFUSED, REFUSEREASON, REFUSEDUSERID,
					REFUSEDDATE, ACTIVATEDUSERID, ACTIVATEDDATE, ESTSTAYLEN, OTREMARK
				 ) VALUES (
					v_NEWPBPID, v_DOCCODE, SYSDATE, TO_DATE(v_BPBHDATE,'DD/MM/YYYY HH24:MI'),
					v_USRID, 'N', GET_CURRENT_STECODE(), v_PATNO, v_OTAFNAME || ' ' || v_OTAGNAME, v_PATCNAME,
					v_ACMCODE, v_WRDCODE, v_BPBRMK, v_NEWOTPID, v_ARCCODE, v_COPAYTYP, v_COPAYAMT, v_POLICY,
					v_ARLMTAMT, TO_DATE(v_CVREDATE,'DD/MM/YYYY'), v_ISDOCTOR,
					v_ISSPECIAL, v_ISHOSPITAL, v_ISOTHER, v_VOUCHER, v_OTAFNAME, v_OTAGNAME, v_ISMAINLAND,
					v_FORDELIVERY, v_OTATEL, v_PATPAGER, v_OTAHKID, NULL, NULL, v_CABLABRMK, v_BEDCODE,
					NULL, v_OTASEX, NULL, v_USRID, SYSDATE, v_ISREFUSED, NULL, NULL, NULL, NULL, NULL,
					v_ESTSTAYLEN, v_OTREMARK);

				IF v_ESTSTAYLEN IS NOT NULL AND LENGTH(v_ESTSTAYLEN) > 0 THEN
					IF TO_NUMBER(v_ESTSTAYLEN) = 0 THEN
						UPDATE BEDPREBOK
						SET    ESTSTAYLEN = NULL
						WHERE  PBPID = v_NEWPBPID;
					END IF;
				END IF;

				INSERT INTO BEDPREBOK_EXTRA
				(PBPID, PBMID, PBSNO, PBSID, PBPKGCODE, BPBREGTYPE,PBPKGCODE2)
				VALUES
				(v_NEWPBPID, v_PBMID, v_PBSNO, v_PBSID, v_PBPKGCODE, 'I', V_PBPKGCODE2);

				IF (V_BE <> '0')THEN
	--                SELECT SEQ_FEST.NEXTVAL INTO V_FID FROM DUAL;
	                Insert Into Fin_Est_Hosp
	                  (Festid,Pbpid,Patno, Osb_Be)
	                  VALUES (SEQ_FEST.NEXTVAL,v_NEWPBPID,v_PATNO, V_BE);
        End IF;
			END IF;

			UPDATE OT_APP
			SET
				PATNO = v_PATNO,
				OTAFNAME = v_OTAFNAME,
				OTAGNAME = v_OTAGNAME,
				OTATEL = v_OTATEL,
				OTAHKID = v_OTAHKID
			WHERE OTAID <> v_NEWOTPID
			AND   PBPID = v_NEWPBPID;
		END IF;
	ELSIF v_ACTION = 'MOD' THEN
		UPDATE OT_APP
		SET
			PATNO = v_PATNO,
			OTAFNAME = v_OTAFNAME,
			OTAGNAME = v_OTAGNAME,
			OTAHKID = v_OTAHKID,
			OTABDATE = TO_DATE(v_OTABDATE,'DD/MM/YYYY'),
			OTATEL = v_OTATEL,
			OTAOSDATE = TO_DATE(v_OTAOSDATE,'DD/MM/YYYY HH24:MI'),
			OTAOEDATE = TO_DATE(v_OTAOEDATE,'DD/MM/YYYY HH24:MI'),
			OTCID_RM = v_OTCID_RM,
			OTPID = v_OTPID,
			OTCID_AM = v_OTCID_AM,
			DOCCODE_S = v_DECCODE_S,
			DOCCODE_A = v_DECCODE_A,
			OTASNDATE = TO_DATE(v_OTASNDATE,'DD/MM/YYYY HH24:MI'),
			OTAANDATE = TO_DATE(v_OTAANDATE,'DD/MM/YYYY HH24:MI'),
			OTARMK = v_OTARMK,
			OTASEX = v_OTASEX,
			PATTYPE = v_PATTYPE,
			OTAPROCRMK = v_OTAPROCRMK,
			OTADIAG = v_OTADIAG,
			DOCCODE_E = v_DECCODE_E,
			OTAENDATE = TO_DATE(v_OTAENDATE,'DD/MM/YYYY HH24:MI'),
			DOCCODE_R = v_DOCCODE_R
		WHERE OTAID = v_OTAID;

		SELECT COUNT(1) INTO v_noOfRec FROM OT_APP_EXTRA WHERE OTAID = v_OTAID;
		IF v_noOfRec = 0 THEN
			INSERT INTO OT_APP_EXTRA (
				OTAID, FEREQ, FEREC, OTAUPUSR, OTAUPDT
			) VALUES (
				v_OTAID, v_FEREQ, v_FEREC, v_USRID, SYSDATE
			);
		ELSE
			UPDATE OT_APP_EXTRA
			SET
				FEREQ = v_FEREQ,
				FEREC = v_FEREC,
				OTAUPUSR = v_USRID,
				OTAUPDT = SYSDATE
			WHERE OTAID = v_OTAID;
		END IF;

		---------------
		-- save table
		---------------
		v_OTAID2 := v_OTAID;

		SELECT COUNT(1)
		INTO v_SECSURGISEXIT
		FROM OT_APP_SURG
		WHERE OTAID = v_OTAID;

		IF v_SECSURGISEXIT = 0 THEN
			IF v_DECCODE_SS IS NOT NULL THEN
				INSERT INTO OT_APP_SURG (
					OTAID,
					DOCCODE,
					OTASNDATE
				) VALUES (
					v_OTAID,
					v_DECCODE_SS,
					TO_DATE(v_OTASSNDATE,'DD/MM/YYYY HH24:MI')
				);
			END IF;
		ELSE
			IF v_DECCODE_SS IS NOT NULL THEN
				UPDATE OT_APP_SURG
				SET DOCCODE = v_DECCODE_SS,
					OTASNDATE = TO_DATE(v_OTASSNDATE,'DD/MM/YYYY HH24:MI')
				WHERE OTAID = v_OTAID;
			ELSE
				DELETE FROM OT_APP_SURG WHERE OTAID = v_OTAID;
			END IF;
		END IF;

		IF v_ISOTABED = 'Y' THEN
			IF v_ISFROMPB = 'N' THEN
					UPDATE BEDPREBOK
					SET
						DOCCODE = v_DOCCODE,
						BPBHDATE = TO_DATE(v_BPBHDATE,'DD/MM/YYYY HH24:MI'),
						PATNO = v_PATNO,
						BPBPNAME = v_OTAFNAME || ' ' || v_OTAGNAME,
						BPBCNAME = v_PATCNAME,
						ACMCODE = v_ACMCODE,
						WRDCODE = v_WRDCODE,
						BPBRMK = v_BPBRMK,
						ARCCODE = v_ARCCODE,
						COPAYTYP = v_COPAYTYP,
						COPAYAMT = v_COPAYAMT,
						POLICY = v_POLICY,
						ARLMTAMT = v_ARLMTAMT,
						CVREDATE = TO_DATE(v_CVREDATE,'DD/MM/YYYY'),
						ISDOCTOR = v_ISDOCTOR,
						ISSPECIAL = v_ISSPECIAL,
						ISHOSPITAL = v_ISHOSPITAL,
						ISOTHER = v_ISOTHER,
						VOUCHER = v_VOUCHER,
						PATFNAME = v_OTAFNAME,
						PATGNAME = v_OTAGNAME,
						ISMAINLAND = v_ISMAINLAND,
						FORDELIVERY = v_FORDELIVERY,
						PATKHTEL = v_OTATEL,
						PATPAGER = v_PATPAGER,
						PATIDNO = v_OTAHKID,
						CABLABRMK = v_CABLABRMK,
						BEDCODE = v_BEDCODE,
						SEX = v_OTASEX,
						EDITUSER = v_USRID,
						EDITDATE = SYSDATE,
						ISREFUSED = v_ISREFUSED,
						ESTSTAYLEN = v_ESTSTAYLEN,
						OTREMARK = v_OTREMARK
					WHERE PBPID = v_PBPID;

					IF v_ISCHANGEDREFUSED = 'Y' THEN
						IF v_ISREFUSED = '-1' THEN
							UPDATE BEDPREBOK
							SET
								REFUSEREASON = v_REFUSEREASON,
								REFUSEDUSERID = v_REFUSEDUSERID,
								REFUSEDDATE = SYSDATE
							WHERE PBPID = v_PBPID;
						ELSIF v_ISREFUSED = '0' THEN
							UPDATE BEDPREBOK
							SET
								REFUSEREASON = v_REFUSEREASON,
								ACTIVATEDUSERID = v_ACTIVATEDUSERID,
								ACTIVATEDDATE = SYSDATE
							WHERE PBPID = v_PBPID;
						END IF;
					END IF;

					IF v_ESTSTAYLEN IS NOT NULL AND LENGTH(v_ESTSTAYLEN) > 0 THEN
						IF TO_NUMBER(v_ESTSTAYLEN) = 0 THEN
							UPDATE BEDPREBOK
							SET    ESTSTAYLEN = NULL
							WHERE  PBPID = v_PBPID;
						END IF;
					END IF;

					SELECT COUNT(1) INTO v_noOfRec FROM BEDPREBOK_EXTRA WHERE PBPID = v_PBPID;
					IF v_noOfRec = 0 THEN
						INSERT INTO BEDPREBOK_EXTRA
						(PBPID, PBMID, PBSNO, PBSID, PBPKGCODE, BPBREGTYPE, PBPKGCODE2)
						VALUES
						(v_PBPID, v_PBMID, v_PBSNO, v_PBSID, v_PBPKGCODE, 'I', V_PBPKGCODE2);
					ELSE
						UPDATE BEDPREBOK_EXTRA set
							PBMID = v_PBMID,
							PBSNO = v_PBSNO,
							PBSID = v_PBSID,
							PBPKGCODE = v_PBPKGCODE,
							BPBREGTYPE = 'I',
              PBPKGCODE2 = V_PBPKGCODE2
						WHERE PBPID = v_PBPID;
					END IF;

			        Select Count(1) Into V_Noofrec From Fin_Est_Hosp Where Pbpid = v_PBPID;
			        IF V_Noofrec = 0 Then
			              IF (V_BE <> '0')THEN
			--                SELECT SEQ_FEST.NEXTVAL INTO V_FID FROM DUAL;
			                INSERT INTO Fin_Est_Hosp
			                  (Festid,Pbpid,Patno, Osb_Be)
			                  VALUES (SEQ_FEST.NEXTVAL,v_PBPID,v_PATNO, V_BE);
			              End If;
			        ELSE
			        	 SELECT FESTID,OSB_BE INTO V_FID, I_BE FROM FIN_EST_HOSP WHERE PBPID = V_PBPID;
			                  IF ( I_BE IS NOT NULL AND I_BE = '-1' AND V_BE = '0') THEN
			                    -- delete existing BE when unclick the checkbox
			                      DELETE FROM FIN_EST_HOSP
			                      WHERE PBPID = V_PBPID
			                      AND FESTID = V_FID ;
			                  ELSE
			                      UPDATE Fin_Est_Hosp SET
			                        Osb_Be = V_Be,
			                        PATNO= v_PATNO
			                      WHERE FESTID = V_FID;
			                  END IF;
			        END IF;

				END IF;

				UPDATE OT_APP
				SET
					PATNO = v_PATNO,
					OTAFNAME = v_OTAFNAME,
					OTAGNAME = v_OTAGNAME,
					OTATEL = v_OTATEL,
					OTAHKID = v_OTAHKID
				WHERE OTAID <> v_OTAID
				AND   PBPID = v_PBPID;
		END IF;

		UPDATE BEDPREBOK
		SET
			PATNO = v_PATNO,
			PATFNAME = v_OTAFNAME,
			PATGNAME = v_OTAGNAME,
			PATIDNO = v_OTAHKID,
			PATKHTEL = v_OTATEL,
			EDITUSER = v_USRID,
			EDITDATE = SYSDATE
		WHERE PBPID = v_PBPID;

		UPDATE OT_APP
		SET
			PATNO = v_PATNO,
			OTAFNAME = v_OTAFNAME,
			OTAGNAME = v_OTAGNAME,
			OTATEL = v_OTATEL,
			OTAHKID = v_OTAHKID
		WHERE OTAID <> v_OTAID
		AND   PBPID = v_PBPID;
	END IF;

	---------------
	-- OTLOGPROC
	---------------
	UPDATE OT_APP_PROC SET OAPSTS = 'D' WHERE OTAID = v_OTAID2;
	FOR r IN (
		SELECT OTPID
		FROM   OT_PROC
		WHERE  OTPID IN (
			SELECT REGEXP_SUBSTR(TRIM(v_OTAPPID),'[^,]+', 1, LEVEL) FROM DUAL
			CONNECT BY REGEXP_SUBSTR(TRIM(v_OTAPPID), '[^,]+', 1, LEVEL) IS NOT NULL
		)
		AND    OTPID NOT IN (
			SELECT OTPID FROM OT_APP_PROC WHERE OTAID = v_OTAID2 AND OAPSTS = 'A'
		)
	) LOOP
		SELECT COUNT(1) INTO v_noOfRec FROM OT_APP_PROC WHERE OTAID = v_OTAID2 AND OTPID = r.OTPID;
		IF v_noOfRec = 0 THEN
			INSERT INTO OT_APP_PROC (
				OAPID,
				OTAID,
				OTPID
			) VALUES (
				SEQ_OT_APP_PROC.NEXTVAL,
				TO_NUMBER(v_OTAID2),
				r.OTPID
			);
		ELSE
			UPDATE OT_APP_PROC
			SET    OAPSTS = 'A'
			WHERE  OTAID = TO_NUMBER(v_OTAID2)
			AND    OTPID = r.OTPID;
		END IF;
	END LOOP;
	DELETE OT_APP_PROC WHERE OTAID = v_OTAID2 AND OAPSTS = 'D';

	RETURN o_ERRCODE;
EXCEPTION
WHEN OTHERS THEN
	ROLLBACK;
	dbms_output.put_line('An ERROR was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
	o_ERRMSG := SQLERRM || o_ERRMSG;

	RETURN -999;
END NHS_ACT_NEWEDITOTAPP;
/