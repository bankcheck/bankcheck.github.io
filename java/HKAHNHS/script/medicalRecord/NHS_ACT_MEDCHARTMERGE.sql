CREATE OR REPLACE FUNCTION "NHS_ACT_MEDCHARTMERGE" (
	v_ACTION   IN VARCHAR2,
	v_TOPATNO  IN VARCHAR2,
	v_FMPATNO  IN VARCHAR2,
	v_USRID    IN VARCHAR2,
	v_STECODE  IN VARCHAR2,
	v_DIP      IN VARCHAR2,
	v_MERGEDTL IN TEMPLATE_OBJ_TAB,
	O_ERRMSG   OUT VARCHAR2
)
	RETURN NUMBER
AS
	O_ERRCODE NUMBER;
	SQLSTR VARCHAR2(500);
	v_PMCID NUMBER;
	v_MRDSTS2 VARCHAR2(1);
	v_MRHSTS VARCHAR2(1);
	v_MRLID_S NUMBER;
	v_TOPATFNAME PATIENT.PATFNAME%TYPE;
	v_TOPATGNAME PATIENT.PATGNAME%TYPE;
	v_TOPATSEX PATIENT.PATSEX%TYPE;
	v_TOPATBDATE PATIENT.PATBDATE%TYPE;
	v_TOPATIDNO PATIENT.PATIDNO%TYPE;
	v_TOPATLFNAME PATIENT.PATLFNAME%TYPE;
	v_TOPATLGNAME PATIENT.PATLGNAME%TYPE;

	v_FM_XEXXRDATE patmercht.FM_XEXXRDATE%TYPE;
	v_FM_XEXCTDATE patmercht.FM_XEXCTDATE%TYPE;
	v_FM_XJBNO patmercht.FM_XJBNO%TYPE;
	v_FM_XEXXRDIS patmercht.FM_XEXXRDIS%TYPE;
	v_FM_XEXCTDIS patmercht.FM_XEXCTDIS%TYPE;
	v_TO_XEXXRDATE patmercht.TO_XEXXRDATE%TYPE;
	v_TO_XEXCTDATE patmercht.TO_XEXCTDATE%TYPE;
	v_TO_XJBNO patmercht.TO_XJBNO%TYPE;
	v_TO_XEXXRDIS patmercht.TO_XEXXRDIS%TYPE;
	v_TO_XEXCTDIS patmercht.TO_XEXCTDIS%TYPE;
	v_MRDID MEDRECDTL.MRDID%TYPE;

	v_TABNAME   VARCHAR2(100);
	v_TABFIELD   VARCHAR2(100);
	v_TABREF   VARCHAR2(100);
	v_COUNT	NUMBER;

	bAvail_Update boolean;

	CURSOR c_getXexpire IS
	SELECT F.XEXXRDATE FM_XEXXRDATE,F.XEXCTDATE FM_XEXCTDATE,
		F.XJBNO FM_XJBNO,F.XEXXRDIS FM_XEXXRDIS,F.XEXCTDIS FM_XEXCTDIS,
		T.XEXXRDATE TO_XEXXRDATE,T.XEXCTDATE TO_XEXCTDATE,
		T.XJBNO TO_XJBNO,T.XEXXRDIS TO_XEXXRDIS,t.XEXCTDIS TO_XEXCTDIS
	From (select * from Xexpire where patno = v_FMPATNO) F,(select * from Xexpire where patno=v_TOPATNO) T;
BEGIN
	O_ERRCODE := 0;
	O_ERRMSG := 'OK';

	SELECT SEQ_PATMERCHT.NEXTVAL INTO v_PMCID FROM DUAL;

	SELECT
		PATFNAME,
		PATGNAME,
		PATSEX,
		PATBDATE,
		PATIDNO,
		PATLFNAME,
		PATLGNAME
	INTO
		v_TOPATFNAME,
		v_TOPATGNAME,
		v_TOPATSEX,
		v_TOPATBDATE,
		v_TOPATIDNO,
		v_TOPATLFNAME,
		v_TOPATLGNAME
	FROM PATIENT P
	WHERE P.PATNO = v_TOPATNO;

	INSERT INTO PATMERCHT (
		PMCID,
		TO_PATNO, ---TO PAT
		TO_PATFNAME,
		TO_PATGNAME,
		TO_PATSEX,
		TO_PATBDATE,
		TO_PATIDNO,
		PMCDATE,
		USRID,
		STECODE,
		FM_PATNO, ---FROM PAT
		FM_PATFNAME,
		FM_PATGNAME,
		FM_PATCNAME,
		FM_PATIDNO,
		FM_PATBDATE,
		FM_PATSEX,
		FM_PATMSTS,
		FM_PATADD1,
		FM_PATADD2,
		FM_PATADD3,
		FM_PATHTEL,
		FM_PATOTEL,
		FM_LOCCODE,
		FM_PATRDATE,
		FM_PATVCNT,
		FM_REGID_L,
		FM_REGID_C,
		FM_PATNB,
		FM_PATMOTHER,
		FM_PATKNAME,
		FM_PATKRELA,
		FM_PATKHTEL,
		FM_PATKOTEL,
		FM_PATKPTEL,
		FM_PATKMTEL,
		FM_PATSTS,
		FM_STECODE,
		FM_PATSTAFF,
		FM_PATMNAME,
		FM_PATITP,
		FM_TITDESC,
		FM_MOTHCODE,
		FM_COUCODE,
		FM_PATKADD,
		FM_PATPAGER,
		FM_PATFAXNO,
		FM_PATRMK,
		FM_LASTPRTDATE,
		FM_LASTUPD,
		FM_USRID,
		FM_DEATH,
		FM_RELIGIOUS,
		FM_OCCUPATION,
		FM_EDULEVEL,
		FM_PATEMAIL,
		FM_PATKEMAIL,
		FM_PATLFNAME,
		FM_PATLGNAME,
		TO_PATLFNAME,
		TO_PATLGNAME)
	SELECT
		v_PMCID,
		v_TOPATNO,
		v_TOPATFNAME,
		v_TOPATGNAME,
		v_TOPATSEX,
		v_TOPATBDATE,
		v_TOPATIDNO,
		SYSDATE,
		v_USRID,
		v_STECODE,
		FM.PATNO,
		FM.PATFNAME,
		FM.PATGNAME,
		FM.PATCNAME,
		FM.PATIDNO,
		FM.PATBDATE,
		FM.PATSEX,
		FM.PATMSTS,
		FM.PATADD1,
		FM.PATADD2,
		FM.PATADD3,
		FM.PATHTEL,
		FM.PATOTEL,
		FM.LOCCODE,
		FM.PATRDATE,
		FM.PATVCNT,
		FM.REGID_L,
		FM.REGID_C,
		FM.PATNB,
		FM.PATMOTHER,
		FM.PATKNAME,
		FM.PATKRELA,
		FM.PATKHTEL,
		FM.PATKOTEL,
		FM.PATKPTEL,
		FM.PATKMTEL,
		FM.PATSTS,
		FM.STECODE,
		FM.PATSTAFF,
		FM.PATMNAME,
		FM.PATITP,
		FM.TITDESC,
		FM.MOTHCODE,
		FM.COUCODE,
		FM.PATKADD,
		FM.PATPAGER,
		FM.PATFAXNO,
		FM.PATRMK,
		FM.LASTPRTDATE,
		FM.LASTUPD,
		FM.USRID,
		FM.DEATH,
		FM.RELIGIOUS,
		FM.OCCUPATION,
		FM.EDULEVEL,
		FM.PATEMAIL,
		FM.PATKEMAIL,
		FM.PATLFNAME,
		FM.PATLGNAME,
		v_TOPATLFNAME,
		v_TOPATLGNAME
	FROM PATIENT FM
	WHERE FM.PATNO = v_FMPATNO;

	-- merge eHR active patno
	SELECT COUNT(1) INTO V_COUNT FROM (
		SELECT 1 FROM EHR_PMI WHERE
			(NOT EXISTS (SELECT * FROM EHR_PMI WHERE PATNO = V_TOPATNO) OR (PATNO = V_TOPATNO AND ACTIVE <> -1))
		INTERSECT
		SELECT 1 FROM EHR_PMI WHERE PATNO = V_FMPATNO AND ACTIVE = -1
	);
	IF V_COUNT > 0 THEN
		SELECT COUNT(1) INTO V_COUNT FROM EHR_PMI WHERE PATNO = V_TOPATNO;
		IF V_COUNT > 0 THEN
			DELETE FROM EHR_PMI WHERE PATNO = V_TOPATNO;
		END IF;
		UPDATE EHR_PMI SET PATNO = V_TOPATNO WHERE PATNO = V_FMPATNO;
	END IF;

	FOR I IN 1..v_MERGEDTL.COUNT LOOP
		v_TABNAME := v_MERGEDTL(I).COLUMN02;
		v_TABFIELD := v_MERGEDTL(I).COLUMN03;
		v_TABREF := v_MERGEDTL(I).COLUMN04;

		INSERT INTO PatMerDtl(
			PMDID,
			PMCID,
			TABNAME,
			TABFIELD,
			TABREF
		) VALUES (
			SEQ_PATMERDTL.NEXTVAL,
			v_PMCID,
			v_TABNAME,
			v_TABFIELD,
			v_TABREF
		);

		O_ERRMSG := O_ERRMSG || '[' || v_TABNAME || '][' || v_TABFIELD || '][' || v_TABREF || ']';

		IF UPPER(v_TABNAME) = 'MEDRECHDR' THEN
			SELECT MRLID_S
			INTO v_MRLID_S
			FROM MEDRECHDR H, MEDRECDTL D
			WHERE H.MRDID = D.MRDID
			AND H.MRHID = v_TABREF;

			UPDATE MEDRECHDR
			SET MRHSTS = 'D'
			WHERE MRHID = v_TABREF;

			v_MRDID := SEQ_MEDRECDTL.NEXTVAL;

			O_ERRMSG  := O_ERRMSG||'['||v_MRDID||']';

			INSERT INTO MEDRECDTL(
				MRDID,
				MRHID,
				MRDSTS,
				MRDDDATE,
				MRDRDATE,
				MRLID_S,
				MRLID_L,
				DOCCODE,
				MRDRMK,
				USRID,
				MRLID_R,
				REQLOC
			) VALUES (
				v_MRDID,
				v_TABREF,
				'D',
				SYSDATE,
				NULL,
				v_MRLID_S,
				NULL,
				NULL,
				NULL,
				v_USRID,
				NULL,
				NULL);
		ELSE
			O_ERRMSG  := O_ERRMSG || '[1]';
			IF UPPER(v_TABNAME) <> 'XEXPIRE' THEN
				O_ERRMSG := O_ERRMSG || '[2]';
				IF SUBSTR(v_TABFIELD,-2) = 'NO' THEN
					O_ERRMSG := O_ERRMSG || '[3]';
					SQLSTR := 'UPDATE  ' || v_TABNAME || ' SET PATNO =''' || v_TOPATNO ||
						''' WHERE ' || v_TABFIELD || '=''' || v_TABREF || '''';
				ELSE
					O_ERRMSG := O_ERRMSG || '[4]';
					SQLSTR := 'UPDATE  ' || v_TABNAME || ' SET PATNO =''' || v_TOPATNO ||
						''' WHERE ' || v_TABFIELD || '=TO_NUMBER(''' || v_TABREF || ''')';
				END IF;
				EXECUTE IMMEDIATE SQLSTR;
			END IF;
		END IF;
	END LOOP;

	DELETE FROM PATIENT_EXTRA WHERE PATNO = v_FMPATNO;
	DELETE FROM PATIENT WHERE PATNO = v_FMPATNO;

	UPDATE patient SET PMCID = v_PMCID WHERE patno = v_TOPATNO;

	IF v_DIP = '1' THEN
		O_ERRMSG  := O_ERRMSG||'[v_DIP]['||v_DIP||']';
		OPEN c_getXexpire;
		LOOP
			FETCH c_getXexpire INTO v_FM_XEXXRDATE, v_FM_XEXCTDATE, v_FM_XJBNO, v_FM_XEXXRDIS, v_FM_XEXCTDIS, v_TO_XEXXRDATE, v_TO_XEXCTDATE, v_TO_XJBNO, v_TO_XEXXRDIS, v_TO_XEXCTDIS;
			EXIT WHEN c_getXexpire%NOTFOUND;

			O_ERRMSG := O_ERRMSG || '[' || TO_CHAR(v_PMCID) || '][' || v_FM_XJBNO;

			UPDATE patmercht
			SET FM_XEXXRDATE = v_FM_XEXXRDATE,
				FM_XEXCTDATE = v_FM_XEXCTDATE,
				FM_XJBNO = v_FM_XJBNO,
				FM_XEXXRDIS = v_FM_XEXXRDIS,
				FM_XEXCTDIS = v_FM_XEXCTDIS,
				TO_XEXXRDATE = v_TO_XEXXRDATE,
				TO_XEXCTDATE = v_TO_XEXCTDATE,
				TO_XJBNO = v_TO_XJBNO,
				TO_XEXXRDIS = v_TO_XEXXRDIS,
				TO_XEXCTDIS = v_TO_XEXCTDIS
			where PMCId = v_PMCID;

			bAvail_Update := FALSE;

			IF v_FM_XJBNO IS NULL AND v_TO_XJBNO IS NULL THEN
				O_ERRMSG  := O_ERRMSG||'[5]';
				IF TRUNC(v_FM_XEXXRDATE,'DD')>TRUNC(v_TO_XEXXRDATE,'DD') AND  TRUNC(v_FM_XEXCTDATE,'DD')>TRUNC(v_TO_XEXCTDATE,'DD') THEN
					O_ERRMSG  := O_ERRMSG||'[6]';
					bAvail_Update := TRUE;
				ELSIF TRUNC(v_FM_XEXXRDATE,'DD')>TRUNC(v_TO_XEXXRDATE,'DD') AND  TRUNC(v_FM_XEXCTDATE,'DD')<TRUNC(v_TO_XEXCTDATE,'DD') THEN
					O_ERRMSG  := O_ERRMSG||'[7]';
					UPDATE Xexpire
					SET XEXXRDATE = NVL(v_FM_XEXXRDATE,NULL)
					WHERE patno =v_TOPATNO;
				ELSIF TRUNC(v_FM_XEXXRDATE,'DD')<TRUNC(v_TO_XEXXRDATE,'DD') AND  TRUNC(v_FM_XEXCTDATE,'DD')>TRUNC(v_TO_XEXCTDATE,'DD') THEN
					O_ERRMSG  := O_ERRMSG||'[8]';
					UPDATE Xexpire
					set xexctdate= NVL(v_FM_XEXCTDATE,NULL)
					where patno = v_TOPATNO;
				END IF;
			ELSIF v_FM_XJBNO>v_TO_XJBNO THEN
				O_ERRMSG  := O_ERRMSG||'[bAvail_Update_TRUE]';
				bAvail_Update := TRUE;
			END IF;

			IF bAvail_Update = TRUE THEN
				UPDATE Xexpire
				set XEXXRDATE = v_FM_XEXXRDATE,
					XEXCTDATE = v_FM_XEXCTDATE,
					XJBNO = v_FM_XJBNO,
					XEXXRDIS = v_TO_XEXXRDIS,
					XEXCTDIS = v_TO_XEXCTDIS
				WHERE patno=v_TOPATNO;
				O_ERRMSG  := O_ERRMSG||'][TRUE]';
			ELSE
				O_ERRMSG  := O_ERRMSG||'][FALSE]';
			END IF;

			DELETE FROM Xexpire
			WHERE patno = v_FMPATNO;
		END LOOP;
	ELSE
		O_ERRMSG  := O_ERRMSG||'][NODIP]['||v_DIP||']';
	END IF;

	RETURN O_ERRCODE;
EXCEPTION
WHEN OTHERS THEN
	ROLLBACK;
	DBMS_OUTPUT.PUT_LINE('An ERROR was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
	O_ERRMSG := O_ERRMSG || 'An ERROR was encountered - '||SQLCODE||' -ERROR- '||SQLERRM;
	RETURN -1;
END NHS_ACT_MEDCHARTMERGE;
/
