package hkah;

import hk.gov.ehr.hepr.ws.*;

import org.hl7.v3.Participant;
import org.apache.commons.lang.ArrayUtils;
import org.apache.log4j.Logger;
import org.hl7.v3.LabResultGenDetail;
import org.hl7.v3.LabResultGenDetail.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import test.client.HeprWebServiceClient;

import java.sql.*;

import jcifs.smb.NtlmPasswordAuthentication;
import jcifs.smb.SmbFile;
import jcifs.smb.SmbFileInputStream;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.FileHeader;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.hkah.constant.ConstantsEhr;
import com.hkah.constant.ConstantsServerSide;
import com.hkah.ehr.common.FactoryBase;
import com.hkah.ehr.service.LabService;
import com.hkah.util.db.ConnUtil;

import com.hkah.util.mail.UtilMail2;
import com.hkah.web.common.ReportableListObject;

@Service()
public class labScheduler {
	protected static Logger logger = Logger.getLogger(labScheduler.class);
	
	private String uploadMode ;
	private String updRecordKey ; 
	private String transactionType ;
	private String recordKey;
	// use for set last update dtm
	private String rptDate ;
	private String rptFilename ;
	private String fileInd ;
			
	private String getUploadMode() {
		return uploadMode;
	}
	private String getUpdRecordKey() {
		return updRecordKey;
	}
	private String getTransactionType() {
		return transactionType;
	}
	private String getRecordKey() {
		return recordKey;
	}
	private String getRptDate() {
		return rptDate;  
	}
	private String getRptFilename() {
		return rptFilename;
	}
	
	private static String getParam(String key, String defaultVal){
        PreparedStatement ps = null;
		Connection conn = null;
        ResultSet rs = null;
        String sql;
        String val = defaultVal;
        
		try {
			
        	sql = "select PARAM1 from sysparam where parcde=?";
        
        	conn = ConnUtil.getDataSourceHATS().getConnection();
    		ps = conn.prepareStatement(sql);
            ps.setString(1, key);
            rs = ps.executeQuery();
            
            if (rs.next()) {
            	val = rs.getString("PARAM1");
            } 
                                    
        } catch (Exception e) {
            logger.info("[labScheduler] getParam error");
            e.printStackTrace();
            
        } finally {
        	try {
        		if (rs != null)
        			rs.close();
        		
        		if (ps != null)
        			ps.close();
        		
        		ConnUtil.closeConnection(conn);
        	} catch(Exception e) {
                logger.info("[labScheduler] Cannot close getParam connection");
                e.printStackTrace();
        	}
        }
        
        return val;
	}	

	private void generateKey() {
        this.recordKey = null;
        
        PreparedStatement ps = null;
        Connection conn = null;
        ResultSet rs = null;
        String sql;
                
		try {
			
            sql = "select to_char(ehr_seq.nextval) from dual";
            conn = ConnUtil.getDataSourceLIS().getConnection();
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            			
            if (rs.next()) {
            	this.recordKey = rs.getString(1);
                logger.info("[labScheduler] gen key:" + this.recordKey);         	
            }
                        
        } catch (Exception e) {
            logger.info("[labScheduler] Cannot generate record key");
            e.printStackTrace();
            
        } finally {
        	try {
        		if (rs != null)
        			rs.close();
        		
        		if (ps != null)
        			ps.close();
        		
        		ConnUtil.closeConnection(conn);
        	} catch(Exception e) {
                logger.info("[labScheduler] Cannot close connection");
                e.printStackTrace();
        	}
        }
        
	}
	
	private String getLOINCDesc(String TermID){
        PreparedStatement ps = null;
		Connection conn = null;
        ResultSet rs = null;
        String sql;
        String desc = null;
        
		try {
			
        	sql = "select description from labm_loinc " +
        			" where loinc_code = ? ";
        	conn = ConnUtil.getDataSourceLIS().getConnection();
    		ps = conn.prepareStatement(sql);
            ps.setString(1, TermID);
            rs = ps.executeQuery();
            
            if (!rs.next()) {
            	logger.info("[labScheduler] LOINC not found: " + TermID);
            } else {
            	desc = rs.getString("description");
            }
                                    
        } catch (Exception e) {
            logger.info("[labScheduler] LOINC error: " + TermID);
            e.printStackTrace();
            
        } finally {
        	try {
        		if (rs != null)
        			rs.close();
        		
        		if (ps != null)
        			ps.close();
        		
        		ConnUtil.closeConnection(conn);
        	} catch(Exception e) {
                logger.info("[labScheduler] Cannot close connection");
                e.printStackTrace();
        	}
        }
        
        return desc;
	}
		
	private LabResultGenDetail.LabReqData req(String labnum, String testcat){
		
		LabResultGenDetail.LabReqData r = new LabResultGenDetail.LabReqData();
		
	   	PreparedStatement psReqData = null;
	   	Connection conn = null;
	    ResultSet rsReqData = null;
        String sql;
        String orderNo = null;

        r.setRecordKey(getRecordKey());
        
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
    	r.setTransactionDtm(sdf.format(cal.getTime()));

		try {
			
			r.setTransactionType(getTransactionType());
			// use to replace labo_masthead update_dtm
        	r.setLastUpdateDtm(getRptDate());
        	
        	if ( ! getTransactionType().equals("D") ) {

            
        		sql = "select to_char(date_rpt, 'yyyy-mm-dd hh24:mi:ss') || '.000' update_dtm, regid, doc_nameo, " +
        			" to_char(date_in, 'yyyy-mm-dd hh24:mi:ss') || '.000' date_in, " +
        			" comments, m.spec_type, to_char(recv_date, 'yyyy-mm-dd hh24:mi:ss') || '.000' arrival_dtm, " +
        			" decode(date_col, null, null, to_char(date_col, 'yyyy-mm-dd hh24:mi:ss') || '.000') collect_dtm, " +
        			" s.spec_desc, ref_hcpid, req_no " +
        			" from labo_masthead m left outer join labm_spec_type s on m.spec_type = s.spec_type " +
        			" where lab_num = ? ";
        	
        		conn = ConnUtil.getDataSourceLIS().getConnection();
        		psReqData = conn.prepareStatement(sql);

        		psReqData.setString(1, labnum) ;
        		rsReqData = psReqData.executeQuery();

        		if (!rsReqData.next()) {
        			logger.info("[labScheduler] LabReqData data not found: labnum:" + labnum);
        		} else {
				// set LabReqData
            	            	
                	r.setEpisodeNo(rsReqData.getString("regid"));

//20190712 Arran add for CRC
                	//r.setAttendanceInstId("5987754786");
					if  (rsReqData.getString("ref_hcpid") == null || rsReqData.getString("ref_hcpid").isEmpty()) {						
						r.setAttendanceInstId(FactoryBase.getInstance().getSysparamValue("hcp_id"));
					} else {
						r.setAttendanceInstId(rsReqData.getString("ref_hcpid"));
						orderNo = rsReqData.getString("ref_hcpid") + ":" + rsReqData.getString("req_no");
						r.setOrderNo(orderNo);
					}
						
                	r.setRequestNo(labnum);
                	r.setRequestDoctor(rsReqData.getString("doc_nameo"));

                	//r.setRequestParticipantInstId("5987754786");
                	r.setRequestParticipantInstId(FactoryBase.getInstance().getSysparamValue("hcp_id"));
                	
                	//r.setRequestParticipantInstName("ADV TEST");
                	r.setRequestParticipantInstName(FactoryBase.getInstance().getSysparamValue("hcp_name"));

                	//r.setRequestParticipantInstLtDesc("HKAH");
                	r.setRequestParticipantInstLtDesc(FactoryBase.getInstance().getSysparamValue("hcp_name"));
                	
                	if (testcat.equals("1")) {
                		r.setLabCategoryCd("CHEM");
                		r.setLabCategoryDesc("Chemical Pathology");
                		r.setLabCategoryLtDesc("Chemistry");
                	} else if (testcat.equals("M")) {
                		r.setLabCategoryCd("CHEM");
                		r.setLabCategoryDesc("Chemical Pathology");
                		r.setLabCategoryLtDesc("Molecular Genetics");
                	} else if (testcat.equals("2")){
                		r.setLabCategoryCd("HAEM");
                		r.setLabCategoryDesc("Haematology");
                		r.setLabCategoryLtDesc("Hematology");
                	} else if (testcat.equals("3")){
                		r.setLabCategoryCd("GEOT");
                		r.setLabCategoryDesc("General & Other");
                		r.setLabCategoryLtDesc("Stool/Urinalysis");
                	} else if (testcat.equals("4")){
                		//r.setLabCategoryCd("PATH");
                		//r.setLabCategoryDesc("Anatomical Pathology");
                		r.setLabCategoryCd("GEOT");
                		r.setLabCategoryDesc("General & Other");
                		r.setLabCategoryLtDesc("Referral");
                	}
            		r.setFileInd(fileInd);
                	
                	// r.setPerformLabName("HKAH");
                	r.setPerformLabName(FactoryBase.getInstance().getSysparamValue("hcp_name"));
                	
            		r.setReportReferenceDtm(rsReqData.getString("date_in"));
            		r.setLabReportComment(rsReqData.getString("comments"));
            		r.setSpecimenTypeLtId(rsReqData.getString("spec_type"));
            		r.setSpecimenArrivalDtm(rsReqData.getString("arrival_dtm"));
            		r.setSpecimenCollectDtm(rsReqData.getString("collect_dtm"));
            		
            		//r.setRecordCreationInstId("5987754786");
            		r.setRecordCreationInstId(FactoryBase.getInstance().getSysparamValue("hcp_id"));
            		
            		//r.setRecordCreationInstName("ADV TEST");
            		r.setRecordCreationInstName(FactoryBase.getInstance().getSysparamValue("hcp_name"));
            		
            		r.setRecordUpdateDtm(rsReqData.getString("date_in"));

            		//r.setRecordUpdateInstId("5987754786");
            		r.setRecordUpdateInstId(FactoryBase.getInstance().getSysparamValue("hcp_id"));
            		
            		//r.setRecordUpdateInstName("ADV TEST");
            		r.setRecordUpdateInstName(FactoryBase.getInstance().getSysparamValue("hcp_name"));
            		
            		r.setSpecimenTypeLtDesc(rsReqData.getString("spec_desc"));
            	}
        		
            } else {
//req data for delete
            	sql = "select order_no " +
            			" from ehr_log_header " +
            			" where record_key = ? ";
            	
            		conn = ConnUtil.getDataSourceLIS().getConnection();
            		psReqData = conn.prepareStatement(sql);

            		psReqData.setString(1, getRecordKey()) ;
            		rsReqData = psReqData.executeQuery();

            		if (!rsReqData.next()) {
            			logger.info("[labScheduler] LabReqData data not found for delete: RecordKey:" + getRecordKey());
            		} else {
            			orderNo = rsReqData.getString("order_no");
						r.setOrderNo(orderNo);
            		}
            }
			                       
        } catch (Exception e) {
            logger.info("[labScheduler] LabReqData Error, labnum: " + labnum + " testcat: " + testcat);
            e.printStackTrace();
            
        } finally {
        	try {        		
        		if (rsReqData != null)
        			rsReqData.close();
        		
        		if (psReqData != null)
        			psReqData.close();        	
        		
        		ConnUtil.closeConnection(conn);
        	} catch(Exception e) {
                logger.info("[labScheduler] Cannot close connection");
                e.printStackTrace();
        	}
        }        
        return r; 
	}
	
	private List<LabgenResultData> genResult(String labnum, String testcat){
	
		List<LabgenResultData> result = new ArrayList<LabgenResultData>();
		LabgenResultData item;
		
        PreparedStatement ps = null;
        Connection conn = null;
        ResultSet rs = null;
        String sql;

		try {
						
			//2016-11-07 replace empty profile for test num; add abnormal_ind_desc
/*			
        	sql = "select r.test_type test_type, r.test_num test_id, r.short_desc test_desc, r.result_txt rpt_result, decode(isNumber(r.result_txt),0,'N',1,'T') rpt_result_type, r.units rpt_result_unit, " +
					" r.print_ref_txt reference_range, nvl(r.profile, r.test_num) panel, decode(d.flag, 'H', 'H', 'L', 'L', '') abnormal_ind, decode(d.flag, 'H', 'High', 'L', 'Low', '') abnormal_ind_desc,  decode(d.flag, 'H', 'High', 'L', 'Low', d.flag) abnormal_ind_lt_desc, nvl(p.short_desc, r.short_desc) panel_desc, l.loinc test_rt_id, nvl2(l.loinc, 'LOINC', null) test_rt_name, " +
					" to_char(h.release_dt ,'yyyy-mm-dd hh24:mi:ss') || '.000' auth_dtm, r.result result " +
					" from labo_disp_result r " +
					" inner join labm_testtype t on (r.test_type = t.test_type ) " +
					" inner join labo_detail d on (r.lab_num = d.lab_num and r.test_num = d.test_num ) " +
					" left outer join labm_prices p on (r.profile = p.code ) " +
					" left outer join labm_prices l on (r.test_num = l.code ) " +
					" inner join labo_header h on (r.lab_num = h.lab_num and r.test_type = h.test_type) " +
					" where r.lab_num = ? " +
					" and t.dept_grp = ? " +
					" and r.result_txt is not null " +
					" and r.status = '2' " +
					" and r.report = '1' ";
*/
//20190716 add enum_result 			
        	sql = "select r.test_type test_type, r.test_num test_id, r.short_desc test_desc, r.result_txt rpt_result, decode(isNumber(r.result_txt),0,'N',1,'T') rpt_result_type, r.units rpt_result_unit, " +
					" r.print_ref_txt reference_range, nvl(r.profile, r.test_num) panel, decode(d.flag, 'H', 'H', 'L', 'L', '') abnormal_ind, decode(d.flag, 'H', 'High', 'L', 'Low', '') abnormal_ind_desc,  decode(d.flag, 'H', 'High', 'L', 'Low', d.flag) abnormal_ind_lt_desc, nvl(p.short_desc, r.short_desc) panel_desc, l.loinc test_rt_id, nvl2(l.loinc, 'LOINC', null) test_rt_name, " +
					" to_char(h.release_dt ,'yyyy-mm-dd hh24:mi:ss') || '.000' auth_dtm, r.result result, " +
					" DECODE(INSTR(result_txt, chr(13)), 0, result_txt, null, result_txt, SUBSTR(result_txt, 0, INSTR(result_txt, chr(13))-1)) enum_result, r.test_comment, " +
					" DECODE(INSTR(r.print_ref_txt, chr(13)), 0, r.print_ref_txt, null, r.print_ref_txt, SUBSTR(r.print_ref_txt, 0, INSTR(r.print_ref_txt, chr(13))-1)) enum_ref " +
					" from labo_disp_result r " +
					" inner join labm_testtype t on (r.test_type = t.test_type ) " +
					" inner join labo_detail d on (r.lab_num = d.lab_num and r.test_num = d.test_num ) " +
					" left outer join labm_prices p on (r.profile = p.code ) " +
					" left outer join labm_prices l on (r.test_num = l.code ) " +
					" inner join labo_header h on (r.lab_num = h.lab_num and r.test_type = h.test_type) " +
					" where r.lab_num = ? " +
					" and t.dept_grp = ? " +
					" and r.result_txt is not null " +
					" and r.status = '2' " +
					" and r.report = '1' ";        	

        	conn = ConnUtil.getDataSourceLIS().getConnection();       	
        	ps = conn.prepareStatement(sql);
 
        	ps.setString(1, labnum);
        	ps.setString(2, testcat);
        	rs = ps.executeQuery();
        	        	
        	while (rs.next()){        	
            	
    			//logger.info("[labScheduler] DEBUG: 1.1");        		
                 	
        		item = new LabgenResultData();
        		item.setRecordKey(getRecordKey());
        		item.setTestRtName(rs.getString("test_rt_name"));
        		item.setTestRtId(rs.getString("test_rt_id"));
        		item.setTestRtDesc(getLOINCDesc(rs.getString("test_rt_id")));
        		item.setTestLtId(rs.getString("test_id"));
        		item.setTestLtDesc(rs.getString("test_desc"));

        		// 2015-06-12
//20190904 Only send unit for numeric result        		
//    			item.setResultUnit(rs.getString("rpt_result_unit"));
//20180910 Arran modified    			
    			//item.setReportableResult(rs.getString("rpt_result"));
/*    			
           		if (rs.getString("rpt_result").length() > 255)
        			item.setReportableResult(rs.getString("rpt_result").substring(0, 251) + "...");
        		else
        			item.setReportableResult(rs.getString("rpt_result"));
*/
    			//logger.info("[labScheduler] DEBUG: END");        		

//20190712 including test type O for CRC           		
        		if (rs.getString("test_type").equals("1") || rs.getString("test_type").equals("7")
        				|| rs.getString("test_type").equals("I") || rs.getString("test_type").equals("O")
        				|| rs.getString("test_type").equals("2") || rs.getString("test_type").equals("5")
        				|| rs.getString("test_type").equals("C") || rs.getString("test_type").equals("L")) {
        			
        			// if result is numeric then setResultType to 1 else setResultType to 2
        			// 2015-06-12
        			if ( rs.getString("rpt_result_type").equals("N") ) {
        				item.setResultType("1");
            			item.setNumericResult(rs.getString("result"));
            			item.setReportableResult(rs.getString("rpt_result"));
//20190904 Only send unit for numeric result             			
            			item.setResultUnit(rs.getString("rpt_result_unit"));
            			item.setReferenceRange(rs.getString("reference_range"));
        			}
        			else {
        				item.setResultType("2");
        				item.setEnumeratedResult(rs.getString("enum_result"));
        				item.setReportableResult(rs.getString("enum_result"));
            			item.setReferenceRange(rs.getString("reference_range"));
        			}
        				
        		} else {
        			item.setResultType("3");
        			item.setTextResult(rs.getString("result"));
        			
               		if (rs.getString("rpt_result").length() > 255)
            			item.setReportableResult(rs.getString("rpt_result").substring(0, 251) + "...");
            		else
            			item.setReportableResult(rs.getString("rpt_result"));
               		
               		item.setReferenceRange(rs.getString("reference_range"));        			
        		}
               
        		//item.setResultUnit(rs.getString("unit"));
        		//item.setReferenceRange(rs.getString("reference_range"));

        		item.setAbnormalIndCd(rs.getString("abnormal_ind"));
        		item.setAbnormalIndDesc(rs.getString("abnormal_ind_desc"));
        		item.setAbnormalIndLtDesc(rs.getString("abnormal_ind_lt_desc"));
        		        		
        		item.setPanelLtCd(rs.getString("panel"));
        		item.setPanelLtDesc(rs.getString("panel_desc"));
        		
        		item.setReportAuthDtm(rs.getString("auth_dtm"));
        		
        		item.setResultNote(rs.getString("test_comment"));
        		        		
        		result.add(item);
        	}
        	        	
		} catch (Exception e) {
            logger.info("[labScheduler] LabgenResultData Error, labnum:" + labnum + " testcat: " + testcat);
            e.printStackTrace();
            
        } finally {
        	try {
        		if (rs != null)
        			rs.close();
        		
        		if (ps != null)
        			ps.close();
        		       
        		ConnUtil.closeConnection(conn);
        	} catch(Exception e) {
                logger.info("[labScheduler] Cannot close connection");
                e.printStackTrace();
        	}
        }		
		return result;
	}

	private LabResultGenDetail.LabReportData report(String labnum, String testcat) {
		
		LabResultGenDetail.LabReportData r = new LabResultGenDetail.LabReportData();
		
        PreparedStatement ps = null;
        Connection conn = null;
        ResultSet rs = null;
        String sql;
		
		r.setRecordKey(getRecordKey());
		r.setReportStatusCd("F");
		r.setReportStatusDesc("Final report");
		r.setReportStatusLtDesc("Final Report");
		// report filename
		r.setFileName(getRptFilename());
			
		try {

			sql = "	select to_char(release_dt,'yyyy-mm-dd hh24:mi:ss') || '.000' report_dtm" +
        			" from labo_header h, labm_testtype t " +
        			" where h.test_type = t.test_type and h.lab_num = ? and t.dept_grp = ? and h.status = '2' and release_dt is not null";
			conn = ConnUtil.getDataSourceLIS().getConnection();
			ps = conn.prepareStatement(sql);
			ps.setString(1, labnum) ;
			ps.setString(2, testcat) ;
			rs = ps.executeQuery();
			
			if (rs.next())
				r.setReportDtm(rs.getString("report_dtm"));
            
		} catch (Exception e) {
			
            logger.info("[labScheduler] LabReportData Error, labnum:" + labnum + " testcat: " + testcat);
            e.printStackTrace();
            
        } finally {
        	try {
        		if (rs != null)
        			rs.close();
        		
        		if (ps != null)
        			ps.close();
        		
        		ConnUtil.closeConnection(conn);
        	} catch(Exception e) {
                logger.info("[labScheduler] Cannot close connection");
                e.printStackTrace();
        	}
        }		
		return r;
	}
	
    private static void copyFileUsingFileStreams(SmbFile source, File path, File dest) throws IOException {
        SmbFileInputStream input = null;
        OutputStream output = null;
        //try {
           path.mkdirs() ;
           input = new SmbFileInputStream(source);
           output = new FileOutputStream(dest);
           
           byte[] buf = new byte[1024];
           int bytesRead;
           while ((bytesRead = input.read(buf)) > 0) {
             output.write(buf, 0, bytesRead);
             }
        //} finally {
           input.close();
           output.close();
        //}
    }
	
//	@Scheduled(cron="0/15 * * * * ?")	//every 15 seconds
//	@Scheduled(cron="0 0 15 * * ?")		//3:00:00pm
//	@Scheduled(cron="0 0/15 * * * ?") 	//every 15 minutes
//  @Scheduled(cron="0 0/5 * * * ?") 	//every 5 minutes
//  @Scheduled(cron="0 15/30 * * * ?") 	//every 30 minute at 15 and 45
//  @Scheduled(cron="0 15/30 0-7,12-23 * * ?")	//15, 45 every hour (skips 7-12)
//  @Scheduled(cron="0 5/10 * * * ?")	//every 10 minutes starting at 05
//	@Scheduled(cron="0 5/10 12-23 * * ?")	//every 10 minutes starting at 05 on 12-23
//  @Scheduled(cron="0 3/6 * * * ?") //At second :00, every 6 minutes starting at minute :03, of every hour
    
// ***
//production:   
    @Scheduled(cron="0 3/6 * * * ?")
	public void ehrSchedule(){
		
        PreparedStatement psReport = null;
        PreparedStatement psLogHeader = null;
        PreparedStatement psLogDetail = null;
        PreparedStatement psLogStDetail = null;
        PreparedStatement psUpdate_1 = null;
        PreparedStatement psUpdate_D = null;
        PreparedStatement psUpdate_2 = null;
//20191028 Re-init status for BL-M       
        PreparedStatement psUpdate_3 = null;
       
//20190828 obsolete
//      PreparedStatement psUpdate_rec = null;
//		PreparedStatement psUpdate_rollback = null;
        PreparedStatement psInit = null;
        
        Connection conn = null;
        Connection connHATS = null;
        ResultSet rs = null;

        String sql;
        String labnum;
        String testcat;
        String tranType;
        String recKey;
        
        Long ehrLogNo = null ;
//      ArrayList<String> initList = new ArrayList<String>();
        
        String fname;
        String ehr_fname = null;
        String tmp_fname;

        String ori_path = null;
        String tmp_path = null;
        
        //String reportSrcBasePath = "\\\\160.100.2.79\\d$\\mrpdf\\" ;
        String reportSrcBasePath = FactoryBase.getInstance().getSysparamValue(ConstantsEhr.SYSPARAM_LIS_REPORT_SOURCE_PATH);
        String reportTmpBasePath = FactoryBase.getInstance().getSysparamValue(ConstantsEhr.SYSPARAM_LIS_REPORT_TEMP_PATH);
        SmbFile smbFile = null ;
        
		File attachment = null ;
		File destDirFile = null ;
		File target = null ;

		String login_user = FactoryBase.getInstance().getSysparamValue(ConstantsEhr.SYSPARAM_SMB_USERNAME);
	    String login_pass = FactoryBase.getInstance().getSysparamValue(ConstantsEhr.SYSPARAM_SMB_PASSWORD);
        
        Participant p;
        LabResultGenDetail d;
        
		ApplicationContext context = new ClassPathXmlApplicationContext("ClientContext.xml");
		HeprWebServiceClient heprWebServiceClient = (HeprWebServiceClient) context.getBean("HeprWebServiceClient");
        
        //Map<String,File> fileMap;
        Map<String,File> genFileMap_BL = new HashMap<String,File>() ;
        Map<String,File> genFileMap_BL_M = new HashMap<String,File>() ;

        //Response response;
        Response genResponse;
        
        logger.info("[labScheduler] Start 1.89");
        
		try {
			
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
//20190715 init
/*			
			logger.info("[labScheduler] init start");
			sql = "select distinct ehrno, fullname, ehrdob_dtm, ehrsex, ehrhkid, ehrdocno, ehrdoctype " +
					" from ehr_lis_pending where upload_mode = 'BL-M' ";
			//sql = "select patno from ehr_pmi@hat where active = -1 and initlab is null"; 

			conn = ConnUtil.getDataSourceLIS().getConnection();
			psInit = conn.prepareStatement(sql);
            rs = psInit.executeQuery();
			
            Map<Participant,List> pGenMap_init = new HashMap<Participant,List>();
			
            while (rs.next()) {
				p = new Participant() ;
				p.setSex( rs.getString("ehrsex") );
	            p.setBirthDate( rs.getString("ehrdob_dtm") );
				p.setEhrNo( rs.getString("ehrno") );
				p.setHkid( rs.getString("ehrhkid") );
				p.setDocNo( rs.getString("ehrdocno") );
				p.setDocType( rs.getString("ehrdoctype") );
				p.setPersonEngFullName( rs.getString("fullname") );
				logger.info("[LisScheduler] init ehrno: " + rs.getString("ehrno") );

				pGenMap_init.put(p, new ArrayList<LabResultGenDetail>());
				
            }
            
            if ( pGenMap_init.size() > 0 ) {
               	logger.info("[labScheduler] Send init BL-M: " + pGenMap_init.size());
               	try {
               		genResponse = heprWebServiceClient.uploadLabgenData(pGenMap_init, new HashMap<String,File>(), "BL-M");
                   
                    
               	} catch (Exception e) {
               		          
					logger.info("[LisScheduler] send init BL-M error : " + e.getMessage() );
					e.printStackTrace();
				}
            }
                                                                        
            logger.info("[labScheduler] init end");
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            
            //skip testcat 6 Xmatch
						
			sql = "select '1' dummy, sq_ehr_log_no.nextval ehr_log_no, upload_mode, ehr_record_key, patno, " +
					" lab_num, test_cat, rpt_date, rpt_by, fname, " +
					" folder, ehr_status, ehrno, fullname, ehrhkid, " +
					" ehrdocno, ehrdoctype, ehrdob_dtm, ehrsex, encrype, " +
					" passkey " +
					" from (select * from ehr_lis_pending order by encrype, rpt_date desc) " +
					" where rownum <= " + getParam("EHRLISSIZE", "34");

			logger.info("[LisScheduler] sql: " + sql );
						
			conn = ConnUtil.getDataSourceLIS().getConnection();
			psReport = conn.prepareStatement(sql);
            rs = psReport.executeQuery();

//20170111 Arran add upload mode to log						
			sql = "insert into ehr_log_header (ehr_no, patientkey, hkid, doc_type, doc_no, person_eng_surname, " +
					" person_eng_given_name, person_eng_full_name, sex, birth_date, record_key, transaction_dtm, " +
					" transaction_type, last_update_dtm, episode_no, attendance_inst_id, request_no, request_doctor, " +
					" request_part_inst_id, request_part_inst_name, request_part_inst_lt_desc, order_no, lab_category_cd, " +
					" lab_category_lt_desc, perform_lab_name, report_reference_dtm, clinical_info, lab_report_comment, " +
					" specimen_type_rt_name, specimen_type_rt_id, specimen_type_rt_desc, specimen_type_lt_id, " +
					" specimen_type_lt_desc, specimen_arrival_dtm, specimen_collect_dtm, specimen_details, file_ind, " +
					" record_creation_dtm, record_creation_inst_id, record_creation_inst_name, report_status_cd, " +
					" report_status_desc, report_status_lt_desc, report_dtm, file_name, return_code, return_message, test_cat, ehr_log_no, upload_mode ) " +
					" values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

			psLogHeader = conn.prepareStatement(sql);

			sql = "insert into ehr_log_detail (record_key, test_lt_id, test_lt_desc, reportable_result, result_unit, " +
			" reference_range, panel_lt_cd, auth_dtm, auth_staff_id, auth_staff_eng_name, " +
			" abnormal_ind_cd, result_type, numeric_result, ehr_log_no, test_rt_name, test_rt_id, test_rt_desc, " +
			" Enumerated_Result, text_result, panel_lt_desc, abnormal_ind_desc, abnormal_ind_lt_desc, result_note) values " +
			" (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			psLogDetail = conn.prepareStatement(sql);

			sql = "insert into ehr_log_st_detail (RECORD_KEY, TEST_LT_ID, ORGANISM_KEY, ORGANISM_RT_NAME, ORGANISM_RT_ID, " +
			" ORGANISM_RT_DESC, ORGANISM_LT_ID, ORGANISM_LT_DESC, MB_TEXT_RESULT, ORGANISM_GROWTH_TEXT, ST_RT_NAME, " +
			" ST_RT_ID, ST_RT_DESC, ST_LT_ID, ST_LT_DESC, ST_SEQ_NUM, ST_RESULT_CD, ST_RESULT_DESC, ST_RESULT_LT_DESC, ehr_log_no) " +
			" values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			psLogStDetail = conn.prepareStatement(sql);

//20190828 split update rec key and status (rollbacked)
			sql = "update labo_report_log set ehr_status = ?, ehr_record_key = ? where lab_num = ? and test_cat = ? and ehr_status in ('R', 'I') ";
			//sql = "update labo_report_log set ehr_status = 'S' where ehr_record_key = ? and ehr_status = 'R' ";
			psUpdate_1 = conn.prepareStatement(sql);
			
//			sql = "update labo_report_log set ehr_record_key = ? where lab_num = ? and test_cat = ? and ehr_status = 'R' and ehr_record_key is null";
//			psUpdate_rec = conn.prepareStatement(sql);
			
//20190208 Arran add psUpdate_D
			sql = "update labo_report_log set ehr_status = 'D', ehr_record_key = null where ehr_record_key = ? and ehr_status = 'C' ";
			psUpdate_D = conn.prepareStatement(sql);
			
			sql = "update ehr_pmi set initlab = sysdate where patno = ?" ;
			connHATS = ConnUtil.getDataSourceHATS().getConnection();
			psUpdate_2 = connHATS.prepareStatement(sql);
			
//20191028 Arran Re-init status for BL-M		
			sql = "update labo_report_log set ehr_status = 'I' " +
					" where lab_num in (select lab_num from labo_masthead where hospnum = ? or accountnum = ?) " +
					" and ehr_status in ('R', 'S') " +
					" and test_cat in ('1', '2', '3', '4') ";
			psUpdate_3 = conn.prepareStatement(sql);
			

//20190828 obsolete			
//			sql = "update labo_report_log set ehr_status = 'R' where lab_num = ? and test_cat = ? ";
//			psUpdate_rollback = conn.prepareStatement(sql);

            // 20150417
			//Map<Participant,List> pMap = new HashMap<Participant,List>();
			Map<Participant,List> pGenMap_BL = new HashMap<Participant,List>();
			Map<Participant,List> pGenMap_BL_M = new HashMap<Participant,List>();
			Map<Participant,List> pGenMap_init = new HashMap<Participant,List>();
			
			List<String> genEhrLogNoList = new ArrayList<String>() ;
			
            while (rs.next()) {

            	labnum = rs.getString("lab_num");
            	testcat = rs.getString("test_cat");
             	ehrLogNo = rs.getLong("ehr_log_no") ;
            	
            	this.uploadMode = rs.getString("upload_mode") ;
            	this.updRecordKey = rs.getString("ehr_record_key") ;
//20191029 Arran add I for re-Init BL-M            	
    			if ( getUploadMode().equals("BL-M") || getUpdRecordKey().equals("NULL") || "I".equals(rs.getString("ehr_status")) ) {
    				this.transactionType = "I" ;
    			} else {
    				// 20160728
    				if ( "C".equals(rs.getString("ehr_status")) ) {
    					this.transactionType = "D" ;
    				} else {
    					this.transactionType = "U" ;
    				}

    			}
            	this.rptDate = rs.getString("rpt_date");
    			
				logger.info("[labScheduler] labnum: " + labnum + " testcat: " + testcat);
            
				p = new Participant() ;
				p.setSex( rs.getString("ehrsex") );
	            p.setBirthDate( rs.getString("ehrdob_dtm") );
				p.setEhrNo( rs.getString("ehrno") );
				p.setPatientKey( rs.getString("patno") );
				p.setHkid( rs.getString("ehrhkid") );
				p.setDocNo( rs.getString("ehrdocno") );
				p.setDocType( rs.getString("ehrdoctype") );
				p.setPersonEngFullName( rs.getString("fullname") );
				
				if ( rs.getString("fname") == null || rs.getString("fname").isEmpty() || rs.getString("folder") == null || rs.getString("folder").isEmpty() ) {
	
					this.rptFilename = null ;
					fileInd = "0" ;
					
					if ( !"C".equals(rs.getString("ehr_status")) ) {
						logger.info("[LabScheduler] No file attached labnum: " + labnum + " testcat: " + testcat );
						continue ;
					}

				} else {
					try {

					// attach pdf  -- begin
					//ori_path = reportSrcBasePath + "eHR-LIS-pdf\\" + rs.getString("fname") ;
						ori_path = reportSrcBasePath.trim() + rs.getString("folder") + "\\" + rs.getString("fname") ;

					//tmp_path = reportTmpBasePath + rs.getString("fname") ;
						fname = rs.getString("fname");
						tmp_fname = fname.substring(0, fname.length()-4).replace(".", "-") + fname.substring(fname.length()-4, fname.length()) ;
						tmp_path = reportTmpBasePath + tmp_fname ;
/*
						logger.info("[LabScheduler] debug 1.41 : reportSrcBasePath = " + reportSrcBasePath );
						logger.info("[LabScheduler] debug 1.41 : folder = " + rs.getString("folder") );
						logger.info("[LabScheduler] debug 1.41 : ori_path = " + ori_path );
						logger.info("[LabScheduler] debug 1.41 : reportTmpBasePath = " + reportTmpBasePath );
						logger.info("[LabScheduler] debug 1.41 : file copy to = " + tmp_path );
						logger.info("[LabScheduler] debug 1.41 : smb login = " + login_user + " ; " + login_pass );
*/
						logger.info("[LabScheduler] debug: reportSrcBasePath = " + reportSrcBasePath + 
								" folder = " + rs.getString("folder") +
								" ori_path = " + ori_path +
								" reportTmpBasePath = " + reportTmpBasePath +
								" file copy to = " + tmp_path +
								" smb login = " + login_user + " ; " + login_pass );

						NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication("",login_user, login_pass);
					// testing tomcat
					//smbFile = new SmbFile("smb:" + radExamDetail.getFileName(), auth);
					// linux
						smbFile = new SmbFile("smb:" + ori_path.replace("\\", "/"), auth);
						destDirFile = new File( reportTmpBasePath ) ;
						target = new File( tmp_path ) ;
						copyFileUsingFileStreams( smbFile, destDirFile, target ) ;
						
						if ("Z".equals(rs.getString("encrype"))) {
							
							try {
							    ZipFile zipFile = new ZipFile(tmp_path);
							    
							    if (zipFile.isEncrypted()) {
							        zipFile.setPassword(rs.getString("passkey"));
							    }
							    //zipFile.extractAll(reportTmpBasePath);
							    														    
							    List<FileHeader> fileHeaders = zipFile.getFileHeaders();

					            for(FileHeader fileHeader : fileHeaders) {					            	
					            	ehr_fname = fileHeader.getFileName();	
					            	tmp_path =  reportTmpBasePath + ehr_fname ;
					                attachment = new File( tmp_path ) ;
					                
					                zipFile.extractFile(fileHeader, reportTmpBasePath);
					                logger.info("[LabScheduler] debug: extract file: " + tmp_path);
					            }
					            
							} catch (ZipException e) {
								logger.info("[LabScheduler] Unzip file error : " + e.getMessage() );
							    e.printStackTrace();
							    continue;
							}
						} else {
							attachment = target;
							ehr_fname = tmp_fname;
						}
									            
						this.rptFilename = ehr_fname ;
						fileInd = "1" ;												
						
					} catch (Exception e) {
						logger.info("[LabScheduler] Add file error : " + e.getMessage() );
						e.printStackTrace();
						continue;
					}
		            // -- end
				}
				
				//logger.info("[labScheduler] debug5");
				
				if ( "1".equals(testcat) || "2".equals(testcat) || "3".equals(testcat) || "4".equals(testcat) || "M".equals(testcat)){
					//generate record key
					//generateKey();					
/*										
					if ( getTransactionType().equals("I") ) {
						generateKey();
					} else {
						this.recordKey = getUpdRecordKey() ;
					}
*/
//20190807 Change record key logic  					
					if ( getUpdRecordKey().equals("NULL") ) {
						generateKey();
					} else {
						this.recordKey = getUpdRecordKey() ;
					}
					
					List<LabResultGenDetail> detailList = new ArrayList<LabResultGenDetail>();
					d = new LabResultGenDetail();
					d.getLabReqData().add(req(labnum, testcat));
		        	if ( ! "D".equals(getTransactionType()) ) {
						d.getLabgenResultData().addAll(genResult(labnum, testcat));
						d.getLabReportData().add(report(labnum, testcat));
						
						if (d.getLabgenResultData().isEmpty()) {
							logger.info("[labScheduler] Fail: LabgenResultData is empty. record ignored");

	                		psUpdate_1.setString(1, "E" ) ;    							
	                		psUpdate_1.setString(2, null ) ;
							psUpdate_1.setString(3, labnum) ;
    						psUpdate_1.setString(4, testcat) ;
    						
    						psUpdate_1.executeUpdate();
    						psUpdate_1.clearParameters();
    						
							continue;
						}
						
						if (d.getLabReportData().isEmpty()) {
							logger.info("[labScheduler] Fail: LabReportData is empty. record ignored");
							
	                		psUpdate_1.setString(1, "E" ) ;    							
	                		psUpdate_1.setString(2, null ) ;
							psUpdate_1.setString(3, labnum) ;
    						psUpdate_1.setString(4, testcat) ;
    						
    						psUpdate_1.executeUpdate();
    						psUpdate_1.clearParameters();							
							
							continue;
						}
		        	}
/*20190828 obsolete					
					if (d.getLabgenResultData() == null) {
						logger.info("[labScheduler] Fail: detail empty. record ignored");
						psUpdate_rollback.setString(1, labnum) ;
						psUpdate_rollback.setString(2, testcat) ;
						psUpdate_rollback.executeUpdate();
						psUpdate_rollback.clearParameters();  
					} 
*/					
					if (d.getLabgenResultData() != null) {
						detailList.add(d);

						//pMap.put(p,detailList);
						//pGenMap.put(p,detailList);
						if ( "BL".equals(rs.getString("upload_mode")) ) {
				           	logger.info("[labScheduler] debug: prepare BL");

							pGenMap_BL.put(p, detailList);
							// attach pdf file
							if ( fileInd.equals("1") ) {
								genFileMap_BL.put(attachment.getName(), attachment);
							}
						} else {
				           	logger.info("[labScheduler] debug: prepare BL-M");

							pGenMap_BL_M.put(p, detailList);
							pGenMap_init.put(p, new ArrayList<LabResultGenDetail>());
							
							// attach pdf file
							if ( fileInd.equals("1") ) {
								genFileMap_BL_M.put(attachment.getName(), attachment);
							}
						}
						
						//genRecordKeyList.add(getRecordKey()) ;
						genEhrLogNoList.add(rs.getString("ehr_log_no"));

						//fileMap = new HashMap<String,File>();
						
						//			File attachment = new File();
						//			fileMap.put(attachment.getName(),attachment);
	
						// 20150417 : replaced by batch web service request
						//response = heprWebServiceClient.uploadLabgenData(pMap, fileMap, "BL-M");
	
						//if (response!= null) {
						//	logger.info("[labScheduler] Return code: " + response.getResponseCode() + " Return message: " + response.getResponseMessage());
						//}
						//
						psLogHeader.setString(1, p.getEhrNo());
						psLogHeader.setString(2, p.getPatientKey());
						psLogHeader.setString(3, p.getHkid());
						psLogHeader.setString(4, p.getDocType());
						psLogHeader.setString(5, p.getDocNo());
						psLogHeader.setString(6, p.getPersonEngSurname());
						psLogHeader.setString(7, p.getPersonEngGivenName());
						psLogHeader.setString(8, p.getPersonEngFullName());
						psLogHeader.setString(9, p.getSex());
						psLogHeader.setString(10, p.getBirthDate());
						psLogHeader.setString(11, getRecordKey());
						psLogHeader.setString(12, d.getLabReqData().get(0).getTransactionDtm());
						psLogHeader.setString(13, d.getLabReqData().get(0).getTransactionType());
						psLogHeader.setString(14, d.getLabReqData().get(0).getLastUpdateDtm());
						psLogHeader.setString(15, d.getLabReqData().get(0).getEpisodeNo());
						psLogHeader.setString(16, d.getLabReqData().get(0).getAttendanceInstId());
						psLogHeader.setString(17, d.getLabReqData().get(0).getRequestNo());
						psLogHeader.setString(18, d.getLabReqData().get(0).getRequestDoctor());
						psLogHeader.setString(19, d.getLabReqData().get(0).getRequestParticipantInstId());
						psLogHeader.setString(20, d.getLabReqData().get(0).getRequestParticipantInstName());
						psLogHeader.setString(21, d.getLabReqData().get(0).getRequestParticipantInstLtDesc());
						psLogHeader.setString(22, d.getLabReqData().get(0).getOrderNo());
						psLogHeader.setString(23, d.getLabReqData().get(0).getLabCategoryCd());
						psLogHeader.setString(24, d.getLabReqData().get(0).getLabCategoryLtDesc());
						psLogHeader.setString(25, d.getLabReqData().get(0).getPerformLabName());
						psLogHeader.setString(26, d.getLabReqData().get(0).getReportReferenceDtm());
						psLogHeader.setString(27, d.getLabReqData().get(0).getClinicalInfo());
						psLogHeader.setString(28, d.getLabReqData().get(0).getLabReportComment());
						psLogHeader.setString(29, d.getLabReqData().get(0).getSpecimenTypeRtName());
						psLogHeader.setString(30, d.getLabReqData().get(0).getSpecimenTypeRtId());
						psLogHeader.setString(31, d.getLabReqData().get(0).getSpecimenTypeRtDesc());
						psLogHeader.setString(32, d.getLabReqData().get(0).getSpecimenTypeLtId());
						psLogHeader.setString(33, d.getLabReqData().get(0).getSpecimenTypeLtDesc());
						psLogHeader.setString(34, d.getLabReqData().get(0).getSpecimenArrivalDtm());
						psLogHeader.setString(35, d.getLabReqData().get(0).getSpecimenCollectDtm());
						psLogHeader.setString(36, d.getLabReqData().get(0).getSpecimenDetails());
						psLogHeader.setString(37, d.getLabReqData().get(0).getFileInd());
						psLogHeader.setString(38, d.getLabReqData().get(0).getRecordCreationDtm());
						psLogHeader.setString(39, d.getLabReqData().get(0).getRecordCreationInstId());
						psLogHeader.setString(40, d.getLabReqData().get(0).getRecordCreationInstName());
			        	if ( ! getTransactionType().equals("D") ) {
							psLogHeader.setString(41, d.getLabReportData().get(0).getReportStatusCd());
							psLogHeader.setString(42, d.getLabReportData().get(0).getReportStatusDesc());
							psLogHeader.setString(43, d.getLabReportData().get(0).getReportStatusLtDesc());
							psLogHeader.setString(44, d.getLabReportData().get(0).getReportDtm());
							psLogHeader.setString(45, d.getLabReportData().get(0).getFileName());
			        	} else {
							psLogHeader.setString(41, null);
							psLogHeader.setString(42, null);
							psLogHeader.setString(43, null);
							psLogHeader.setString(44, null);
							psLogHeader.setString(45, null);
			        	}
						// 20150417
						//psLogHeader.setString(46, response.getResponseCode());
						//psLogHeader.setString(47, response.getResponseMessage());
						psLogHeader.setString(46, null);
						psLogHeader.setString(47, null);
						psLogHeader.setString(48, testcat);
						psLogHeader.setLong(49, ehrLogNo);
//20170111 Arran add upload mode to log												
						psLogHeader.setString(50, getUploadMode());
						
						psLogHeader.executeUpdate();
						psLogHeader.clearParameters();

			        	if ( ! "D".equals(getTransactionType()) ) {
							for (LabgenResultData result : d.getLabgenResultData()) {
								psLogDetail.setString(1, result.getRecordKey());
								psLogDetail.setString(2, result.getTestLtId());
								psLogDetail.setString(3, result.getTestLtDesc());
								psLogDetail.setString(4, result.getReportableResult());
								psLogDetail.setString(5, result.getResultUnit());
								psLogDetail.setString(6, result.getReferenceRange());
								psLogDetail.setString(7, result.getPanelLtCd());
								psLogDetail.setString(8, result.getReportAuthDtm());
								psLogDetail.setString(9, result.getReportAuthStaffId());
								psLogDetail.setString(10, result.getReportAuthStaffEngName());
								psLogDetail.setString(11, result.getAbnormalIndCd());
								psLogDetail.setString(12, result.getResultType());
								psLogDetail.setString(13, result.getNumericResult());
								psLogDetail.setLong(14, ehrLogNo);
								psLogDetail.setString(15, result.getTestRtName());
								psLogDetail.setString(16, result.getTestRtId());
								psLogDetail.setString(17, result.getTestRtDesc());
								psLogDetail.setString(18, result.getEnumeratedResult());
								psLogDetail.setString(19, result.getTextResult());
								psLogDetail.setString(20, result.getPanelLtDesc());
								psLogDetail.setString(21, result.getAbnormalIndDesc());
								psLogDetail.setString(22, result.getAbnormalIndLtDesc());
								psLogDetail.setString(23, result.getResultNote());
								psLogDetail.executeUpdate();
								psLogDetail.clearParameters();
							}
			        	}


					}

				} 
/*				
				if ("BL-M".equals(rs.getString("upload_mode"))) {
//20181214 Arran update ehr_pmi.initlab after the loop. 					
					initList.add(rs.getString("patno"));
				}
*/									
            }

            // Batch web service request
            sql = "update ehr_log_header set return_code = ?, return_message = ? where ehr_log_no = ? and upload_mode = ? " ;
            psLogHeader = conn.prepareStatement(sql);
            
            Thread.sleep(3000);
//20190905 Arran send init BL-M            
            if ( pGenMap_init.size() > 0 ) {
               	logger.info("[labScheduler] Send init BL-M: " + pGenMap_init.size());
               	try {
               		genResponse = heprWebServiceClient.uploadLabgenData(pGenMap_init, new HashMap<String,File>(), "BL-M");
                   
                    
               	} catch (Exception e) {
               		          
					logger.info("[LisScheduler] send init BL-M error : " + e.getMessage() );
					e.printStackTrace();
				}
            }
            
            Thread.sleep(3000);     
            
//20181213 Arran send BL-M first
            if ( pGenMap_BL_M.size() > 0 ) {
            	                          	
               	logger.info("[labScheduler] Send BL-M: " + pGenMap_BL_M.size());
               	try {
               		genResponse = heprWebServiceClient.uploadLabgenData(pGenMap_BL_M, genFileMap_BL_M, "BL-M");

//Write log
               		for (int i = 0; i < genEhrLogNoList.size(); i++) {
               			psLogHeader.setString(1, genResponse.getResponseCode());
               			psLogHeader.setString(2, genResponse.getResponseMessage());
               			psLogHeader.setString(3, genEhrLogNoList.get(i));
               			psLogHeader.setString(4, "BL-M");
               			psLogHeader.executeUpdate();
               			psLogHeader.clearParameters();               			
               		}
               		 
            		if ( !"00000".equals(genResponse.getResponseCode()) ) {
            			logger.info("[LisScheduler] return code=" + genResponse.getResponseCode());
            			String resMsg = genResponse.getResponseCode() + " - " + genResponse.getResponseMessage();
            			sendAlert(genEhrLogNoList, resMsg);
            		}               		
               		                                
                    for(Map.Entry<Participant,List> entry : pGenMap_BL_M.entrySet()) {                    	

//update initlab   
                    	String patno = entry.getKey().getPatientKey();  
        				String ehrno = entry.getKey().getEhrNo();
        				
                    	psUpdate_2.setString(1, patno);                
        				psUpdate_2.executeUpdate();
        				psUpdate_2.clearParameters();  
        				
                    	logger.info("[LisScheduler] update initlab: patno=" + patno + " ehrno=" + ehrno);                    	
        				
//20191028 Arran re-init status for BL-M                    	
                       	psUpdate_3.setString(1, patno);                       
                    	psUpdate_3.setString(2, ehrno);     	
        				psUpdate_3.executeUpdate();
        				psUpdate_3.clearParameters();

                    }

                    for(Map.Entry<Participant,List> entry : pGenMap_BL_M.entrySet()) {                    	
                    	
//update labo_report_log status            		        				
                    	List<LabResultGenDetail> detailList = entry.getValue();

                    	for(int i = 0; i < detailList.size(); i++) {
                    		
                    		d  = detailList.get(i);
                    		tranType =  d.getLabReqData().get(0).getTransactionType();
                    		recKey = d.getLabReqData().get(0).getRecordKey();
                    		labnum = d.getLabReqData().get(0).getRequestNo();
                    		testcat = null;
              		
                    		if ("Chemistry".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "1";
                    		} else if ("Hematology".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "2";
                    		} else if ("Stool/Urinalysis".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "3";
                    		} else if ("Referral".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "4";
                    		} else if ("Molecular Genetics".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "M";
                    		} 
                    		                                        		
                    		logger.info("[labScheduler] Update BL-M status Type=" + tranType + " Key=" + recKey + " TESTCAT=" + testcat+ " LABNUM=" + labnum);
                    		
    						if ( "D".equals(tranType) ) {
    							psUpdate_D.setString(1, recKey ) ;
    							psUpdate_D.executeUpdate();
        						psUpdate_D.clearParameters();
    						} else {
    	                		psUpdate_1.setString(1, "S" ) ;    							
    	                		psUpdate_1.setString(2, recKey ) ;
    							psUpdate_1.setString(3, labnum) ;
        						psUpdate_1.setString(4, testcat) ;
        						
        						psUpdate_1.executeUpdate();
        						psUpdate_1.clearParameters();
    						}                    									    						    						
                    	}
                    	
                    	
                    } 
                    
               	} catch (Exception e) {
//20190122 Arran add log for exception               		
               		for (int i = 0; i < genEhrLogNoList.size(); i++) {
               			psLogHeader.setString(1, "exception");
               			psLogHeader.setString(2, e.getMessage());
               			psLogHeader.setString(3, genEhrLogNoList.get(i));
               			psLogHeader.setString(4, "BL-M");
               			psLogHeader.executeUpdate();
               			psLogHeader.clearParameters();
               		}

               		String resMsg = "Exception - " + e.getMessage();
        			sendAlert(genEhrLogNoList, resMsg);
        			
					logger.info("[LisScheduler] send BL-M error : " + e.getMessage() );
					e.printStackTrace();
				}
            }
            Thread.sleep(3000);            
            
            if ( pGenMap_BL.size() > 0 ) {            	           		            	
//send BL            	
            	logger.info("[labScheduler] Send BL: " + pGenMap_BL.size());
            	try {
            		genResponse = heprWebServiceClient.uploadLabgenData(pGenMap_BL, genFileMap_BL, "BL");

//write log
            		for (int i = 0; i < genEhrLogNoList.size(); i++) {
            			psLogHeader.setString(1, genResponse.getResponseCode());
            			psLogHeader.setString(2, genResponse.getResponseMessage());
            			psLogHeader.setString(3, genEhrLogNoList.get(i));
               			psLogHeader.setString(4, "BL");
            			psLogHeader.executeUpdate();
            			psLogHeader.clearParameters();            			
            		}
            		
            		if ( !"00000".equals(genResponse.getResponseCode()) ) {
            			logger.info("[LisScheduler] return code=" + genResponse.getResponseCode());         
            			String resMsg = genResponse.getResponseCode() + " - " + genResponse.getResponseMessage();
            			sendAlert(genEhrLogNoList, resMsg);
            		}
            		
//update labo_report_log status            		
                    for(Map.Entry<Participant,List> entry : pGenMap_BL.entrySet()) {
                    	List<LabResultGenDetail> detailList = entry.getValue();
                    	for(int i = 0; i < detailList.size(); i++) {
                    		
                    		d  = detailList.get(i);
                    		tranType =  d.getLabReqData().get(0).getTransactionType();
                    		recKey = d.getLabReqData().get(0).getRecordKey();
                    		labnum = d.getLabReqData().get(0).getRequestNo();
                    		
                    		testcat = null;
                    		
                    		if ("Chemistry".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "1";
                    		} else if ("Hematology".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "2";
                    		} else if ("Stool/Urinalysis".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "3";
                    		} else if ("Referral".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "4";
                    		} else if ("Molecular Genetics".equals(d.getLabReqData().get(0).getLabCategoryLtDesc())) {
                    			testcat = "M";
                    		}
                    		                                        		
                    		logger.info("[labScheduler] Update BL status tranType=" + tranType + " Key=" + recKey + " TESTCAT=" + testcat+ " LABNUM=" + labnum );
                    		
    						if ( "D".equals(tranType) ) {
    							psUpdate_D.setString(1, recKey ) ;
    							psUpdate_D.executeUpdate();
        						psUpdate_D.clearParameters();
    						} else {
    	                		psUpdate_1.setString(1, "S" ) ;    							
    	                		psUpdate_1.setString(2, recKey ) ;
    							psUpdate_1.setString(3, labnum) ;
        						psUpdate_1.setString(4, testcat) ;
        						
        						psUpdate_1.executeUpdate();
        						psUpdate_1.clearParameters();    							    						
    						}    						    						
                    	}
                    }             		
            		            		
            	} catch (Exception e) {
 //20190122 Arran add log for exception               		
               		for (int i = 0; i < genEhrLogNoList.size(); i++) {
               			psLogHeader.setString(1, "exception");
               			psLogHeader.setString(2, e.getMessage());
               			psLogHeader.setString(3, genEhrLogNoList.get(i));
               			psLogHeader.setString(4, "BL");
               			psLogHeader.executeUpdate();
               			psLogHeader.clearParameters();
               		}

               		String resMsg = "Exception - " + e.getMessage();
        			sendAlert(genEhrLogNoList, resMsg);
        			
					logger.info("[LisScheduler] send BL error : " + e.getMessage() );
					e.printStackTrace();
				}
            }
            Thread.sleep(2000);

            logger.info("[labScheduler] Complete");
			
        } catch (Exception e) {
            logger.info("[labScheduler] Error : " + e.getMessage() );
            e.printStackTrace();
            
        } finally {
        	try {
        		if (rs != null)
        			rs.close();
        		
        		if (psInit != null)
        			psInit.close();
        		
        		if (psReport != null)
        			psReport.close();
        		
        		if (psLogHeader != null)
        			psLogHeader.close();
        		
        		if (psLogDetail != null)
        			psLogDetail.close();
        		
        		if (psLogStDetail != null)
        			psLogStDetail.close();
        		
        		if (psUpdate_1 != null)
        			psUpdate_1.close();

        		if (psUpdate_2 != null)
        			psUpdate_2.close();

//20191028 Arran re-init status for BL-M        		
        		if (psUpdate_3 != null)
        			psUpdate_3.close();   	        
        		
        		if (psUpdate_D != null)
        			psUpdate_D.close();
        		
/*20190828 obsolete
         		if (psUpdate_rec != null)
        			psUpdate_rec.close();
        			
        		if (psUpdate_rollback != null)
        			psUpdate_rollback.close();
*/
        		
        		ConnUtil.closeConnection(conn);
        		ConnUtil.closeConnection(connHATS);
        		
        	} catch(Exception e) {
                logger.info("[labScheduler] Cannot close connection");
                e.printStackTrace();
        	}
        }
	}
    
	public static boolean sendAlert(List<String> ehrLogNoList, String resMsg) {
		
		String site = ConstantsServerSide.SITE_CODE.toUpperCase();
        
        String emailFrom = "it-admin@hkah.org.hk";
        
        String emailToList = getParam("EHRLISERRM", "arran.siu@hkah.org.hk");
        			
    	String emailTo[] = emailToList.split(";");

    	emailTo = (String[]) ArrayUtils.removeElement(emailTo, "");
    		                       
        if (ConstantsServerSide.DEBUG) {
        	emailTo = new String[] {"arran.siu@hkah.org.hk"};
		}
        
        String subject = "[" + site + "] eHR LAAM: Data upload error (LIS)";

		String ehrLogNo = null;
		
        for (int i = 0; i < ehrLogNoList.size(); i++) {
        	
        	if (ehrLogNo == null) 
        		ehrLogNo = "EHR_LOG_NO: " + ehrLogNoList.get(i);
        	else
        		ehrLogNo = ehrLogNo + ", " + ehrLogNoList.get(i);
        	          			
        }
        
        String message = site + " eHR Data upload error. "  + "\n<br />"
        		+ "Result: " + resMsg + "\n<br />"
        		+ ehrLogNo;
        
        return UtilMail2.sendMail(emailFrom, emailTo, subject, message);
	}

}