package com.hkah.web.db;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFChart;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFPalette;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.FormulaEvaluator;

import com.hkah.config.MessageResources;
import com.hkah.constant.ConstantsServerSide;
import com.hkah.util.db.UtilDBWeb;
import com.hkah.util.mail.UtilMail;
import com.hkah.web.common.ReportableListObject;
import com.hkah.web.common.UserBean;

public class PiReportDB {
	private static String sqlStr_insertPIREPORT = null;
	private static String sqlStr_insertPIREPORT_INVOLVE_PERSON = null;
	private static String sqlStr_insertPIREPORT_FLWUP = null;
	private static String sqlStr_insertPIREPORT_FLWUP_REPLY = null;

	private static String sqlStr_insertPIREPORT_CONTENT = null;

	private static String sqlStr_fetchPIREPORT = null;
	private static String sqlStr_fetchPIREPORT_INVOLVE_PERSON = null;

	private static String sqlStr_fetchPIREPORT_list = null;
	private static String sqlStr_fetchPIREPORT_FLWUP = null;
	private static String sqlStr_fetchPIREPORT_FLW_REPLY = null;

	private static String sqlStr_fetchPIREPORT_CLASSISIFICATION = null;
	private static String sqlStr_fetchPIREPORT_INCIDENT_TYPE = null;
	private static String sqlStr_fetchPIREPORT_HEAD = null;
	private static String sqlStr_fetchPIREPORT_SUBHEAD = null;
	private static String sqlStr_fetchPIREPORT_DETAIL = null;
	private static String sqlStr_fetchPIREPORT_HEAD_view = null;
	private static String sqlStr_fetchPIREPORT_SUBHEAD_view = null;
	private static String sqlStr_fetchPIREPORT_DETAIL_view = null;
	private static String sqlStr_fetchPIREPORT_SUBDETAIL_view = null;
	private static String sqlStr_fetchPIREPORT_SUBDETAIL_edit = null;

	private static String sqlStr_updatePIREPORT = null;
	private static String sqlStr_updatePIREPORT_INVOLVE_PERSON = null;
	private static String sqlStr_updatePIREPORT_CONTENT = null;
	private static String sqlStr_updatePIREPORT_STATUS = null;
	private static String sqlStr_updatePIREPORT_ENABLE = null;
	private static String sqlStr_updatePIREPORT_FLWUP = null;
	private static String sqlStr_updatePIREPORT_FLWUP_REPLY = null;
	private static String sqlStr_deletePIREPORT_INVOLVE_PERSON = null;
	private static String sqlStr_deletePIREPORT_CONTENT = null;
	private static String sqlStr_deletePIREPORT_FLWUP = null;
	private static String sqlStr_deletePIREPORT_FLWUP_REPLY = null;

	private static String sqlStr_fetchPIREPORT_FLWUP_LIST = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_MESSAGE = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_ALLREPLY = null;

	// flwup dialog
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_BASIC_INFO = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_INVOLVE_PERSON = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_INCIDENT_REPORT_MST = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_INCIDENT_REPORT_DTL = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_CC_LIST = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_EMAIL_INFO = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_RESPONSE_PERSON_SAVEONLY = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_LATEST = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_CONTENT = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_ADDRPT = null;
	private static String sqlStr_insertPIREPORT_FLWUP_DIALOG = null;
	private static String sqlStr_insertPIREPORT_FLWUP_DIALOG_TO = null;
//	private static String sqlStr_updatePIREPORT_FLWUP_DIALOG = null;
//	private static String sqlStr_deletePIREPORT_FLWUP_DIALOG = null;
	private static String sqlStr_insertPIREPORT_FLWUP_DIALOG_ADDRPT = null;
	private static String sqlStr_fetchPIREPORT_FLWUP_DIALOG_ADDRPT_CONTENT = null;
	private static String sqlStr_fetchPIREPORT_DHEAD_COMMENT = null;
	private static String sqlStr_insertPIREPORT_DHEAD_COMMENT = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_DHEAD = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_OSHICN = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_ADMIN = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_PI = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_FLWUP = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_UMDM = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_OTHER = null;
	private static String sqlStr_updatePIREPORT_DHEAD_COMMENT2 = null;
	private static String sqlStr_fetchPIREPORT_PX_COMMENT = null;
	private static String sqlStr_insertPIREPORT_PX_COMMENT = null;
	private static String sqlStr_updatePIREPORT_PX_COMMENT = null;
//	private static String sqlStr_fetchPIREPORT_PI_COMMENT = null;
	private static String sqlStr_insertPIREPORT_PI_COMMENT = null;
//	private static String sqlStr_updatePIREPORT_PI_COMMENT = null;
	private static String sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG = null;
	private static String sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG_BYROW = null;
	private static String sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG_CONTENT = null;
	private static String sqlStr_fetchPIREPORT_REPORT_CREATE_PERSON = null;
	private static String sqlStr_updatePIREPORT_FLWUP_DIALOG_PIR_RES_PARTY2 = null;
	private static String sqlStr_updatePIREPORT_TRAFFIC_LIGHT = null;
	private static String sqlStr_updateDONREPORT_REMARK = null;
	private static String sqlStr_updateVPAREPORT_REMARK = null;
	private static String sqlStr_updatePIREPORT_UMDMREMARK = null;
	private static String sqlStr_updatePIREPORT_PI_ASS_INJURY = null;
	private static String sqlStr_insertPIREPORT_DHEAD_COMMENT_SAFE_BACKUP = null;
	//
	private static String sqlStr_fetchPIREPORT_excellist = null; // export excel
	private static String sqlStr_fetchPIREPORT_excelsummarylist = null; // export excel

	private static String sqlStr_insertREMINDER_LOG = null; // Reminder Log
		
	/***********************Get Auto-ID***********************/
	private static String getNextReportID() {
		String pirID = null;

		ArrayList result = UtilDBWeb.getReportableList("SELECT MAX(PIRID) + 1 FROM PI_REPORT");
		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			pirID = reportableListObject.getValue(0);

			// set 1 for initial
			if (pirID == null || pirID.length() == 0) return "1";
		}
		return pirID;
	}

	public static String getStaffDeptCode(String staffID) {
		String rtn = null;

		if (staffID == null) {
			return null;
		}
		else {
			ArrayList result = UtilDBWeb.getReportableList("select co_department_code, co_department_desc from co_staffs where co_staff_id = '" + staffID + "'");
			if (result.size() > 0) {
				ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
				rtn = reportableListObject.getValue(0);
				// set 1 for initial
				if (rtn == null || rtn.length() == 0) return "";
			}
			return rtn;
		}
	}

	public static String getRptDeptCode(String pirid) {
		String deptCode = null;

		if (pirid == null) {
			return null;
		}
		else {
			ArrayList result = UtilDBWeb.getReportableList("select PIR_DEPT_CODE_FLWUP from pi_report where pirid = '" + pirid + "'");
			if (result.size() > 0) {
				ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
				deptCode = reportableListObject.getValue(0);
				// set 1 for initial
				if (deptCode == null || deptCode.length() == 0) return "1";
			}
			return deptCode;
		}
	}

	// 29112017 for med parent desc
	public static String getParentDesc(String optionID) {
		String perantDesc = null;

		if (optionID == null) {
			return null;
		}
		else {
			ArrayList result = UtilDBWeb.getReportableList("select pi_option_desc || ' : ' from pi_report_option where pi_option_id = (select pi_disp_parent_id from pi_report_option where pi_option_id = " + optionID + ")");
			if (result.size() > 0) {
				ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
				perantDesc = reportableListObject.getValue(0);
				if (perantDesc == null || perantDesc.length() == 0) return "1";
			}
			return perantDesc;
		}
	}

	public static boolean hasParentDesc(String grpID) {

		if (grpID == null) {
			return false;
		}
		else {
			ArrayList result = UtilDBWeb.getReportableList("select pi_option_desc from pi_report_option where pi_grpid = " + grpID + " and pi_disp_parent_id is not null");
			if (result.size() > 0) {
				//ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
				return true;
			}
			return false;
		}
	}

	private static String getNextPersonID() {
		String personID = null;

		ArrayList result = UtilDBWeb.getReportableList("SELECT MAX(PIR_IP_ID) + 1 FROM PI_REPORT_INVOLVE_PERSON");
		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			personID = reportableListObject.getValue(0);

			// set 1 for initial
			if (personID == null || personID.length() == 0) return "1";
		}
		return personID;
	}

	private static String getNextContentID() {
		String contentID = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"SELECT MAX(PI_CONTENT_ID) + 1 FROM PI_REPORT_CONTENT ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			contentID = reportableListObject.getValue(0);

			// set 1 for initial
			if (contentID == null || contentID.length() == 0) return "1";
		}
		return contentID;
	}

	private static String getNextFlwupID() {
		String flwupID = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"SELECT MAX(FLWID) + 1 FROM PI_REPORT_FLWUP ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			flwupID = reportableListObject.getValue(0);

			// set 1 for initial
			if (flwupID == null || flwupID.length() == 0) return "1";
		}
		return flwupID;
	}

	private static String getNextMsgID() {
		String msgID = null;

		ArrayList result = UtilDBWeb.getReportableList(
								"SELECT MAX(MSGID) + 1 FROM PI_REPORT_MSG ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			msgID = reportableListObject.getValue(0);

			// set 1 for initial
			if (msgID == null || msgID.length() == 0) return "1";
		}
		return msgID;
	}

	private static String getNextFlwUpPersonID() {
		String flwPersonID = null;

		ArrayList result = UtilDBWeb.getReportableList(
								"SELECT MAX(FLW_PERSON_ID) + 1 FROM PI_REPORT_FLWUP_PERSON ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			flwPersonID = reportableListObject.getValue(0);

			// set 1 for initial
			if (flwPersonID == null || flwPersonID.length() == 0) return "1";
		}
		return flwPersonID;
	}

	private static String getCeoEmail() {
		String sql = null;
		String ceoEmail = null;

		sql = "select pir_email from pi_report_person_list where pir_type = 'ceo' and enable = '1'";

		ArrayList result = UtilDBWeb.getReportableList(sql);

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			ceoEmail = reportableListObject.getValue(0);
		}
		return ceoEmail;
	}

	private static String getCeoStaffID() {
		String sql = null;
		String ceoStaffID = null;

		sql = "select PIR_STAFF_ID from pi_report_person_list where pir_type = 'ceo' and enable = '1'";

		ArrayList result = UtilDBWeb.getReportableList(sql);

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			ceoStaffID = reportableListObject.getValue(0);
		}
		return ceoStaffID;
	}

	private static String getReportOthersCount(String incType, String grpID, String currYear, String last2Year) {
		String sql = null;
		String counter = "0";

		sql = " SELECT to_char(pir_incident_date, 'yyyy') year, count(1) ";
		sql += "FROM pi_report p ";
		sql += "WHERE pir_incident_date >= to_date('0101" + currYear + " 000001', 'ddmmyyyy hh24miss') ";
		sql += "AND pir_incident_date <= to_date('3112" + last2Year + " 235959', 'ddmmyyyy hh24miss') ";
		sql += "AND p.enable = 1 AND p.PIR_NEAR_MISS_PI = 0 ";
		if ("54".equals(incType)) {
			sql += "and p.pir_incident_type_pi in ('54') ";
		} else if ("56".equals(incType) && ("".equals(grpID))) {
			if (ConstantsServerSide.isTWAH()) {
				sql += "and p.pir_incident_type_pi in ('56', '120') ";
			} else {
				sql += "and p.pir_incident_type_pi in ('56') ";
			}
		} else if ("56".equals(incType)) {
			sql += "and p.pir_incident_type_pi in ('56') ";
			sql += "and exists (select pirid from pi_report_content pc where p.pirid = pc.pirid and pc.pi_grpid = '" + grpID + "') ";
		}
		sql += "group by to_char(pir_incident_date, 'yyyy') ";
		sql += "order by to_char(pir_incident_date, 'yyyy') ";

		if (ConstantsServerSide.isTWAH()) {
			if ("120".equals(incType)) {
				sql = "select to_char(inc_date, 'yyyy') year, count(1) from PI_RPT_TYPE ";
				sql += "where inc_type in ('120') ";
				sql += "and inc_date >= to_date('0101" + currYear + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "and inc_date <= to_date('3112" + last2Year + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "group by decode(inc_type, '120', 'bti'), to_char(inc_date, 'yyyy') ";
				sql += "order by year";
			}
		}

		ArrayList result = UtilDBWeb.getReportableList(sql);

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			counter = reportableListObject.getValue(1);
			if (counter == null || counter.length() == 0) return "0";
		}
		return counter;
	}

	private static Integer getACHSBedNum(String currYear) {
		String sql = null;
		Integer counter = 0;

		/*
		sql = " select round( sum( ( ";
		sql += "	case when i.inpddate > to_date( '31/12/" + currYear + "', 'dd/mm/yyyy' ) then to_date( '31/12/" + currYear + "', 'dd/mm/yyyy' ) ";
		sql += "	else i.inpddate end ) - r.regdate )) sum_days ";
		sql += "from reg@iweb r, inpat@iweb i ";
		sql += "where r.inpid = i.inpid and to_char(regdate, 'yyyy') in '" + currYear + "' ";
		*/
		// get data from ACHS table 27042018
		//sql = "select year, hk_bednum, tw_bednum from pi_report_achs_bednum where year = '" + currYear + "' ";
		sql = "select REPORT_YEAR, JAN, FEB, REMARK FROM pi_report_data WHERE REPORT_ID = 'achs_bednum' and report_year = '" + currYear + "' ";

		//

		ArrayList result = UtilDBWeb.getReportableList(sql);

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);

			if (ConstantsServerSide.isTWAH()) {
				counter = Integer.valueOf(reportableListObject.getValue(2));
			} else {
				counter = Integer.valueOf(reportableListObject.getValue(1));
			}

			if (counter == null) return 0;
		}
		return counter;
	}

	private static String getDBLink() {
		String dbLink = null;

		if (ConstantsServerSide.isTWAH()) {
			dbLink = "@HKAH";
		} else {
			dbLink = "@TWAH";
		}
		return dbLink;
	}

	private static Integer getACHSBedNumHKAH(String currYear) {
		String dbLink = "";
		String sql = null;
		Integer counter = 0;

		if (ConstantsServerSide.isTWAH()) {
			dbLink = getDBLink();
		} else {
			dbLink = "";
		}

		// get data from ACHS table 27042018
		sql = "select report_year, JAN, FEB, REMARK FROM pi_report_data WHERE REPORT_ID = 'achs_bednum' and report_year = '" + currYear + "' ";
		//

		ArrayList result = UtilDBWeb.getReportableList(sql);

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			counter = Integer.valueOf(reportableListObject.getValue(1));
			if (counter == null) return 0;
		}
		return counter;
	}

	private static Integer getACHSBedNumTWAH(String currYear) {
		String dbLink = "";

		if (ConstantsServerSide.isTWAH()) {
			dbLink = "";
		} else {
			dbLink = getDBLink();
		}

		String sql = null;
		Integer counter = 0;

		// get data from ACHS table 27042018
		sql = "select report_year, JAN, FEB, REMARK FROM pi_report_data WHERE REPORT_ID = 'achs_bednum' and report_year = '" + currYear + "' ";
		//

		ArrayList result = UtilDBWeb.getReportableList(sql);

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			counter = Integer.valueOf(reportableListObject.getValue(2));
			if (counter == null) return 0;
		}
		return counter;
	}

	/********************************************************/

	/**********************Report****************************/
	public static String add(UserBean userBean, String personName, String rank, String deptCode,
							String incident_date, String incident_time, String incident_place, String incident_type,
							String incident_classification,String relPirID, String incident_place_freetext, String InitailSubmitTo, String InitailSubmitTo2,
							String sentinelevent, String sentinelID, String InitailPxSubmitTo, String InitailPxSubmitTo2, String InitailPxNurse,
							String nearMiss, String hazardousCondition, String deptCodeFlwup, String InitailSubmitToFlwup) {

		String pirID = getNextReportID();

		if (addReport(userBean, pirID, personName, rank, deptCode, incident_date,
			incident_time, incident_place, incident_type, incident_classification, relPirID,incident_place_freetext,InitailSubmitTo, InitailSubmitTo2,
			sentinelevent, sentinelID,
			InitailPxSubmitTo, InitailPxSubmitTo2, InitailPxNurse, nearMiss, hazardousCondition, deptCodeFlwup, InitailSubmitToFlwup)) {
			return pirID;
		} else {
			return null;
		}
	}

	private static boolean addReport(UserBean userBean, String pirID, String personName,
								String rank, String deptCode, String incident_date,
								String incident_time, String incident_place, String incident_type,
								String incident_classification,String relPirID,String incident_place_freetext,
								String InitailSubmitTo, String InitailSubmitTo2, String sentinelevent, String sentinelID,
								String InitailPxSubmitTo, String InitailPxSubmitTo2, String InitailPxNurse, String nearMiss, String hazardousCondition,
								String deptCodeFlwup, String InitailSubmitToFlwup) {

		return UtilDBWeb.updateQueue(sqlStr_insertPIREPORT,
				new String[] {ConstantsServerSide.SITE_CODE, pirID, personName, rank, deptCode, ((incident_date == null)?"":incident_date), incident_time,
								incident_place, incident_type, incident_classification, userBean.getStaffID(), userBean.getStaffID(), relPirID, incident_place_freetext,
								InitailSubmitTo, InitailSubmitTo2, sentinelevent, sentinelID,
								InitailPxSubmitTo, InitailPxSubmitTo2, InitailPxNurse, nearMiss, nearMiss, hazardousCondition, hazardousCondition, incident_classification, incident_type, deptCodeFlwup, InitailSubmitToFlwup});
	}

	public static ArrayList fetchReportBasicInfo(String pirID) {
		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT,
				new String[] {pirID});
	}

	public static boolean updateReport(UserBean userBean, String pirID, String personName,
								String rank, String deptCode, String incident_date,
								String incident_time, String incident_place, String incident_type,
								String incident_classification,String relPirID,String incident_place_freetext,
								String InitailSubmitTo, String InitailSubmitTo2, String sentinelEvent, String sentinelID,
								String InitailPxSubmitTo, String InitailPxSubmitTo2, String InitailPxNurse,
								String nearMiss, String hazardousCondition, String deptCodeFlwup, String InitailSubmitToFlwup) {

		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT,
				new String[] {personName, rank, deptCode, incident_date, incident_time,
						incident_place, incident_type, incident_classification, userBean.getStaffID(), relPirID, incident_place_freetext,
						InitailSubmitTo, InitailSubmitTo2, sentinelEvent, sentinelID,
						InitailPxSubmitTo, InitailPxSubmitTo2, InitailPxNurse, nearMiss, hazardousCondition, incident_type, incident_classification,
						deptCodeFlwup, InitailSubmitToFlwup,
						pirID});
	}

	public static boolean updatePIReportStatus(UserBean userBean, String pirID, String status) {

		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_STATUS,
										new String[] {status, userBean.getStaffID(), pirID});
	}

	public static boolean updatePIReportEnable(UserBean userBean, String pirID, String enable) {

		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_ENABLE,
										new String[] {enable, userBean.getStaffID(), pirID});
	}

	public static ArrayList fetchReportClassification() {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_CLASSISIFICATION,
					new String[] {ConstantsServerSide.SITE_CODE, ConstantsServerSide.SITE_CODE});
	}

	public static ArrayList fetchIncidentType(String grpID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_INCIDENT_TYPE,
					new String[] {ConstantsServerSide.SITE_CODE, grpID});
	}

	public static ArrayList getGeneralModuleCode(String displayGeneral) {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.append("SELECT  PI_CATEGORY_DESC ");
		sqlStr.append("FROM    PI_REPORT_OPTION_GROUP ");
		sqlStr.append("WHERE   PI_GRPID = '"+displayGeneral+"' ");
		sqlStr.append("AND     PI_ENABLED = 1 ");
		sqlStr.append("AND     PI_SITE_CODE = '"+ConstantsServerSide.SITE_CODE+"' ");

		return UtilDBWeb.getReportableList(sqlStr.toString());
	}

	public static String getPIReportListStr(UserBean userBean, String Mode, String incident_date_from, String incident_date_to,
								String report_date_from, String report_date_to,
								String classification,
								String equip, String increlopr, String bloodtrans,
								String adr, String med, String patfall, String patgen,
								String bef, String stagen, String stafall, String secu, String vrofall,
								String vrogen, String wpv, String oth,
								String status, String nearmiss, String hazardousContition, String ceopend,
								String rejected, String cancelled, String pirID, String DeptCode, String StaffID) {

		StringBuffer sql = new StringBuffer();
		Boolean firstClass = false;

		if ("view".equals(Mode)) {
			sql.append(sqlStr_fetchPIREPORT_list);

			if ("1".equals(ceopend)) {
				sql.append(" join pi_report_flwup_dialog pf on p.pirid = pf.pirid and pf.enable = 1 and PIR_RES_PARTY = '" + getCeoStaffID() + "' ");
			}

			if ((rejected != null && rejected.length() > 0) || (cancelled != null && cancelled.length() > 0)) {
				sql.append("WHERE P.PIR_ENABLED = 0 ");
			} else {
				sql.append("WHERE P.PIR_ENABLED = 1 ");
			}
		} else if ("excel".equals(Mode) || "ceo".equals(Mode)) {
			sql.append(sqlStr_fetchPIREPORT_excellist);
		} else if ("excelSummary".equals(Mode)) {
			sql.append(sqlStr_fetchPIREPORT_excelsummarylist);
		}

		String tmpLoginID = null;
		boolean isPIManager = IsPIManager(StaffID);

		if (!isPIManager && !IsCooVpa(StaffID) && !userBean.isAdmin()) {
			sql.append("AND (");
			sql.append("P.PIR_ENABLED = -1 ");
			if (IsAdminStaff(StaffID)) {
				boolean isNurseAdminAssistence = false;
				if (isSNO(StaffID)) { // SNO - Bernadette
					isNurseAdminAssistence = true;
				} else {
					// search for nurse admin assistence
					String[] nurseAdminAssistence = getNurseAdminAssistence();
					if (nurseAdminAssistence != null && nurseAdminAssistence.length > 0) {
						for (int i = 0; !isNurseAdminAssistence && i < nurseAdminAssistence.length; i++) {
							if (nurseAdminAssistence[i].equals(StaffID)) {
								isNurseAdminAssistence = true;
							}
						}
					}
				}

				if (isNurseAdminAssistence) {
					tmpLoginID = getNurseAdmin();
				} else {
					tmpLoginID = userBean.getStaffID();
				}

				sql.append("OR P.PIR_DEPT_CODE_FLWUP IN (select CO_DEPARTMENT_CODE from co_departments where co_department_supervisor = '"+ tmpLoginID +"' or co_department_head = '" + tmpLoginID + "' or co_department_subhead = '" + tmpLoginID + "') ");
				if (IsNursingAdmin(tmpLoginID) || IsPharmacyAdmin(tmpLoginID)) {
					sql.append("OR pir_incident_class_pi in ('8', '530', '1') ");
				}
			}
			if (IsPharmacyStaff(StaffID) || IsPharmacyDepartmentHeadStaff(StaffID)) {
				sql.append("OR P.pir_incident_class_pi IN ('8', '530', '1002') ");
				//09039018 for inc type other than medication
				sql.append("OR p.pir_dept_code_flwup IN ('380', 'PHAR') ");
				//
				sql.append("OR P.PIR_CREATED_USER = '" + StaffID + "' or P.PIR_RESPONSIBLE_PARTY_FLWUP = '" + StaffID + "' or P.PIR_RESPONSIBLE_PARTY_FLWUP = '" + getMedicationReportDhead("") + "' ");
			}
			if (IsOshIcnStaff(StaffID)) {
				sql.append("OR P.pir_incident_class_pi IN ('2', '5', '7', '700') ");
				sql.append("OR exists (select pc2.pirid from PI_REPORT_CONTENT pc2 where p.pirid = pc2.pirid and pc2.pi_option_id = '1600') ");
				sql.append("OR (p.PIR_RESPONSIBLE_PARTY_FLWUP = '" + StaffID + "' or p.pir_responsible_party2 = '" + StaffID + "' ) ");
			}
			if (IsDeptHeadStaff(StaffID)) {
				sql.append("OR (P.PIR_RESPONSIBLE_PARTY_FLWUP = '" + StaffID + "' or P.PIR_RESPONSIBLE_PARTY2 = '" + StaffID + "' or prfd.PIR_RES_PARTY = '" + StaffID + "') ");
				sql.append("OR P.PIR_DEPT_CODE IN (select CO_DEPARTMENT_CODE from co_departments where co_department_head = '" + StaffID + "') ");
			}
			if (IsDutyMgr(StaffID)) {
				sql.append("OR P.pir_responsible_party2 = '" + userBean.getStaffID() + "' ");
			}
			if (IsNormalStaff(StaffID)) {
				sql.append("OR (P.PIR_CREATED_USER = '" + userBean.getLoginID() + "' OR P.PIR_CREATED_USER = '" + userBean.getStaffID() + "' OR prfd.PIR_RES_PARTY = '" + userBean.getStaffID() + "' OR prfd.PIR_RES_PARTY2 = '" + userBean.getStaffID() + "' OR P.PIR_INCIDENT_CLASS_PI IN (");
				sql.append("SELECT PIR_INCIDENT_CLASS_PI FROM PI_PERSON_2_INCIDENT_CLASS WHERE PIR_SITE_CODE = '" + ConstantsServerSide.SITE_CODE + "' AND PIR_STAFF_ID = '" + userBean.getStaffID() + "' and PIR_ENABLE = '1'");
				sql.append(")) ");
			}
			if (IsOshStaff(StaffID)) {	// osh staff can view other osh staff's case
				sql.append("OR P.PIR_CREATED_USER in (select pir_staff_id from pi_report_person_list where pir_type in ('osh') and enable = 1) OR prfd.PIR_RES_PARTY in (select pir_staff_id from pi_report_person_list where pir_type in ('osh') and enable = 1) OR prfd.PIR_RES_PARTY2 in (select pir_staff_id from pi_report_person_list where pir_type in ('osh') and enable = 1)");
			}
			if (userBean.isAccessible("function.irsview.all")) {	// view all IRS
				sql.append("OR 1=1 ");
			}
			
			sql.append("OR (P.PIRID IN (");
			sql.append("SELECT PIRID FROM PI_PERSON_2_INCIDENT_CLASS WHERE PIR_SITE_CODE = '" + ConstantsServerSide.SITE_CODE + "' AND PIR_STAFF_ID = '" + userBean.getStaffID() + "' AND PIR_INCIDENT_CLASS_PI = 'view_pi' and PIR_ENABLE = '1'");
			sql.append(")) ");
			
			sql.append(") ");
		}

		//
		if ("ceo".equals(Mode)) {
			sql.append("AND P.PIR_CREATED_DATE >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
			sql.append("AND P.PIR_CREATED_DATE <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
			sql.append("and P.PIR_NEAR_MISS_PI = 0 ");
		} else {
			if (incident_date_from != null && incident_date_from.length() > 0) {
				sql.append("AND P.PIR_INCIDENT_DATE >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
			}
			if (incident_date_to != null && incident_date_to.length() > 0) {
				sql.append("AND P.PIR_INCIDENT_DATE <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
			}
			if (report_date_from != null && report_date_from.length() > 0) {
				sql.append("AND P.PIR_CREATED_DATE >= TO_DATE('" + report_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
			}
			if (report_date_to != null && report_date_to.length() > 0) {
				sql.append("AND P.PIR_CREATED_DATE <= TO_DATE('" + report_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
			}
		}
		if (classification != null && classification.length() > 0) {  //twah dropdown search
			sql.append("AND P.pir_incident_class_pi = '" + classification + "' ");
		}
		// hkah checkbox search
		firstClass = false;
		if (equip != null && equip.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + equip + "' ");
		}
		if (increlopr != null && increlopr.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + increlopr + "' ");
		}
		if (bloodtrans != null && bloodtrans.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + bloodtrans + "' ");
		}
		if (adr != null && adr.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + adr + "' ");
		}
		if (med != null && med.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + med + "' ");
		}
		if (patfall != null && patfall.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + patfall + "' ");
		}
		if (patgen != null && patgen.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + patgen + "' ");
		}
		if (bef != null && bef.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + bef + "' ");
		}

		if (stagen != null && stagen.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			if (ConstantsServerSide.isTWAH()) {
				sql.append("P.pirid in (  SELECT p.pirid FROM pi_report p JOIN pi_report_content pc ON p.pirid = pc.pirid ");
				sql.append("WHERE pc.pi_option_id       = '662' ");
				sql.append("AND pc.pi_value             = 'checked' ");
				sql.append("AND p.PIR_ENABLED                = 1 ");
				sql.append("AND P.pir_incident_type_pi IN ('33') ");
				if (incident_date_from != null && incident_date_from.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (incident_date_to != null && incident_date_to.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_from != null && report_date_from.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE >= TO_DATE('" + report_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_to != null && report_date_to.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE <= TO_DATE('" + report_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				sql.append(") ");
				sql.append("OR p.pirid in (");
				sql.append("SELECT p.pirid  FROM pi_report p WHERE p.pirid NOT IN ( ");
				sql.append("SELECT p2.pirid FROM pi_report p2 JOIN pi_report_content pc ON p2.pirid = pc.pirid ");
				sql.append("WHERE (pc.pi_option_id = '661' OR pc.pi_option_id = '662') AND pc.pi_value = 'checked' )");
				sql.append("AND p.PIR_ENABLED = 1 ");
				sql.append("AND P.pir_incident_type_pi IN ('33') ");
				if (incident_date_from != null && incident_date_from.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (incident_date_to != null && incident_date_to.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_from != null && report_date_from.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE >= TO_DATE('" + report_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_to != null && report_date_to.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE <= TO_DATE('" + report_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				sql.append(") ");
			} else {
				sql.append("P.pir_incident_class_pi = '" + stagen + "' ");
			}
		}

		if (stafall != null && stafall.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			if (ConstantsServerSide.isTWAH()) {
				sql.append("P.pirid in (  SELECT p.pirid FROM pi_report p JOIN pi_report_content pc ON p.pirid = pc.pirid ");
				sql.append("WHERE pc.pi_option_id       = '661' ");
				sql.append("AND pc.pi_value             = 'checked' ");
				sql.append("AND p.PIR_ENABLED                = 1 ");
				sql.append("AND P.pir_incident_type_pi IN ('33') ");
				if (incident_date_from != null && incident_date_from.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (incident_date_to != null && incident_date_to.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_from != null && report_date_from.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE >= TO_DATE('" + report_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_to != null && report_date_to.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE <= TO_DATE('" + report_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				sql.append(") ");
			} else {
				sql.append("P.pir_incident_class_pi = '" + stafall + "' ");
			}
		}

		if (secu != null && secu.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi = '" + secu + "' ");
		}

		if (vrofall != null && vrofall.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			if (ConstantsServerSide.isTWAH()) {
				sql.append("P.PIRID IN ( SELECT p.pirid FROM pi_report p JOIN pi_report_content pc ON p.pirid = pc.pirid ");
				sql.append("				WHERE pc.pi_option_id       = '1599'	");
				sql.append("        				AND pc.pi_value             = 'checked'	");
				sql.append("                		AND p.PIR_ENABLED               = 1	");
				sql.append("				        AND P.pir_incident_type_pi IN ('50') ");
				if (incident_date_from != null && incident_date_from.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (incident_date_to != null && incident_date_to.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_from != null && report_date_from.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE >= TO_DATE('" + report_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_to != null && report_date_to.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE <= TO_DATE('" + report_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				sql.append(") ");
			} else {
				sql.append("P.pir_incident_class_pi = '" + vrofall + "' ");
			}
		}

		if (vrogen != null && vrogen.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			if (ConstantsServerSide.isTWAH()) {
				sql.append("P.PIRID IN (SELECT p.pirid FROM pi_report p WHERE p.pirid NOT IN (SELECT p2.pirid FROM pi_report p2 JOIN pi_report_content pc ON p2.pirid = pc.pirid ");
				sql.append(" 					WHERE pc.pi_option_id = '1599' ");
				sql.append(" 							AND pc.pi_value       = 'checked' ");
				sql.append(" ) ");
				sql.append(" AND p.PIR_ENABLED               = 1 ");
				sql.append(" AND P.pir_incident_type_pi IN ('50') ");
				if (incident_date_from != null && incident_date_from.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (incident_date_to != null && incident_date_to.length() > 0) {
					sql.append("AND P.PIR_INCIDENT_DATE <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_from != null && report_date_from.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE >= TO_DATE('" + report_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				if (report_date_to != null && report_date_to.length() > 0) {
					sql.append("AND P.PIR_CREATED_DATE <= TO_DATE('" + report_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
				}
				sql.append(") ");
			} else {
				sql.append("P.pir_incident_class_pi = '" + vrogen + "' ");
			}
		}
		
		if (wpv != null && wpv.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi in ('" + wpv + "') ");	// SR only: workplace violence
		}
		

		if (oth != null && oth.length() > 0) {
			if (firstClass == false) {
				firstClass = true;
				sql.append("AND ( ");
			} else {
				sql.append(" OR ");
			}
			sql.append("P.pir_incident_class_pi in ('" + oth + "', '1013') ");
		}

		if (firstClass == true) {
			sql.append(") ");
		}
		//
		if (status != null && status.length() > 0) {
			if ("99".equals(status)) {
				sql.append("AND P.PIR_STATUS not in ('5') ");
			} else if (IsPharmacyStaff(StaffID) && "1".equals(status)) {
				sql.append("AND P.PIR_STATUS  in ('1', '8') ");
			} else {
				sql.append("AND P.PIR_STATUS = '" + status + "' ");
			}
		}

		if (nearmiss != null && nearmiss.length() > 0) {
			sql.append("AND P.PIR_NEAR_MISS_PI = '" + nearmiss + "' ");
		}

		if (hazardousContition != null && hazardousContition.length() > 0) {
			sql.append("AND P.PIR_HAZARDOUS_CONDITION_PI = '" + hazardousContition + "' ");
		}

		if (pirID != null && pirID.length() > 0) {
			sql.append("AND P.PIRID = '" + pirID + "' ");
		}

		if (ceopend != null && ceopend.length() > 0) {
			sql.append("AND p.pir_status = '2' ");
		}

		if (rejected != null && rejected.length() > 0) {
			sql.append("AND (p.pir_status = '6' and p.pir_enabled = '0') ");
		}

		if (cancelled != null && cancelled.length() > 0) {
			sql.append("AND p.pir_enabled = '0' ");
		}

		if ("excelSummary".equals(Mode)) {
			sql.append("GROUP BY PO.PI_OPTION_DESC ");
			sql.append("ORDER BY PO.PI_OPTION_DESC ");
		} else if ("excel".equals(Mode) || "ceo".equals(Mode)) {
			sql.append("ORDER BY P.PIRID ");
		} else {
			sql.append("ORDER BY P.PIRID DESC ");
		}
		
		 System.out.println("[PiReportDB] getPIReportListStr sql="+sql.toString());
		return sql.toString();
	}

	public static ArrayList getPIReportList(UserBean userBean, String Mode, String incident_date_from, String incident_date_to,
			String report_date_from, String report_date_to,
			String classification,
			String equip, String increlopr, String bloodtrans, 
			String adr, String med, String patfall, String patgen,
			String bef, String stagen, String stafall, String secu, String vrofall,
			String vrogen, String wpv, String oth,
			String status, String nearmiss, String hazardousContition, String ceopend, String rejected, String cancelled, String pirID, String DeptCode, String StaffID) {

		return UtilDBWeb.getReportableList(getPIReportListStr(userBean, Mode, incident_date_from, incident_date_to,
				report_date_from, report_date_to,
				classification,
				equip, increlopr, bloodtrans,
				adr, med, patfall, patgen,
				bef, stagen, stafall, secu, vrofall,
				vrogen, wpv, oth,
				status, nearmiss, hazardousContition, ceopend, rejected, cancelled, pirID, DeptCode, StaffID));
	}

	/********************************************************/

	/***********************PI Location List***************************/
	public static ArrayList getPILocationList(String type) {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.append("SELECT    PI_PROP_TYPE, PI_PROP_VALUE, PI_FREETEXT ");
		sqlStr.append("FROM      PI_REPORT_PROPERTIES ");
		sqlStr.append("WHERE     PI_ENABLED = 1 ");
		sqlStr.append("AND       PI_PROP_TYPE = ? ");
		sqlStr.append("AND       PI_SITE_CODE = ? ");
		sqlStr.append("ORDER BY  PI_ORDER ");

		return UtilDBWeb.getReportableList(sqlStr.toString(), new String[] { type, ConstantsServerSide.SITE_CODE });
	}
	/*************************************************************/

	/***********************Report List***************************/
	public static ArrayList getReportList() {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.append("select PIRID from PI_REPORT ");
		sqlStr.append("where enable = 1 ");
		sqlStr.append("AND   PIR_SITE_CODE = '"+ConstantsServerSide.SITE_CODE+"' ");
		sqlStr.append("ORDER BY PIRID ");

		return UtilDBWeb.getReportableList(sqlStr.toString());
	}
	/*************************************************************/

	/***********************Involving Person**********************/
	public static boolean addInvolvePatient(UserBean userBean, String pirID, String patNo,
							String personName, String sex, String age, String DOB,
							String attPhysician, String diagnosis) {

		return addInvolvePerson(userBean, pirID, "1", "0", "0", "0", patNo, null, personName,
							sex, age, ((DOB == null)?"":DOB), null, null, null, null, null,
							null, null, null, attPhysician, diagnosis, null, null);
	}

	public static boolean addInvolveStaff(UserBean userBean, String pirID, String sameReportPerson,
							String staffId, String patNo, String personName, String rank,
							String deptCode, String sex) {
		return addInvolvePerson(userBean, pirID, "0", "1", "0", "0", patNo, staffId, personName,
					sex, null, "", rank, deptCode, null, sameReportPerson, null, null, null,
					null, null, null, null, null);
	}

	public static boolean addInvolveVisitorOrRelatives(UserBean userBean, String pirID,
							String isVistorOrRelativesOfPat, String patNo,
							String isVistorOrRelativesOfStaff, String staffId, String personName,
							String relationship, String remark, String Tel, String Addr) {
		return addInvolvePerson(userBean, pirID, "0", "0", "1", "0", patNo, staffId, personName,
					null, null, "", null, null, remark, null, relationship,
					isVistorOrRelativesOfPat, isVistorOrRelativesOfStaff, null,
					null, null, Tel, Addr );
	}

	public static boolean addInvolveOther(UserBean userBean, String pirID, String personStatus,
							String personName, String remark, String Tel, String Addr) {
		return addInvolvePerson(userBean, pirID, "0", "0", "0", "1", null, null, personName,
					null, null, "", null, null, remark, null, null, null, null, personStatus,
					null, null, Tel, Addr);
	}

	private static boolean addInvolvePerson(UserBean userBean, String pirID, String isPatient,
						String isStaff, String isVistorOrRelative, String isOther, String patNo,
						String staffId, String personName, String sex, String age, String DOB,
						String rank, String deptCode, String remark, String sameReportPerson,
						String relationship, String isVistorOrRelativesOfPat,
						String isVistorOrRelativesOfStaff, String personStatus,
						String attPhysician, String diagnosis, String Tel, String Addr) {

		return UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_INVOLVE_PERSON,
				new String[] {pirID, getNextPersonID(), isPatient, isStaff, isVistorOrRelative,
								isOther, patNo, staffId, personName, sex, age, DOB, rank,
								deptCode, remark, sameReportPerson, relationship,
								isVistorOrRelativesOfPat, isVistorOrRelativesOfStaff,
								personStatus, attPhysician, diagnosis, Tel, Addr, userBean.getStaffID(),
								userBean.getStaffID()});
	}

	public static ArrayList fetchReportInvlovePerson(String pirID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_INVOLVE_PERSON,
				new String[] {pirID});
	}

	private static boolean updateInvolvePerson(UserBean userBean, String pirID, String pirIpID,
								String patNo, String staffId, String personName,
								String sex, String age, String DOB, String rank, String deptCode,
								String remark, String sameReportPerson, String relationship,
								String isVistorOrRelativesOfPat, String isVistorOrRelativesOfStaff,
								String personStatus, String attPhysician, String diagnosis, String Tel, String Addr) {

		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_INVOLVE_PERSON,
				new String[] {patNo, staffId, personName, sex, age, DOB, rank, deptCode,
					remark, sameReportPerson, relationship, isVistorOrRelativesOfPat,
					isVistorOrRelativesOfStaff, personStatus, userBean.getStaffID(),
					attPhysician, diagnosis, Tel, Addr, pirID, pirIpID});
	}

	public static boolean updateInvolvePatient(UserBean userBean, String pirID, String pirIpID, String patNo,
									String personName, String sex, String age, String DOB, String attPhysician,
									String diagnosis) {

		return updateInvolvePerson(userBean, pirID, pirIpID, patNo, null, personName, sex, age,
		((DOB==null)?"":DOB), null, null, null, null, null, null, null, null,
		attPhysician, diagnosis, null, null);
	}

	public static boolean updateInvolveStaff(UserBean userBean, String pirID, String pirIpID,
								String sameReportPerson, String staffId, String patNo,
								String personName, String rank, String deptCode, String sex) {

		return updateInvolvePerson(userBean, pirID, pirIpID, patNo, staffId, personName, sex, null,
			"", rank, deptCode, null, sameReportPerson, null, null, null, null, null, null, null, null);
	}

	public static boolean updateInvolveVisitorOrRelatives(UserBean userBean, String pirID, String pirIpID,
							String isVistorOrRelativesOfPat, String patNo,
							String isVistorOrRelativesOfStaff, String staffId, String personName,
							String relationship, String remark, String Tel, String Addr) {

		return updateInvolvePerson(userBean, pirID, pirIpID, patNo, staffId, personName, null, null,
					"", null, null, remark, null, relationship, isVistorOrRelativesOfPat,
					isVistorOrRelativesOfStaff, null, null, null, Tel, Addr);
	}

	public static boolean updateInvolveOther(UserBean userBean, String pirID, String pirIpID,
							String personStatus, String personName, String remark, String Tel, String Addr) {

		return updateInvolvePerson(userBean, pirID, pirIpID, null, null, personName, null,
					null, "", null, null, remark, null, null, null, null, personStatus, null, null, Tel, Addr);
	}

	public static boolean deleteInvolvePerson(UserBean userBean, String pirID, String pirIpID) {
		if (pirIpID != null) {
			String sqlStr = sqlStr_deletePIREPORT_INVOLVE_PERSON + "AND PIR_IP_ID = ? ";

			return UtilDBWeb.updateQueue(sqlStr,
						new String[] {userBean.getStaffID(), pirID, pirIpID});
		}
		else {
			return UtilDBWeb.updateQueue(sqlStr_deletePIREPORT_INVOLVE_PERSON,
					new String[] {userBean.getStaffID(), pirID});
		}
	}
	/************************************************************/

	/****************************Report Content*************************/
	public static boolean addReportContent(UserBean userBean, String pirID,
			String optID, String value, String contentGrpID, String grpID) {

		return UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_CONTENT,
				new String[] {ConstantsServerSide.SITE_CODE, pirID, contentGrpID, grpID,
						getNextContentID(), optID, value, userBean.getStaffID(), userBean.getStaffID()});
	}

	public static ArrayList fetchReportHeading(String moduleCode, String pirID,
									boolean edit) {
		if (pirID != null && !edit) {
			return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_HEAD_view,
					new String[] {ConstantsServerSide.SITE_CODE, moduleCode, pirID});
		}
		else {
			return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_HEAD,
					new String[] {ConstantsServerSide.SITE_CODE, moduleCode});
		}
	}

	public static ArrayList fetchReportHeading2(String moduleCode, String pirID,
			boolean edit, String displayGeneral) {
		if (pirID != null && !edit) {
			StringBuffer sqlStr = new StringBuffer();

			sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC, PI_MODULE_CODE ");
			sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
			sqlStr.append("WHERE PI_PARENT_GRPID IS NULL ");
			sqlStr.append("AND PI_ENABLED = 1 ");
			sqlStr.append("AND PI_SITE_CODE = ? ");
			sqlStr.append("AND (PI_MODULE_CODE = ? ");
			if (displayGeneral != null && !displayGeneral.equals("0")) {
				sqlStr.append("      OR PI_MODULE_CODE = (SELECT PI_CATEGORY_DESC ");
				sqlStr.append("                           from PI_REPORT_OPTION_GROUP ");
				sqlStr.append("                           WHERE PI_ENABLED = 1 ");
				sqlStr.append("                           AND   PI_GRPID = '"+displayGeneral+"') ");
			}
			sqlStr.append(") ");
			sqlStr.append("AND ((PI_GRP_TYPE = 'category' ");
			sqlStr.append("AND PI_GRPID in ( ");
			sqlStr.append("                  SELECT DISTINCT PI_GRPID ");
			sqlStr.append("                  FROM PI_REPORT_CONTENT ");
			sqlStr.append("                  WHERE PIRID = ? ");
			sqlStr.append("                  AND ENABLE = 1)) ");
			sqlStr.append("OR PI_GRP_TYPE = 'group') ");
			sqlStr.append("ORDER BY PI_ORDER ");

			return UtilDBWeb.getReportableList(sqlStr.toString(),
				new String[] {ConstantsServerSide.SITE_CODE, moduleCode, pirID});
		}
		else {
			StringBuffer sqlStr = new StringBuffer();

			sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC, PI_MODULE_CODE ");
			sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
			sqlStr.append("WHERE PI_PARENT_GRPID IS NULL ");
			sqlStr.append("AND PI_ENABLED = 1 ");
			sqlStr.append("AND PI_SITE_CODE = ? ");
			sqlStr.append("AND (PI_MODULE_CODE = ? ");
			if (displayGeneral != null && !displayGeneral.equals("0")) {
				sqlStr.append("      OR PI_MODULE_CODE = (SELECT PI_CATEGORY_DESC ");
				sqlStr.append("                           from PI_REPORT_OPTION_GROUP ");
				sqlStr.append("                           WHERE PI_ENABLED = 1 ");
				sqlStr.append("                           AND   PI_GRPID = '"+displayGeneral+"') ");
			}
			sqlStr.append(") ");
			sqlStr.append("AND (PI_GRP_TYPE = 'category' OR PI_GRP_TYPE = 'group') ");
			sqlStr.append("ORDER BY PI_ORDER ");

			return UtilDBWeb.getReportableList(sqlStr.toString(),
				new String[] {ConstantsServerSide.SITE_CODE, moduleCode});
		}
	}

	public static ArrayList fetchReportSubHeading(String moduleCode, String parentID, String pirID,
								boolean edit) {
		if (pirID != null && !edit) {
			return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBHEAD_view,
					new String[] {parentID, ConstantsServerSide.SITE_CODE, moduleCode, pirID});
		}
		else {
			return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBHEAD,
					new String[] {parentID, ConstantsServerSide.SITE_CODE, moduleCode});
		}
	}

	public static ArrayList fetchReportSubHeading2(String moduleCode,
			String parentID, String pirID, boolean edit, boolean isGeneralModule) {
		if (pirID != null && !edit) {
			StringBuffer sqlStr = new StringBuffer();

			if (isGeneralModule) {
				sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC ");
				sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
				sqlStr.append("WHERE PI_PARENT_GRPID = '"+parentID+"' ");
				sqlStr.append("AND PI_ENABLED = 1 ");
				sqlStr.append("AND PI_SITE_CODE = '"+ConstantsServerSide.SITE_CODE+"' ");
				sqlStr.append("AND PI_MODULE_CODE = '"+moduleCode+"' ");
				sqlStr.append("AND PI_GRP_TYPE = 'category' ");
				sqlStr.append("AND PI_GRPID in ( ");
				sqlStr.append("                  SELECT DISTINCT PI_GRPID ");
				sqlStr.append("                  FROM PI_REPORT_CONTENT ");
				sqlStr.append("                  WHERE PIRID = '"+pirID+"' ");
				sqlStr.append("                  AND ENABLE = 1) ");
				sqlStr.append("ORDER BY PI_ORDER ");
			} else {
				sqlStr.append("select    P.PI_GRPID, P.PI_GRP_TYPE, P.PI_GRP_DESC, P.PI_CATEGORY_DESC ");
				sqlStr.append("from      PI_REPORT_OPTION_GROUP P, PI_REPORT_OPTION_GROUP_SEL PS ");
				sqlStr.append("where     P.PI_GRPID = PS.PI_SELECT_GRPID ");
				sqlStr.append("and       PS.PI_PARENT_GRPID = '"+parentID+"' ");
				sqlStr.append("and       P.PI_ENABLED = 1 ");
				sqlStr.append("and       PS.PI_ENABLED = 1 ");
				sqlStr.append("and       P.PI_SITE_CODE = '"+ConstantsServerSide.SITE_CODE+"' ");
				sqlStr.append("AND 		 PS.PI_SELECT_GRPID in ( ");
				sqlStr.append("									SELECT DISTINCT PI_GRPID ");
				sqlStr.append("									FROM PI_REPORT_CONTENT ");
				sqlStr.append("									where PIRID = '"+pirID+"' ");
				sqlStr.append("AND 								ENABLE = 1) ");
				sqlStr.append("ORDER BY  P.PI_ORDER ");
			}

			return UtilDBWeb.getReportableList(sqlStr.toString());
		} else {
			StringBuffer sqlStr = new StringBuffer();

			if (isGeneralModule) {
				sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC ");
				sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
				sqlStr.append("WHERE PI_PARENT_GRPID = '"+parentID+"' ");
				sqlStr.append("AND PI_ENABLED = 1 ");
				sqlStr.append("AND PI_SITE_CODE = '"+ConstantsServerSide.SITE_CODE+"' ");
				sqlStr.append("AND PI_MODULE_CODE = '"+moduleCode+"' ");
				sqlStr.append("AND PI_GRP_TYPE = 'category' ");
				sqlStr.append("ORDER BY PI_ORDER ");
			} else {
				sqlStr.append("select    P.PI_GRPID, P.PI_GRP_TYPE, P.PI_GRP_DESC, P.PI_CATEGORY_DESC ");
				sqlStr.append("from      PI_REPORT_OPTION_GROUP P, PI_REPORT_OPTION_GROUP_SEL PS ");
				sqlStr.append("where     P.PI_GRPID = PS.PI_SELECT_GRPID ");
				sqlStr.append("and       PS.PI_PARENT_GRPID = '"+parentID+"' ");
				sqlStr.append("and       P.PI_ENABLED = 1 ");
				sqlStr.append("and       PS.PI_ENABLED = 1 ");
				sqlStr.append("and       P.PI_SITE_CODE = '"+ConstantsServerSide.SITE_CODE+"' ");
				sqlStr.append("ORDER BY  P.PI_ORDER ");
			}

			return UtilDBWeb.getReportableList(sqlStr.toString());
		}
	}
/*
	public static ArrayList fetchReportDetail(String grpID, String parentID, String pirID, boolean edit) {
		if (pirID != null && pirID.length() > 0) {
			if (parentID != null && parentID.length() > 0) {
				if (edit) {
					StringBuffer sql = new StringBuffer();
					sql.append("SELECT DISTINCT PI_CONTENT_GRPID ");
					sql.append("FROM PI_REPORT_CONTENT ");
					sql.append("WHERE  PIRID = ? ");
					sql.append("AND   (PI_GRPID = ? ");
					sql.append("OR     PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
					sql.append("AND   ENABLE = 1 ");
					sql.append("ORDER BY PI_CONTENT_GRPID ");

					ArrayList record = UtilDBWeb.getReportableList(sql.toString(), new String[] { pirID, grpID, grpID });
					ArrayList result = new ArrayList();
					ReportableListObject excelRow = null;
					if (record.size() > 0) {
						for (int i = 0; i < record.size(); i++) {
							excelRow = (ReportableListObject) record.get(i);
							result.addAll(UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBDETAIL_edit,
									new String[] {grpID, grpID, pirID, excelRow.getValue(0), parentID, excelRow.getValue(0),
											grpID, grpID, pirID, excelRow.getValue(0), parentID}));							
						}
					}
					else {
						result = UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBDETAIL_view,
									new String[] {grpID, grpID, pirID, parentID, grpID, grpID, pirID, parentID});						
					}
					return result;
				} else {
					return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBDETAIL_view,
							new String[] {grpID, grpID, pirID, parentID, grpID, grpID, pirID, parentID});					
				}
			}
			else {
				return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_DETAIL_view,
						new String[] {grpID, grpID, pirID, grpID, grpID, pirID});
			}
		}
		else {
			if (parentID != null && parentID.length() > 0) {
				return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_DETAIL + "AND PI_PARENT_ID = ? ORDER BY PI_ORDER ",
						new String[] {grpID, grpID, parentID});
			}
			else {
				return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_DETAIL + "AND PI_PARENT_ID IS NULL ORDER BY PI_ORDER ",
						new String[] {grpID, grpID});
			}
		}
	}
*/
	public static ArrayList fetchReportDetail(String grpID, String parentID, String pirID, boolean edit) {
		return fetchReportDetail(grpID, parentID, pirID, edit, "PI_VALUE");
	}
	
	public static ArrayList fetchReportDetail(String grpID, String parentID, String pirID, boolean edit, String dataCol) {

		String suffix = "";
		
		if (pirID != null && pirID.length() > 0) {
			if (parentID != null && parentID.length() > 0) {
				if (edit) {
					StringBuffer sql = new StringBuffer();
					sql.append("SELECT DISTINCT PI_CONTENT_GRPID ");
					sql.append("FROM PI_REPORT_CONTENT ");
					sql.append("WHERE  PIRID = ? ");
					sql.append("AND   (PI_GRPID = ? ");
					sql.append("OR     PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
					sql.append("AND   ENABLE = 1 ");
					sql.append("ORDER BY PI_CONTENT_GRPID ");

					ArrayList record = UtilDBWeb.getReportableList(sql.toString(), new String[] { pirID, grpID, grpID });
					ArrayList result = new ArrayList();
					ReportableListObject excelRow = null;
					if (record.size() > 0) {
						for (int i = 0; i < record.size(); i++) {
							excelRow = (ReportableListObject) record.get(i);
							System.out.println("[ARRAN DEBUG] sqlStr_fetchPIREPORT_SUBDETAIL_edit2: " + sqlStr_fetchPIREPORT_SUBDETAIL_edit2(suffix, dataCol));							
							result.addAll(UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBDETAIL_edit2(suffix, dataCol),
									new String[] {grpID, grpID, pirID, excelRow.getValue(0), parentID, excelRow.getValue(0),
											grpID, grpID, pirID, excelRow.getValue(0), parentID}));							
						}
					}
					else {
						System.out.println("[ARRAN DEBUG] sqlStr_fetchPIREPORT_SUBDETAIL_view2: " + sqlStr_fetchPIREPORT_SUBDETAIL_view2(suffix, dataCol));
						System.out.println("[ARRAN DEBUG] grpID=" + grpID + " grpID=" + grpID + " pirID=" + pirID + " parentID=" + parentID + 
								" grpID=" + grpID + " grpID=" + grpID + " pirID=" + pirID + " parentID=" + parentID);
						result = UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBDETAIL_view2(suffix, dataCol),
									new String[] {grpID, grpID, pirID, parentID, grpID, grpID, pirID, parentID});
					}
					return result;
				} else {
					System.out.println("[ARRAN DEBUG] sqlStr_fetchPIREPORT_SUBDETAIL_view2: " + sqlStr_fetchPIREPORT_SUBDETAIL_view2(suffix, dataCol));
					System.out.println("[ARRAN DEBUG] grpID=" + grpID + " grpID=" + grpID + " pirID=" + pirID + " parentID=" + parentID + 
							" grpID=" + grpID + " grpID=" + grpID + " pirID=" + pirID + " parentID=" + parentID);
					return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBDETAIL_view2(suffix, dataCol),
							new String[] {grpID, grpID, pirID, parentID, grpID, grpID, pirID, parentID});					
				}
			}
			else {
				System.out.println("[ARRAN DEBUG] sqlStr_fetchPIREPORT_DETAIL_view2: " + sqlStr_fetchPIREPORT_DETAIL_view2(suffix, dataCol));
				return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_DETAIL_view2(suffix, dataCol),
						new String[] {grpID, grpID, pirID, grpID, grpID, pirID});
			}
		}
		else {
			if (parentID != null && parentID.length() > 0) {
				System.out.println("[ARRAN DEBUG] sqlStr_fetchPIREPORT_DETAIL2: " + sqlStr_fetchPIREPORT_DETAIL2(suffix));
				return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_DETAIL2(suffix) + "AND PI_PARENT_ID = ? ORDER BY PI_ORDER ",
						new String[] {grpID, grpID, parentID});
			}
			else {
				System.out.println("[ARRAN DEBUG] sqlStr_fetchPIREPORT_DETAIL2: " + sqlStr_fetchPIREPORT_DETAIL2(suffix));
				return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_DETAIL2(suffix) + "AND PI_PARENT_ID IS NULL ORDER BY PI_ORDER ",
						new String[] {grpID, grpID});
			}
		}
	}

	
	public static boolean updateReportContent(UserBean userBean, String pirID, String contentID,
								String value) {

		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_CONTENT,
					new String[] {value, userBean.getStaffID(), pirID, contentID});
	}

	public static boolean deleteReportContent(UserBean userBean, String pirID) {
		StringBuffer sqlStr = new StringBuffer();

		// check when save mode the record doesn't exists
		sqlStr.append("select pirid from pi_report_content where pirid = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		if (record.size() > 0) {
			return UtilDBWeb.updateQueue(sqlStr_deletePIREPORT_CONTENT, new String[] {userBean.getStaffID(), pirID});
		}
		else {
			return true;
		}
	}

	public static boolean isPrintable(String grpID, String parentID, String pirID) {
		ArrayList record = UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_SUBDETAIL_view,
								new String[] {grpID, grpID, pirID, parentID, grpID, grpID, pirID, parentID});
		ReportableListObject excelRow = null;

		if (record.size() > 0) {
			for (int i = 0; i < record.size(); i++) {
				excelRow = (ReportableListObject)record.get(i);
				if (excelRow.getValue(7).equals("Y")) {
					if (isPrintable(grpID, excelRow.getValue(0), pirID)) {
						return true;
					}
				}
				else {
					if (excelRow.getValue(11).length() > 0) {
						return true;
					}
				}
			}
		}
		return false;
	}
	/*******************************************************************/

	/**************************Report Follow Up*****************************/
	public static ArrayList fetchFlwUpList(String pirID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_LIST,
					new String[] {pirID});
	}
	public static ArrayList fetchFlwUpMessage(String pirID,String flwUpID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_MESSAGE,
					new String[] {pirID,flwUpID});
	}
	public static ArrayList fetchFlwUpAllReply(String pirID,String flwUpID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_ALLREPLY,
					new String[] {pirID,flwUpID});
	}

	private static String getAdminEmail(UserBean userBean, String pirID) {
		String adminmEmail = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"select cd.co_department_supervisor from pi_report p join co_departments cd on cd.co_department_code = p.PIR_DEPT_CODE_FLWUP where p.pirid = ? "
				,new String[] {pirID});

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			adminmEmail = UserDB.getUserEmail(reportableListObject.getValue(0));
		}
		return adminmEmail;
	}

	private static String getNurseAdmin() {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.append("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('nurseadmin') and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString());
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return excelRow.getValue(0);
		} else {
			return "";
		}
	}

	private static String[] getNurseAdminAssistence() {
		String[] nurseAdminAssistence = null;

		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('nurseadminassist') and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString());
		if (record.size() > 0) {
			ReportableListObject excelRow = null;
			nurseAdminAssistence = new String[record.size()];
			for (int i = 0; i < record.size(); i++) {
				excelRow = (ReportableListObject) record.get(i);
				nurseAdminAssistence[i] = excelRow.getValue(0);
			}
		}
		return nurseAdminAssistence;
	}

	private static String getNurseAdminEmail() {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.append("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('nurseadmin') and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString());
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return excelRow.getValue(2);
		} else {
			return "";
		}
	}

	private static String getPharmacyAdmin() {
		String pharmacyAdmin = null;

		ArrayList result = null;
		if (ConstantsServerSide.isTWAH()) {
			result = UtilDBWeb.getReportableList("select co_department_supervisor from co_departments where co_department_code in ('PHAR')");
		} else {
			result = UtilDBWeb.getReportableList("select co_department_supervisor from co_departments where co_department_code in ('380')");
		}

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			pharmacyAdmin = reportableListObject.getValue(0);
		}
		return pharmacyAdmin;
	}

	private static String getPIEmail() {
		String piEmail = null;

		ArrayList result = null;
		if (ConstantsServerSide.isTWAH()) {
			result = UtilDBWeb.getReportableList("select co_department_head from co_departments where co_department_code in ('PI')");
		} else {
			result = UtilDBWeb.getReportableList("select co_department_head from co_departments where co_department_code in ('870')");
		}


		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			piEmail = UserDB.getUserEmail(reportableListObject.getValue(0));
		}
		return piEmail;
	}

	private static ArrayList<String> getPIAssistanceEmails() {
		ArrayList<String> piEmails = new ArrayList<String>();

		ArrayList result = UtilDBWeb.getReportableList("select pir_email from pi_report_person_list where pir_type = 'pi' and enable = '1'");
		for (int i = 0; i < result.size(); i++) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(i);
			piEmails.add(reportableListObject.getValue(0));
		}
		return piEmails;
	}

	public static String getMedicationReportDhead(String pirID) {
		String reportPharmacyDhead = null;

		ArrayList result = UtilDBWeb.getReportableList("select pir_staff_id from pi_report_person_list where pir_type = 'pharmacyd_dhead' and enable = '1'");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			reportPharmacyDhead = reportableListObject.getValue(0);
		}
		return reportPharmacyDhead;
	}

	/***********************************************************************/
	public static boolean sendEmailSubmit(UserBean userBean, String incident_type, String pirID, String irMode, String fromEmail, String toEmail) {
		ReportableListObject Row = null;
		String rptSts = getRptSts(pirID);

		// send to next resp person
		alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, toEmail, "", "");

		if (ConstantsServerSide.isTWAH() && "3".equals(rptSts)) {
			// TWAH, cc to vpma when submit to PI
			ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "ccvpma");
			for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
				Row = (ReportableListObject) flwUpDialogreportDtl.get(j);
				if (flwUpDialogreportDtl.size() > 0) {
					if (!Row.getValue(0).equals(userBean.getStaffID())) {
						alert(userBean.getStaffID(), incident_type, pirID, "", "", "NotifyVPMA", fromEmail, Row.getValue(2), "", "");
					}
				}
			}
		} else if ("8".equals(rptSts)) {
			ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "pharmacy");
			for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
				Row = (ReportableListObject) flwUpDialogreportDtl.get(j);
				if (flwUpDialogreportDtl.size() > 0) {
					if (!Row.getValue(0).equals(userBean.getStaffID())) {
						alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, Row.getValue(2), "", "");
					}
				}
			}
		}
		return true;
	}

	public static boolean sendEmailRedo(String staffID, String incident_type, String pirID, String rptSts, String irMode, String fromEmail, String toEmail, String redoReason) {
		// send to previous resp person
		alert(staffID, incident_type, pirID, "", rptSts, irMode, fromEmail, toEmail, redoReason, "");

		return true;
	}

	// Get ALL involved person for sendEmailClose
	public static ArrayList fetchReportFlwUpAllPerson(String pirID) {

		return UtilDBWeb.getReportableList("select distinct col from (select pir_res_party col from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_res_party is not null union all select pir_res_party2 col from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_res_party2 is not null union all select co_staff_id col from co_users where co_username = (select create_user from pi_report where pirid = ? ) OR co_staff_id = (select create_user from pi_report where pirid = ? ));",
											new String[] {pirID, pirID, pirID, pirID});
	}

	public static boolean sendEmailClose(UserBean userBean, String incident_type, String pirID, String irMode) {
		String toEmail = null;
		ReportableListObject excelRow = null;
		// send to ALL involved person
		ArrayList flwUpDialogreportDtl2 = fetchReportFlwUpAllPerson(pirID);
		for (int j = 0; j < flwUpDialogreportDtl2.size(); j++) {
			excelRow = (ReportableListObject) flwUpDialogreportDtl2.get(j);
			if (flwUpDialogreportDtl2.size() > 0) {
				if (!"6216".equals(excelRow.getValue(0))) { // terry id
					alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, "", UserDB.getUserEmail(excelRow.getValue(0)), "", "");
				}
			}
		}
		return true;
	}

	public static boolean sendEmailReferOshIcnPharmacy(UserBean userBean, String incident_type, String pirID, String irMode, String fromEmail, String toEmail1, String toEmail2) {
		// send to osh/icn if staff incident
		alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, toEmail1, "", "");
		return true;
	}

	public static boolean sendEmailAcceptOshIcn(UserBean userBean, String incident_type, String pirID, String irMode, String fromEmail, String toEmail) {
		// send to osh/icn if staff incident
		//alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, UserDB.getUserEmail(toEmail), "", "");
		return true;
	}

	public static boolean sendEmailUpdate(UserBean userBean, boolean pxForNure, String incident_type, String pirID, String irMode, String fromEmail, String toEmail1, String toEmail2) {
		// send to dhead, duty manager
		alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, toEmail1, "", "");
		if (toEmail2 != null) {  //10/03/2014
			alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, toEmail2, "", "");
		}
		return true;
	}

	public static boolean sendEmailCreate(UserBean userBean, boolean pxForNurse, String incident_type, String pirID, String irMode, String fromEmail, String toEmail1, String toEmail2, String redoReason) {
		String adminEmail = null;
		ReportableListObject excelRow = null;
		//Boolean ccNurseAdmin = false;
		String piemail = null;
		ArrayList<String> piassistanceemails = null;
		String toemail = null;
		String deptHeadEmail = null;
		deptHeadEmail = StaffDB.getStaffEmail(getDeptHead(userBean.getDeptCode(),"ID"));
		// send to dhead, duty manager except medication and ADR
		alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, toEmail1, redoReason, "");
		
		if (!toEmail1.equals(deptHeadEmail)) {
			alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, deptHeadEmail, redoReason, "");
		}
		
		if (toEmail2 != null) {
			if (!toEmail1.equals(toEmail2)) {
				alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, toEmail2, redoReason, "");
			}
		}

		if (IsMedicationIncident(incident_type)) {
			// send to pharmacy dutymanager
			ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "pharmacy");
			for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
				excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
				toEmail1 = excelRow.getValue(2);
				alert(userBean.getStaffID(), incident_type, pirID, "", "", "Refer", fromEmail, toEmail1, "", "");
			}

			// email to Chairman of MSC
			flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "pharmacy_cc");
			for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
				excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
				toEmail1 = excelRow.getValue(2);
				alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, toEmail1, "", "");
			}
		}

		// send to osh/icn investigator if staff incident
		if (IsStaffIncident(incident_type)) {
			// only icn/osh for sharp injury, other is osh
			if (ConstantsServerSide.isHKAH() && !"7".equals(incident_type)) {
				ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "osh");
				for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
					excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
					if (flwUpDialogreportDtl.size() > 0) {
						alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, excelRow.getValue(2), redoReason, "");
					}
				}
			} else {
				// send to OSH , ICN staff
				ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "oshicn");
				for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
					excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
					if (flwUpDialogreportDtl.size() > 0) {
						alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, excelRow.getValue(2), redoReason, "");
					}
				}
			}

		}

		// send to pharmacy investigator if pharmacy incident
		if (IsMedicationIncident(incident_type)) {
			// send to pharmacy dutymanager
			ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "pharmacy");
			for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
				excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
				if (flwUpDialogreportDtl.size() > 0) {
					// no need to send create report email to senior pharmacist for new flow
					//alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, excelRow.getValue(2), redoReason, "");
				}
			}
		}

		// if reporter is a nurse staff and reporting "Medication Incident", cc to Nursing Admin
		if ("8".equals(incident_type) && pxForNurse) {
			adminEmail = UserDB.getUserEmail(getNurseAdmin());
			if (ConstantsServerSide.isTWAH()) {
				// cc to Nurse Admin Assistence
				if (adminEmail.equals(getNurseAdminEmail())) {
					String[] nurseAdminAssistence = getNurseAdminAssistence();
					if (nurseAdminAssistence != null && nurseAdminAssistence.length > 0) {
						for (int i = 0; i < nurseAdminAssistence.length; i++) {
							alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, UserDB.getUserEmail(nurseAdminAssistence[i]), redoReason, "");
						}
					}
				}
			} else {
				if (IsNursingStaffReporter(pirID)) {
					alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, adminEmail, redoReason, "");
				}
			}
		}

		// If pharmacy incident, send to pharmacy admin rather than reporter's dept admin
		if (IsMedicationIncident(getIncidentType(pirID))) {
			adminEmail = UserDB.getUserEmail(getPharmacyAdmin());
		} else {
			adminEmail = getAdminEmail(userBean, pirID);
		}

		// send to administrator
		if ( !"noSend".equals(adminEmail) ) {
			StringBuffer sqlStr = new StringBuffer();
			sqlStr.append("select 1 from pi_report_person_list where pir_type in ('administrator') and pir_email = ? and enable = '1'");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {adminEmail});
			if (record.size() == 0) {
				alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, adminEmail, redoReason, "");
			}
		}

		if (ConstantsServerSide.isTWAH() && pxForNurse) {
			// cc to Nurse Admin Assistence
			if (adminEmail.equals(getNurseAdminEmail())) {
				String[] nurseAdminAssistence = getNurseAdminAssistence();
				if (nurseAdminAssistence != null && nurseAdminAssistence.length > 0) {
					for (int i = 0; i < nurseAdminAssistence.length; i++) {
						alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, UserDB.getUserEmail(nurseAdminAssistence[i]), redoReason, "");
					}
				}
			}
		}

		// send to PI
		piemail = getPIEmail();
		if (piemail != null) {
			alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, piemail, redoReason, "");
		}

		// send to pi assistance
		piassistanceemails = getPIAssistanceEmails();
		if (piassistanceemails != null ) {
			for (String piassistanceemail : piassistanceemails) {
				alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, piassistanceemail, redoReason, "");
			}
		}

		if (ConstantsServerSide.isTWAH()) {
			// for twah cc email to
			// Berni Lee (SNO) Staff # 01605  -- U100 OB & U300 Pediatric
			// Siman Chan (SNO) Staff # 01507 -- U200 Surgical
			if (!getPxDeptCode().equals(getRptDeptCode(pirID)) || pxForNurse) {
				ArrayList flwUpDialogreportDtl = ReportccEmail(pirID);
				for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
					excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
					alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, UserDB.getUserEmail(excelRow.getValue(0)), redoReason, "");
				}
			}
		} else {
			// for HKAH, nurse case cc to simon sim, Berni Lee
			ArrayList flwUpDialogreportDtl = ReportccEmailByDept(pirID);
			for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
				excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
				toemail = excelRow.getValue(1);
				alert(userBean.getStaffID(), incident_type, pirID, "", "", "Notify", fromEmail, toemail, redoReason, "");
			}
		}
		//

		return true;
	}

	private static ArrayList ReportccEmail(String pirID) {
		return UtilDBWeb.getReportableList("select pl.pir_staff_id from pi_report_person_list pl where pl.pir_type = 'ccemail' and enable = '1'");
	}

	private static ArrayList ReportccEmailByDept(String pirID) {
		return UtilDBWeb.getReportableList("select pl.pir_staff_id, pir_email from pi_report_person_list pl where pl.pir_type = '" + getRptDeptCode(pirID) + "' and enable = '1'");
	}

	public static String getPharmacyDutyManager(UserBean userBean) {

		ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "pharmacy");

		ReportableListObject excelRow = null;
		for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
			excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
			if (flwUpDialogreportDtl.size() > 0) {
				return excelRow.getValue(0);
			}
		}

		return null;
	}

	public static boolean sendEmailActionRequest(UserBean userBean, String incident_type, String pirID, String pirpiID, String rptSts, String irMode, String fromEmail, String actionrequeststaff, String compDate, String RequestAction) {
		String adminEmail = null;

		alert(userBean.getStaffID(), incident_type, pirID, pirpiID, rptSts, irMode, fromEmail, actionrequeststaff, RequestAction, compDate);
//		alert(userBean.getStaffID(), RequestAction, pirID, rptSts, irMode, fromEmail, actionrequeststaff, RequestAction);

		return true;
	}

	public static boolean sendEmailActionRequestReply(UserBean userBean, String incident_type, String pirID, String pirpiID, String rptSts, String irMode, String fromEmail, String actionrequeststaff, String compDate, String RequestAction) {
		String adminEmail = null;

		alert(userBean.getStaffID(), incident_type, pirID, pirpiID, rptSts, irMode, fromEmail, actionrequeststaff, RequestAction, compDate);

		return true;
	}

	public static ArrayList fetchReportSentinelEventAllPerson(UserBean userBean, String getType) {
		if ("oshicn".equals(getType)) {
			return UtilDBWeb.getReportableList("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('osh', 'icn') and enable = '1' order by pir_type",
					new String[] {});
		}
		else if ("furthernotice".equals(getType)) {
			return UtilDBWeb.getReportableList("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('notice') and pir_staff_id <> ? and enable = '1' order by pir_type",
					new String[] { userBean.getStaffID() });
		}
		else {
			return UtilDBWeb.getReportableList("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in (?) and enable = '1' order by pir_type",
					new String[] { getType });
		}
	}

	public static boolean sendEmailSentinelEvent(UserBean userBean, String incident_type, String pirID, String irMode) {
		StringBuffer emailTitle = new StringBuffer();
		StringBuffer contentStr = new StringBuffer();
		String toEmail = "";
		String block1 = "";
		String block2a = "";
		String block2b = "";
		String block2c = "";
		String block3 = "";
		ReportableListObject excelRow = null;
		String ccCEO = null;

		String IncidentDesc = "";
		String IncidentPlace = "";
		String IncidentPlaceFreeText = "";

		String incident_classification_desc = "";
		String emailSender = "";

		// get incident report: report type, location
		ArrayList result = UtilDBWeb.getReportableList("select PI_OPTION_DESC, pir_incident_place, pir_incident_place_freetext from pi_report join PI_REPORT_OPTION on PI_OPTION_ID = PIR_INCIDENT_CLASSIFICATION where pirid = '" + pirID + "'");
		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			IncidentDesc = reportableListObject.getValue(0);
			IncidentPlace = reportableListObject.getValue(1);
			IncidentPlaceFreeText = reportableListObject.getValue(2);
		}

		//alert(userBean.getStaffID(), incident_type, pirID, "", irMode, fromEmail, "", "");
		if (ConstantsServerSide.isTWAH()) {
			block2a = "prompt.pi.twahblocksentinelevent2a";
			block2b = "prompt.pi.twahblocksentinelevent2b";
			//block2c = "prompt.pi.twahblocksentinelevent2c";
			block3 = "prompt.pi.twahblocksentinelevent3";
		} else {
			block2a = "prompt.pi.blocksentinelevent2a";
			block2b = "prompt.pi.blocksentinelevent2b";
			//block2c = "prompt.pi.blocksentinelevent2c";
			block3 = "prompt.pi.blocksentinelevent3";
		}

		// get all sentinel event person
		ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "sentinel");
		// define the static array with no. of person
		String[] toEmail2 = new String[flwUpDialogreportDtl.size()];
		for (int j = 0; j < flwUpDialogreportDtl.size(); j++) {
			excelRow = (ReportableListObject) flwUpDialogreportDtl.get(j);
			if (flwUpDialogreportDtl.size() > 0) {
				toEmail2[j] = excelRow.getValue(2);
			}
		}

		ArrayList flwUpDialogreportDtl2 = fetchReportSentinelEventAllPerson(userBean, "ceo");
		for (int j = 0; j < flwUpDialogreportDtl2.size(); j++) {
			excelRow = (ReportableListObject) flwUpDialogreportDtl2.get(j);
			if (flwUpDialogreportDtl2.size() > 0) {
				ccCEO = excelRow.getValue(2);
			}
		}

		ArrayList record = fetchReportBasicInfo(pirID);
		if (record.size() > 0) {
			ReportableListObject dbRow = (ReportableListObject) record.get(0);
			incident_classification_desc = dbRow.getValue(11);
		}

		contentStr.append(MessageResources.getMessageEnglish(block2a));
		contentStr.append(MessageResources.getMessageEnglish(block2b));
		contentStr.append(pirID);
//		contentStr.append(MessageResources.getMessageEnglish(block2c));
//		contentStr.append(incident_classification_desc);
		contentStr.append(MessageResources.getMessageEnglish(block3));

		if (ConstantsServerSide.isTWAH()) {
			emailSender = "IRS@twah.org.hk";
		}
		else {
			emailSender = "IRS@hkah.org.hk";
		}

		emailTitle.append("SENTINEL EVENT : Incident Report Notification - " + IncidentDesc + ", Incident Place : " + IncidentPlace + " " + IncidentPlaceFreeText);
		UtilMail.sendMail(
				emailSender,
				toEmail2,  //mail to admin
				new String[] { ccCEO },  //cc to ceo
				null,
				emailTitle.toString(),
				contentStr.toString(), 1);

		return true;
	}
	//

	public static boolean sendEmailfurtherNotice(UserBean userBean, String incident_type, String pirID, String irMode, String fromEmail, String[] toEmail) {
		String toFurtherNoticeEmail = null;

		for (int j = 0; j < toEmail.length; j++) {
			alert(userBean.getStaffID(), incident_type, pirID, "", "", irMode, fromEmail, toEmail[j], "", "");
		}
		return true;
	}

	public static boolean alert(String staffID, String incident_type, String pirID, String pirpiID, String rptSts, String irMode, String fromEmail, String toEmail, String ActionReason, String compDate) {
		boolean success = true;
		StringBuffer emailTitle = new StringBuffer();
		StringBuffer contentStr = new StringBuffer();
		String emailSender = "";
		String block1 = "";
		String block2a = "";
		String block2b = "";
		String block2c = "";
		String block2d = "";
		String block2e = "";
		String block3 = "";
		String block3b = "";
		String block3c = "";
		String block3d = "";
		String block3e = "";
		String block6a = "";
		String block6b = "";
		String block6c = "";
		String IncidentDesc = "";
		String IncidentPlace = "";
		String IncidentPlaceFreeText = "";
		String IncidentClassification = "";
		String IncidentDeptcode = "";
		String IncidentDeptcodeFlwup = "";

		// get incident report: report type, location
		ArrayList result = UtilDBWeb.getReportableList("select PI_OPTION_DESC, pir_incident_place, pir_incident_place_freetext, PIR_INCIDENT_CLASSIFICATION, PIR_DEPT_CODE, PIR_DEPT_CODE_FLWUP, PIR_STATUS from pi_report join PI_REPORT_OPTION on PI_OPTION_ID = PIR_INCIDENT_CLASSIFICATION where pirid = ?", new String[] { pirID });
		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			IncidentDesc = reportableListObject.getValue(0);
			IncidentPlace = reportableListObject.getValue(1);
			IncidentPlaceFreeText = reportableListObject.getValue(2);
			IncidentClassification = reportableListObject.getValue(3);
//			IncidentClassification = getIncidentType(pirid);
			IncidentDeptcode = reportableListObject.getValue(4);
			IncidentDeptcodeFlwup = reportableListObject.getValue(5);
			rptSts = reportableListObject.getValue(6);
		}
		// Set Title
		if ("piclassdiff".equals(irMode) || "ActionRequest".equals(irMode) || "ActionRequestReminder".equals(irMode) || "ActionRequestReply".equals(irMode)) {
			emailTitle.append(incident_type);
		}
		if ("CeoReminder".equals(irMode)) {
			emailTitle.append("Auto-reminder of Incident Reporting System");
		}
		else {
			// add site code to email title
			if (ConstantsServerSide.isTWAH()) {
				if (getPIEmail().equals(toEmail)) {
					emailTitle.append("HKAH-TW ");
				}
			} else {
				if (getPIEmail().equals(toEmail)) {
					emailTitle.append("HKAH-SR ");
				}
			}
			if ("RemindSubmit".equals(irMode) || "RemindRefer".equals(irMode) || "PostExamFormReminder".equals(irMode)) {
				emailTitle.append("Incident Report Notification (REMINDER) - Report ID : " + pirID + ", " + IncidentDesc + ", Incident Place : " + IncidentPlace + " " + IncidentPlaceFreeText);
			} else {
				emailTitle.append("Incident Report Notification - Report ID : " + pirID + ", " + IncidentDesc + ", Incident Place : " + IncidentPlace + " " + IncidentPlaceFreeText);
			}
		}
		///////////////////////////////////////////////
		if ("Create".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblocknew1";
				block2a = "prompt.pi.twahblocknew2a";
				block2b = "prompt.pi.twahblocknew2b";
				block3 = "prompt.pi.twahblocknew3";
			} else {
				block1 = "prompt.pi.blocknew1";
				block2a = "prompt.pi.blocknew2a";
				block2b = "prompt.pi.blocknew2b";
				block3 = "prompt.pi.blocknew3";
			}
		} else if ("Accept".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblockaccept1";
				block2a = "prompt.pi.twahblockaccept2a";
				block2b = "prompt.pi.twahblockaccept2b";
				block3 = "prompt.pi.twahblockaccept3";
			} else {
				block1 = "prompt.pi.blockaccept1";
				block2a = "prompt.pi.blockaccept2a";
				block2b = "prompt.pi.blockaccept2b";
				block3 = "prompt.pi.blockaccept3";
			}
		}
		else if ("Refer".equals(irMode) || "RemindRefer".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblocksubmit1";
				block2a = "prompt.pi.twahblocksubmit2a";
				block2b = "prompt.pi.twahblocksubmit2b";
				block3 = "prompt.pi.twahblocksubmit3";
			} else {
				block1 = "prompt.pi.blocksubmit1";
				block2a = "prompt.pi.blocksubmit2a";
				block2b = "prompt.pi.blocksubmit2b";
				block3 = "prompt.pi.blocksubmit3";
			}
		}
		else if ("Redo".equals(irMode)) {
			block1 = "prompt.pi.blockredo1";
			if (IsStaffIncident(IncidentClassification) && IsOshIcnStaff(staffID)) {
				if (ConstantsServerSide.isTWAH()) {
					block2a = "prompt.pi.twahblockredo2icnosha";
				} else {
					block2a = "prompt.pi.blockredo2icnosha";
				}
			} else if (IsMedicationIncident(IncidentClassification) && IsPharmacyStaff(staffID)) {
				if (ConstantsServerSide.isTWAH()) {
					block2a = "prompt.pi.twahblockredo2pharmacy";
				} else {
					block2a = "prompt.pi.blockredo2pharmacy";
				}
			}
			else {
				if (ConstantsServerSide.isTWAH()) {
					block2a = "prompt.pi.twahblockredo2a";
				} else {
					block2a = "prompt.pi.blockredo2a";
				}
			}
			if ("0".equals(rptSts)) {
				if (ConstantsServerSide.isTWAH()) {
					block2b = "prompt.pi.twahblockredo2b_reporter";
					block3 = "prompt.pi.twahblockredo3";
				} else {
					block2b = "prompt.pi.blockredo2b_reporter";
					block3 = "prompt.pi.blockredo3";
				}
			} else {
				if (ConstantsServerSide.isTWAH()) {
					block2b = "prompt.pi.twahblockredo2b";
					block3 = "prompt.pi.twahblockredo3";
				} else {
					block2b = "prompt.pi.blockredo2b";
					block3 = "prompt.pi.blockredo3";
				}
			}
		}
		else if ("Submit".equals(irMode) || "RemindSubmit".equals(irMode)) {
			if ("0".equals(rptSts)) { // reminder "0" report, send to um/dm due to junior staff no email
				block1 = "prompt.pi.blockreminderredo1a";
				block2a = "prompt.pi.blockreminderredo1b";
			} else {
				if (ConstantsServerSide.isTWAH()) {
					block1 = "prompt.pi.twahblocksubmit1";
					block2a = "prompt.pi.twahblocksubmit2a";
					block2b = "prompt.pi.twahblocksubmit2b";
					block3 = "prompt.pi.twahblocksubmit3";
				} else {
					block1 = "prompt.pi.blocksubmit1";
					//new add for auto mail and manual, don leung, 17/10/2022
					if(staffID == null){  //auto
						block2a = "prompt.pi.blocksubmit2.1a";
					}else{  //manual
						block2a = "prompt.pi.blocksubmit2a";
					}				
					block2b = "prompt.pi.blocksubmit2b";
					block3 = "prompt.pi.blocksubmit3";
				}
			}
		}
		else if ("Resubmit".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblocksubmit1";
				block2a = "prompt.pi.twahblocksubmit2a";
				block2b = "prompt.pi.twahblocksubmit2b";
				block3 = "prompt.pi.twahblocksubmit3";
			} else {
				block1 = "prompt.pi.blocksubmit1";
				block2a = "prompt.pi.blocksubmit2a";
				block2b = "prompt.pi.blocksubmit2b";
				block3 = "prompt.pi.blocksubmit3";
			}
		}
		else if ("Notify".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblocksubmit1";
				block2a = "prompt.pi.twahblocknotify2a";
				block2b = "prompt.pi.twahblocksubmit2b";
				block3 = "prompt.pi.twahblocksubmit3";
			} else {
				block1 = "prompt.pi.blocksubmit1";
				block2a = "prompt.pi.blocknotify2a";
				block2b = "prompt.pi.blocksubmit2b";
				block3 = "prompt.pi.blocksubmit3";
			}
		}
		else if ("NotifyVPMA".equals(irMode)) { // for TWAH
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblocksubmit1";
				block2a = "prompt.pi.twahblocknotify2b";
				block2b = "prompt.pi.twahblocksubmit2b";
				block3 = "prompt.pi.twahblocksubmit3";
			}
		}
		else if ("Close".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblockclose1";
				block2a = "prompt.pi.twahblockclose2a";
				block2b = "prompt.pi.twahblockclose2b";
				block3 = "prompt.pi.twahblockclose3";
			} else {
				block1 = "prompt.pi.blockclose1";
				block2a = "prompt.pi.blockclose2a";
				block2b = "prompt.pi.blockclose2b";
				block3 = "prompt.pi.blockclose3";
			}
		}
		else if ("ActionRequest".equals(irMode) || "ActionRequestReminder".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblockactionrequest1";
				block2a = "prompt.pi.twahblockactionrequest2a";
				block2b = "prompt.pi.twahblockactionrequest2b";
				block2c = "prompt.pi.twahblockactionrequest2c";
				block2d = "prompt.pi.twahblockactionrequest2d";
				block2e = "prompt.pi.twahblockactionrequest3";
				block3 = "prompt.pi.twahblockactionrequest4";
				block3b = "prompt.pi.twahblockactionrequest5a";
				block3c = "prompt.pi.twahblockactionrequest5b";
				block3d = "prompt.pi.twahblockactionrequest5c";
				block6a = "prompt.pi.twahblockactionrequest6a";
				block6b = "prompt.pi.twahblockactionrequest6b";
				block6c = "prompt.pi.twahblockactionrequest6c";
			} else {
				block1 = "prompt.pi.blockactionrequest1";
				block2a = "prompt.pi.blockactionrequest2a";
				block2b = "prompt.pi.blockactionrequest2b";
				block2c = "prompt.pi.blockactionrequest2c";
				block2d = "prompt.pi.blockactionrequest2d";
				block2e = "prompt.pi.blockactionrequest3";
				block3 = "prompt.pi.blockactionrequest4";
				block3b = "prompt.pi.blockactionrequest5a";
				block3c = "prompt.pi.blockactionrequest5b";
				block3d = "prompt.pi.blockactionrequest5c";
				block6a = "prompt.pi.blockactionrequest6a";
				block6b = "prompt.pi.blockactionrequest6b";
				block6c = "prompt.pi.blockactionrequest6c";
			}
		}
		else if ("ActionRequestReply".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblockactionrequestreply1";
				block2a = "prompt.pi.twahblockactionrequestreply2a";
				block2b = "prompt.pi.twahblockactionrequestreply2b";
				block2c = "prompt.pi.twahblockactionrequestreply2c";
				block2d = "prompt.pi.twahblockactionrequestreply2d";
				block2e = "prompt.pi.twahblockactionrequestreply2e";
				block3 = "prompt.pi.twahblockactionrequestreply3";
			} else {
				block1 = "prompt.pi.blockactionrequestreply1";
				block2a = "prompt.pi.blockactionrequestreply2a";
				block2b = "prompt.pi.blockactionrequestreply2b";
				block2c = "prompt.pi.blockactionrequestreply2c";
				block2d = "prompt.pi.blockactionrequestreply2d";
				block2e = "prompt.pi.blockactionrequestreply2e";
				block3 = "prompt.pi.blockactionrequestreply3";
			}
		}
		else if ("PostExamFormReminder".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblockactionrequestreply1";
				block2a = "prompt.pi.twahblockactionrequestreply2a";
				block2b = "prompt.pi.twahblockactionrequestreply2b";
				block2c = "prompt.pi.twahblockactionrequestreply2c";
				block2d = "prompt.pi.twahblockactionrequestreply2d";
				block2e = "prompt.pi.twahblockactionrequestreply2e";
				block3 = "prompt.pi.twahblockactionrequestreply3";
			} else {
				block1 = "prompt.pi.blockactionrequestreply1";
				block2a = "prompt.pi.blockactionrequestreply2a";
				block2b = "prompt.pi.blockactionrequestreply2b";
				block2c = "prompt.pi.blockactionrequestreply2c";
				block2d = "prompt.pi.blockactionrequestreply2d";
				block2e = "prompt.pi.blockactionrequestreply2e";
				block3 = "prompt.pi.blockactionrequestreply3";
			}
		}
		else if ("FurtherNotice".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				block1 = "prompt.pi.twahblocksubmit1";
				block2a = "prompt.pi.twahblockfurthernotice2a";
				block2b = "prompt.pi.twahblockfurthernotice2b";
				block3 = "prompt.pi.twahblocksubmit3";
			} else {
				block1 = "prompt.pi.blocksubmit1";
				block2a = "prompt.pi.blockfurthernotice2a";
				block2b = "prompt.pi.blockfurthernotice2b";
				block3 = "prompt.pi.blocksubmit3";
			}
		} else if ("piclassdiff".equals(irMode)) {
			if (ConstantsServerSide.isTWAH()) {
				//block1 = "prompt.pi.twahblocksubmit1";
				block2a = ActionReason + "<br/><br/>";
				block2b = "prompt.pi.twahblocksubmit2b";
				block3 = "prompt.pi.twahblocksubmit3";
			} else {
				//block1 = "prompt.pi.blocksubmit1";
				block2a = ActionReason + "<br/><br/>";
				block2b = "prompt.pi.blocksubmit2b";
				block3 = "prompt.pi.blocksubmit3";
			}
		}
		//contentStr.append(MessageResources.getMessageEnglish(block1));

		if ("RemindSubmit".equals(irMode) && "0".equals(rptSts)) {
			contentStr.append(MessageResources.getMessageEnglish(block1));
			contentStr.append(pirpiID + " ");
			contentStr.append(MessageResources.getMessageEnglish(block2a));
			contentStr.append(pirID);
		}
		else if ("ActionRequest".equals(irMode) || "ActionRequestReminder".equals(irMode)) {
			contentStr.append(MessageResources.getMessageEnglish(block2a) + "<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block2b));
			contentStr.append(" " + pirID + " ");
			contentStr.append(MessageResources.getMessageEnglish(block2c));
			contentStr.append(pirID);
			contentStr.append(MessageResources.getMessageEnglish(block2d));
			contentStr.append(pirpiID);
			contentStr.append(MessageResources.getMessageEnglish(block2e)  + "<br/><br/>");
			contentStr.append(ActionReason + "<br/><br/>");
			contentStr.append(MessageResources.getMessageEnglish(block3)  + "<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block3b));
			contentStr.append(pirID);
			contentStr.append(MessageResources.getMessageEnglish(block3c));
			contentStr.append(pirpiID);
			contentStr.append(MessageResources.getMessageEnglish(block3d) + "<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block6a) + " : " + compDate + "<br/><br/>");
			contentStr.append(MessageResources.getMessageEnglish(block6b) + "<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block6c) + "<br/>");
		}
		else if ("PostExamFormReminder".equals(irMode)) {
			contentStr.append("Please send the Doctor Exam Form to PI Department.");
			contentStr.append("<br/>");
			// need to include the notify email body
			if (ConstantsServerSide.isTWAH()) {
				block2a = "prompt.pi.twahblocksubmitreminder2a";
				block2b = "prompt.pi.twahblocksubmitreminder2b";
				block2c = "prompt.pi.twahblocksubmitreminder2c";
				block3 = "";
			} else {
				block2a = "prompt.pi.blocksubmitreminder2a";
				block2b = "prompt.pi.blocksubmitreminder2b";
				block2c = "prompt.pi.blocksubmitreminder2c";
				block3 = "";
			}
			contentStr.append("<br/>");
			contentStr.append("<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block2a));
			contentStr.append(MessageResources.getMessageEnglish(block2b));
			contentStr.append(pirID);
			contentStr.append(MessageResources.getMessageEnglish(block2c));
			contentStr.append(pirpiID);
			contentStr.append(MessageResources.getMessageEnglish(block3));
		}
		else if ("ActionRequestReply".equals(irMode)) {
			contentStr.append(MessageResources.getMessageEnglish(block1));
			contentStr.append(StaffDB.getStaffName(fromEmail));
			contentStr.append("<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block2c));
			contentStr.append(IncidentDesc);
			contentStr.append(MessageResources.getMessageEnglish(block2d));
			contentStr.append(IncidentPlace + " " + IncidentPlaceFreeText + "<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block2a) + compDate + "<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block2b));
			contentStr.append(ActionReason + "<br/>");
			contentStr.append(MessageResources.getMessageEnglish(block2e));
			contentStr.append(pirID);
			contentStr.append(MessageResources.getMessageEnglish(block3));
			fromEmail = UserDB.getUserEmail(fromEmail);
			toEmail = UserDB.getUserEmail(toEmail);
		}
		else if ("CeoReminder".equals(irMode)) {
			contentStr.append("Dear CEO, ");
			contentStr.append("<br/>");
			contentStr.append("<br/>");
			contentStr.append("&nbsp;&nbsp;&nbsp;&nbsp;This is a monthly soft reminder to remind you that the incident summary report is available at the IRS for your perusal. ");
			contentStr.append("<br/>");
			contentStr.append("<br/>");
			contentStr.append("&nbsp;&nbsp;&nbsp;&nbsp;Please kindly click : ");
			contentStr.append("<br/>");
			contentStr.append("<br/>");
			contentStr.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=http://160.100.2.80/intranet/pi/reportlist.jsp>Summary Report</a> Button to access to the report. (Hong Kong Adventist Hospital - Stubbs Road) ");
			contentStr.append("<br/>");
			contentStr.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=http://192.168.0.20/intranet/pi/reportlist.jsp>Summary Report</a> Button to access to the report. (Hong Kong Adventist Hospital - Tsuen Wan) ");
			contentStr.append("<br/>");
			contentStr.append("<br/>");
			contentStr.append("&nbsp;&nbsp;&nbsp;&nbsp;Thank you for your kind attention!");
			contentStr.append("<br/>");
			contentStr.append("<br/>");
			contentStr.append("Best Regards");
		} else {
			contentStr.append(MessageResources.getMessageEnglish(block2a));
			if ("Redo".equals(irMode)) {
				contentStr.append(ActionReason + "<br/>");
			}
			contentStr.append(MessageResources.getMessageEnglish(block2b));
			if (!"Accept".equals(irMode)) {
				contentStr.append(pirID);
			}
			contentStr.append(MessageResources.getMessageEnglish(block3));
			if ("Accept".equals(irMode)) {
				contentStr.append(pirID);
			}

			ArrayList dialogRsponse = fetchReportFlwUpDialogLatest(pirID);
			if (dialogRsponse.size() > 0) {
				contentStr.append("<br><br><table border=\"1\"><tr bgcolor=\\\"#D3D3D3\\\" color=\\\"white\\\"><td>Date</td><td>Message Type</td><td>From</td>");
				if (ConstantsServerSide.isTWAH()) {
					contentStr.append("<td>Responsible Party</td><td>Status</td>");
				} else {
					contentStr.append("<td>Status</td><td>Responsible Party</td>");
				}
				contentStr.append("<td>Redo Reason</td><td>Complete</td>");
				ReportableListObject rowRtn = (ReportableListObject) dialogRsponse.get(0);
				contentStr.append("<tr><td>");
				contentStr.append(rowRtn.getValue(0));
				contentStr.append("</td><td>");
				contentStr.append(rowRtn.getValue(1));
				contentStr.append("</td><td>");
				if (rowRtn.getValue(2) != null && rowRtn.getValue(2).length() > 0) {
					contentStr.append(StaffDB.getStaffName(rowRtn.getValue(2)));
				}
				contentStr.append("</td><td>");
				if (ConstantsServerSide.isTWAH()) {
					if (rowRtn.getValue(3) != null && rowRtn.getValue(3).length() > 0) {
						contentStr.append(StaffDB.getStaffName(rowRtn.getValue(3)));
					}
					if (rowRtn.getValue(4) != null && rowRtn.getValue(4).length() > 0) {
						contentStr.append(",");
						contentStr.append(StaffDB.getStaffName(rowRtn.getValue(4)));
					}
					contentStr.append("</td><td>");
					contentStr.append(getRptStsDesc(IsPxDeptCode(IncidentDeptcodeFlwup), IncidentClassification, IncidentDeptcode, rptSts));
				} else {
					contentStr.append(getRptStsDesc(IsPxDeptCode(IncidentDeptcodeFlwup), IncidentClassification, IncidentDeptcode, rptSts));
					contentStr.append("</td><td>");
					if (rowRtn.getValue(3) != null && rowRtn.getValue(3).length() > 0) {
						contentStr.append(StaffDB.getStaffName(rowRtn.getValue(3)));
					}
					if (rowRtn.getValue(4) != null && rowRtn.getValue(4).length() > 0) {
						contentStr.append(",");
						contentStr.append(StaffDB.getStaffName(rowRtn.getValue(4)));
					}
				}
				contentStr.append("</td><td>");
				contentStr.append(rowRtn.getValue(6));
				contentStr.append("</td><td>");
				if (!"5".equals(rowRtn.getValue(5))) {
					contentStr.append("WIP");
				} else {
					contentStr.append("Completed");
				}
				contentStr.append("</td></tr>");
				contentStr.append("</table><br/>");
			}
			contentStr.append(getFlowchart(rptSts, IncidentClassification));
		}
		//contentStr.append(MessageResources.getMessageEnglish(block2a));
		//contentStr.append(pirID);
		//contentStr.append(MessageResources.getMessageEnglish(block2b)+" ");
		//contentStr.append(MessageResources.getMessageEnglish(block3));

		if (ConstantsServerSide.isTWAH()) {
			emailSender = "IRS@twah.org.hk";
		}
		else {
			emailSender = "IRS@hkah.org.hk";
		}

		if (ConstantsServerSide.isTWAH()) {
			UtilMail.sendMail(emailSender, new String[] { toEmail }, null, null, emailTitle.toString(), contentStr.toString(), 1);
		}
		else {
			UtilMail.sendMail(emailSender, new String[] { toEmail }, null, null, emailTitle.toString(), contentStr.toString(), 1);
		}

		if (ConstantsServerSide.DEBUG) {
			System.err.println("send email from [" + emailSender + "] => [" + toEmail + "] about [" + emailTitle.toString() + "]");
		}

		return success;
	}

	public static String getFlowchart(String rptSts, String incidentType) {
		String flowchart_diagram = null;
		int height = 500;
		int width = 800;

		if (ConstantsServerSide.isTWAH()) {
			if (IsMedicationIncident(incidentType)) {
				flowchart_diagram = "irs_tw_ph_flow.gif";
				height = 1078;
				width = 887;
			} else if ("0".equals(rptSts)) {
				flowchart_diagram = "tw_statusdiagram0.gif";
			} else if ("1".equals(rptSts) && "33".equals(incidentType)) {
				flowchart_diagram = "tw_statusdiagram_oshicn1.gif";
			} else if ((("1".equals(rptSts) || "8".equals(rptSts)) && "52".equals(incidentType)) || ("29".equals(rptSts) && "33".equals(incidentType))) {
				flowchart_diagram = "tw_statusdiagram_px1.gif";
			} else if ("1".equals(rptSts) || "11".equals(rptSts) || "12".equals(rptSts) || "19".equals(rptSts) || "99".equals(rptSts)) {
				flowchart_diagram = "tw_statusdiagram1.gif";
			} else if ("2".equals(rptSts)) {
				flowchart_diagram = "tw_statusdiagram2.gif";
			} else if ("3".equals(rptSts)) {
				flowchart_diagram = "tw_statusdiagram3.gif";
			} else if ("5".equals(rptSts)) {
				flowchart_diagram = "tw_statusdiagram5.gif";
			} else if ("7".equals(rptSts)) {
				flowchart_diagram = "tw_statusdiagram7.gif";
			} else if ("14".equals(rptSts) || "29".equals(rptSts)) {
				flowchart_diagram = "tw_statusdiagram14.gif";
			} else {
				flowchart_diagram = "tw_statusdiagram.gif";
			}
		} else {
			if ("0".equals(rptSts)) {
				flowchart_diagram = "hk_statusdiagram0.gif";
			} else if ("1".equals(rptSts) && ("33".equals(incidentType) || "64".equals(incidentType) || "65".equals(incidentType))) {
				flowchart_diagram = "hk_statusdiagram_oshicn1.gif";
			} else if (("1".equals(rptSts) || "8".equals(rptSts)) && "52".equals(incidentType)) {
				flowchart_diagram = "hk_statusdiagram_px1.gif";
			} else if ("1".equals(rptSts) || "11".equals(rptSts) || "12".equals(rptSts) || "19".equals(rptSts) || "99".equals(rptSts)) {
				flowchart_diagram = "hk_statusdiagram1.gif";
			} else if ("2".equals(rptSts)) {
				flowchart_diagram = "hk_statusdiagram2.gif";
			} else if ("3".equals(rptSts)) {
				flowchart_diagram = "hk_statusdiagram3.gif";
			} else if ("5".equals(rptSts)) {
				flowchart_diagram = "hk_statusdiagram5.gif";
			} else if ("7".equals(rptSts)) {
				flowchart_diagram = "hk_statusdiagram7.gif";
			} else if ("14".equals(rptSts) || "29".equals(rptSts)) {
				flowchart_diagram = "hk_statusdiagram14.gif";
			} else {
				flowchart_diagram = "hk_statusdiagram.gif";
			}
		}

		StringBuffer sb = new StringBuffer();
		sb.append("<img src=\"http://");
		sb.append(ConstantsServerSide.OFFSITE_URL);
		sb.append("/intranet/images/pi/");
		sb.append(flowchart_diagram);
		sb.append("\" alt=\"Smiley face\" height=\"");
		sb.append(height);
		sb.append("\" width=\"");
		sb.append(width);
		sb.append("\">");

		return sb.toString();
	}

	public static ArrayList fetchReportFlwUp(String pirID) {
		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP, new String[] {pirID});
	}

	public static ArrayList fetchFlwUpReply(String pirID, String flwID) {
		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLW_REPLY, new String[] {pirID, flwID});
	}

	public static String addFlwUp(UserBean userBean, String pirID, String to, String dept,
			String email, String action, String autoRemind) {
		String flwid = getNextFlwupID();

		if (UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_FLWUP,
				new String[] {pirID, flwid, to, dept, email, action, autoRemind, userBean.getStaffID(), userBean.getStaffID()})) {
			return flwid;
		}
		return null;
	}

	public static boolean updateFlwUp(UserBean userBean, String pirID, String flwID, String to,
			String dept, String email, String action, String autoRemind) {

		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_FLWUP,
			new String[] {to, dept, email, action, autoRemind, userBean.getStaffID(), pirID, flwID});
	}

	public static String addFlwUpReply(UserBean userBean, String pirID, String flwID, String replyMsg) {
		String replyID = getNextMsgID();

		UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_FLWUP_REPLY,
			new String[] {pirID, flwID, replyID, replyMsg, userBean.getStaffID(), userBean.getStaffID()});
		return replyID;
	}

	public static boolean updateFlwUpReply(UserBean userBean, String pirID, String flwID, String replyID, String replyMsg) {
		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_FLWUP_REPLY,
			new String[] {replyMsg, userBean.getStaffID(), pirID, flwID, replyID});
	}

	public static boolean deleteAllFlwUp(UserBean userBean, String pirID) {

		return (UtilDBWeb.updateQueue(sqlStr_deletePIREPORT_FLWUP,
				new String[] {userBean.getStaffID(), pirID})
				&&
			UtilDBWeb.updateQueue(sqlStr_deletePIREPORT_FLWUP_REPLY,
				new String[] {userBean.getStaffID(), pirID}));
	}

	public static ArrayList checkEmailScheduled() {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT F.PI_TO,F.PI_CC,F.PI_BCC,F.PI_ACTION,F.PI_REMARK,F.PIRID ");
		sqlStr.append("FROM PI_REPORT_FLWUP F , PI_REPORT P ");
		sqlStr.append("WHERE F.ENABLE = 1 ");
		sqlStr.append("AND   P.PIR_ENABLED = 1 ");
		sqlStr.append("AND   P.PIR_STATUS NOT IN ('3','4','7') ");
		sqlStr.append("AND   F.PIRID = P.PIRID ");
		sqlStr.append("AND   F.PI_EMAIL = 'Y' ");
		sqlStr.append("AND   F.PI_AUTO_REMIND = 'Y' ");

		return UtilDBWeb.getReportableList(sqlStr.toString());
	}

//20230509 Arran added	
	public static String sqlStr_fetchPIREPORT_SUBDETAIL_edit2(String suffix, String dataCol) {
		StringBuffer sqlStr = new StringBuffer();
		
		sqlStr.append("SELECT * ");
		sqlStr.append("FROM ( ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID || '" + suffix + "', P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, " + dataCol + ", Con.PI_CONTENT_GRPID, Con.PI_CONTENT_ID ");
		sqlStr.append("   FROM   PI_REPORT_CONTENT Con, PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    Con.PI_GRPID = P.PI_GRPID ");
		sqlStr.append("   AND    Con.ENABLE = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID = Con.PI_OPTION_ID (+) ");
		sqlStr.append("   AND    Con.PIRID = ? ");
		sqlStr.append("   AND    Con.PI_CONTENT_GRPID = ? ");
		sqlStr.append("   AND    P.PI_PARENT_ID = ?)) ");
		sqlStr.append("   UNION ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID || '" + suffix + "', P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, '', TO_NUMBER(?), 0 ");
		sqlStr.append("   FROM   PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID NOT IN ( ");
		sqlStr.append("                           SELECT DISTINCT PI_OPTION_ID ");
		sqlStr.append("                           FROM   PI_REPORT_CONTENT ");
		sqlStr.append("                           WHERE  PIRID = ? ");
		sqlStr.append("                           AND    PI_CONTENT_GRPID = ? ");
		sqlStr.append("                           AND    ENABLE = 1) ");
		sqlStr.append("   AND P.PI_PARENT_ID = ?))) ");
		sqlStr.append("ORDER BY PI_CONTENT_GRPID, PI_ORDER ");
		
		return sqlStr.toString();
	}
	
//20230509 Arran added	
	public static String sqlStr_fetchPIREPORT_SUBDETAIL_view2(String suffix, String dataCol) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT * ");
		sqlStr.append("FROM( ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID || '" + suffix + "', P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, " + dataCol + ", Con.PI_CONTENT_GRPID, Con.PI_CONTENT_ID ");
		sqlStr.append("   FROM   PI_REPORT_CONTENT Con, PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    Con.PI_GRPID = P.PI_GRPID ");
		sqlStr.append("   AND    Con.ENABLE = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID = Con.PI_OPTION_ID(+) ");
		sqlStr.append("   AND    Con.PIRID = ? ");
		sqlStr.append("   AND    P.PI_PARENT_ID = ?)) ");
		sqlStr.append("   UNION ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID || '" + suffix + "', P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, '', 1, 0 ");
		sqlStr.append("   FROM   PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID NOT IN ( ");
		sqlStr.append("                           SELECT DISTINCT PI_OPTION_ID ");
		sqlStr.append("                           FROM   PI_REPORT_CONTENT ");
		sqlStr.append("                           WHERE  PIRID = ? ");
		sqlStr.append("                           AND    ENABLE = 1) ");
		sqlStr.append("   AND P.PI_PARENT_ID = ?))) ");
		sqlStr.append("ORDER BY PI_CONTENT_GRPID, PI_ORDER ");
		return sqlStr.toString();	
	}
	
//20230509 Arran added	
	public static String sqlStr_fetchPIREPORT_DETAIL_view2(String suffix, String dataCol) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT * ");
		sqlStr.append("FROM( ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID || '" + suffix + "', P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, " + dataCol + ", Con.PI_CONTENT_GRPID, Con.PI_CONTENT_ID ");
		sqlStr.append("   FROM   PI_REPORT_CONTENT Con, PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    Con.PI_GRPID = P.PI_GRPID ");
		sqlStr.append("   AND    Con.ENABLE = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID = Con.PI_OPTION_ID(+) ");
		sqlStr.append("   AND    Con.PIRID = ? ");
		sqlStr.append("   AND    P.PI_PARENT_ID IS NULL)) ");
		sqlStr.append("   UNION ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID || '" + suffix + "', P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, '', 1, 0 ");
		sqlStr.append("   FROM   PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID NOT IN ( ");
		sqlStr.append("                           SELECT DISTINCT PI_OPTION_ID ");
		sqlStr.append("		                      FROM   PI_REPORT_CONTENT ");
		sqlStr.append("                           WHERE  PIRID = ? ");
		sqlStr.append("                  		  AND    ENABLE = 1) ");
		sqlStr.append("   AND P.PI_PARENT_ID IS NULL))) ");
		sqlStr.append("ORDER BY PI_ORDER ");
		return sqlStr.toString();	
	}
	
//20230509 Arran added	
	public static String sqlStr_fetchPIREPORT_DETAIL2(String suffix) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT PI_OPTION_ID || '" + suffix + "', PI_GRPID, PI_OPTION_TYPE, PI_OPTION_DESC, PI_STYLE_COL, ");
		sqlStr.append("       PI_STYLE_SUBCONTENT, PI_STYLE_COPYABLE, PI_HAS_CHILD, PI_ORDER, PI_REMARK, PI_PARENT_ID, '', '', '' ");
		sqlStr.append("FROM   PI_REPORT_OPTION ");
		sqlStr.append("WHERE (PI_GRPID = ? ");
		sqlStr.append("OR     PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("AND    PI_ENABLED = 1 ");
		return sqlStr.toString();	
	}
		
	static {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT( ");
		sqlStr.append("PIR_SITE_CODE, PIRID, PIR_PNAME, PIR_RANK, PIR_DEPT_CODE, PIR_INCIDENT_DATE, ");
		sqlStr.append("PIR_INCIDENT_TIME, PIR_INCIDENT_PLACE, PIR_INCIDENT_TYPE, PIR_INCIDENT_CLASSIFICATION, PIR_CREATED_USER, PIR_MODIFIED_USER,PIR_REL_PIRID,PIR_INCIDENT_PLACE_FREETEXT, PIR_RESPONSIBLE_PARTY, PIR_RESPONSIBLE_PARTY2, PIR_SENTINEL_EVENT, PIR_SENTINEL_EVENT_ID, ");
		sqlStr.append("PIR_PX_RESPONSIBLE_PARTY, PIR_PX_RESPONSIBLE_PARTY2, PIR_PX_NURSE, PIR_NEAR_MISS, PIR_NEAR_MISS_PI, PIR_HAZARDOUS_CONDITION, PIR_HAZARDOUS_CONDITION_PI, PIR_INCIDENT_CLASS_PI, PIR_INCIDENT_TYPE_PI, PIR_DEPT_CODE_FLWUP, PIR_RESPONSIBLE_PARTY_FLWUP) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, ?,  TO_DATE(?,'dd/MM/YYYY'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ");
		sqlStr.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_INVOLVE_PERSON( ");
		sqlStr.append("PIRID, PIR_IP_ID, IS_PATIENT, IS_STAFF, IS_VISTOR_OR_RELATIVE, IS_OTHER, PATNO, ");
		sqlStr.append("STAFF_ID, PERSON_NAME, SEX, AGE, DATE_OF_BIRTH, RANK, DEPT_CODE, REMARK, ");
		sqlStr.append("SAME_REPORT_PERSON, RELATIONSHIP, VISTOR_RELATIVES_OF_PATIENT, ");
		sqlStr.append("VISTOR_RELATIVES_OF_STAFF, PERSON_STATUS, PHYSICIAN, DIAGNOSIS, TEL, ADDR, CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, ?, ?, ?, ");
		sqlStr.append("?, ?, ?, ?, TO_DATE(?,'dd/MM/YYYY'), ?, ?, ?, ");
		sqlStr.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_INVOLVE_PERSON = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_CONTENT( ");
		sqlStr.append("PI_SITE_CODE, PIRID, PI_CONTENT_GRPID, PI_GRPID, PI_CONTENT_ID, PI_OPTION_ID, PI_VALUE, ");
		sqlStr.append("CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, ?, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_CONTENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT P.PIRID, P.PIR_PNAME, P.PIR_RANK, D.CO_DEPARTMENT_DESC, ");
		sqlStr.append("TO_CHAR(P.PIR_INCIDENT_DATE, 'DD/MM/YYYY'), P.PIR_INCIDENT_TIME, ");
		sqlStr.append("P.PIR_INCIDENT_PLACE, P.PIR_INCIDENT_TYPE, D.CO_DEPARTMENT_CODE, ");
		sqlStr.append("P.PIR_STATUS, PIR_INCIDENT_CLASSIFICATION, PO.PI_OPTION_DESC, P.PIR_REL_PIRID, P.PIR_INCIDENT_PLACE_FREETEXT, P.PIR_RESPONSIBLE_PARTY, CS.CO_STAFFNAME, ");
		sqlStr.append("P.PIR_CREATED_USER, P.PIR_RESPONSIBLE_PARTY2, CS2.CO_STAFFNAME, PIR_SENTINEL_EVENT, PI_ID, PI_DESC, PIR_PI_ASS_INJURY, ");
		sqlStr.append("P.PIR_PX_RESPONSIBLE_PARTY, P.PIR_PX_RESPONSIBLE_PARTY2, P.PIR_PX_NURSE, CSNurse.CO_STAFFNAME, ");
		sqlStr.append("P.PIR_NEAR_MISS, PIR_NEAR_MISS_PI, P.PIR_INCIDENT_CLASS_PI, PO2.PI_OPTION_DESC, P.PIR_INCIDENT_TYPE_PI, ");
		sqlStr.append("PIR_DEPT_CODE_FLWUP, PIR_RESPONSIBLE_PARTY_FLWUP, D2.CO_DEPARTMENT_DESC, CS3.CO_STAFFNAME, P.PIR_INOUT_PAT, P.PIR_HAZARDOUS_CONDITION, P.PIR_HAZARDOUS_CONDITION_PI, P.PIR_OUTCOME, P.PIR_PI_REMARK4 ");
		sqlStr.append("FROM PI_REPORT P, CO_DEPARTMENTS D, PI_REPORT_OPTION PO, CO_STAFFS CS, CO_STAFFS CS2, PI_REPORT_SENTINEL, CO_STAFFS CSNurse, PI_REPORT_OPTION PO2, CO_DEPARTMENTS D2, CO_STAFFS CS3 ");
		sqlStr.append("WHERE P.PIRID = ? ");
//		sqlStr.append("AND   P.PIR_ENABLED = 1 "); for also getting rejected report
		sqlStr.append("AND   P.PIR_DEPT_CODE_FLWUP = D2.CO_DEPARTMENT_CODE (+) AND CS3.CO_STAFF_ID = P.PIR_RESPONSIBLE_PARTY_FLWUP ");
		sqlStr.append("AND   P.PIR_DEPT_CODE = D.CO_DEPARTMENT_CODE (+) AND CS.CO_STAFF_ID = P.PIR_RESPONSIBLE_PARTY ");
		sqlStr.append("AND   CS2.CO_STAFF_ID (+)= P.PIR_RESPONSIBLE_PARTY2 ");
		sqlStr.append("AND   CSNurse.CO_STAFF_ID (+)= P.PIR_PX_NURSE ");
		sqlStr.append("AND   PO.PI_OPTION_ID = P.PIR_INCIDENT_CLASSIFICATION ");
		sqlStr.append("AND   PO2.PI_OPTION_ID = P.PIR_INCIDENT_CLASS_PI ");
		sqlStr.append("AND   PI_ID (+)= PIR_SENTINEL_EVENT_ID ");
		sqlStr_fetchPIREPORT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT P.PIRID, P.PIR_IP_ID, DECODE(P.IS_PATIENT, 1, 'true', 'false'), ");
		sqlStr.append("DECODE(P.IS_STAFF, 1, 'true', 'false'), DECODE(P.IS_VISTOR_OR_RELATIVE, 1, 'true', 'false'), ");
		sqlStr.append("DECODE(P.IS_OTHER, 1, 'true', 'false'), P.PATNO, P.STAFF_ID, P.PERSON_NAME, ");
		sqlStr.append("DECODE(P.SEX, 'M', 'Male', 'F', 'Female', ''), P.AGE, TO_CHAR(P.DATE_OF_BIRTH, 'DD/MM/YYYY'), P.RANK, ");
		sqlStr.append("D.CO_DEPARTMENT_DESC, P.REMARK, DECODE(P.SAME_REPORT_PERSON, 1, 'true', 'false'), ");
		sqlStr.append("P.RELATIONSHIP, DECODE(P.VISTOR_RELATIVES_OF_PATIENT, 1, 'true', 'false'), ");
		sqlStr.append("DECODE(P.VISTOR_RELATIVES_OF_STAFF, 1, 'true', 'false'), P.PERSON_STATUS, P.DEPT_CODE, ");
		sqlStr.append("P.PHYSICIAN, P.DIAGNOSIS, P.TEL, P.ADDR, ");
		sqlStr.append("(SELECT docfname || '' || docgname FROM Doctor@IWEB WHERE DOCCODE = P.PHYSICIAN) DOCNAME, ");
		sqlStr.append("(SELECT count(1) FROM Doctor@IWEB WHERE DOCCODE = P.PHYSICIAN) ISVALIDDOC ");
		sqlStr.append("FROM PI_REPORT_INVOLVE_PERSON P, CO_DEPARTMENTS D ");
		sqlStr.append("WHERE P.PIRID = ? ");
		sqlStr.append("AND	 P.ENABLE = 1 ");
		sqlStr.append("AND   P.DEPT_CODE = D.CO_DEPARTMENT_CODE (+) ");
		sqlStr.append("ORDER BY P.IS_OTHER, P.IS_VISTOR_OR_RELATIVE, P.IS_STAFF, P.IS_PATIENT ");
		sqlStr_fetchPIREPORT_INVOLVE_PERSON = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT DISTINCT P.PIRID, P.PIR_PNAME, P.PIR_RANK, D.CO_DEPARTMENT_DESC, ");  //0 - 3
		sqlStr.append("DECODE(P.PIR_INCIDENT_DATE, null, '', "); // 4
		sqlStr.append("TO_CHAR(P.PIR_INCIDENT_DATE, 'DD/MM/YYYY') ||' '||P.PIR_INCIDENT_TIME), "); //4
		sqlStr.append("P.PIR_INCIDENT_PLACE, P.PIR_INCIDENT_CLASSIFICATION, "); // 5 - 6
//		sqlStr.append("DECODE(P.PIR_STATUS, 0, 'Wait for Reporter Resubmit', 1, 'Wait for Investigation', 2, 'Wait for Administrator', 3, 'Wait for PI', 4, 'Wait for CEO', 5, 'Reporting Process Completed', 6, 'Rejected', 7, 'Wait for OSH/ICN', 8, '', 9, '', 10, 'Wait for Others', 11, 'Wait for Referring to OSH/ICN'), ");
		sqlStr.append("P.PIR_STATUS, "); // 7
		sqlStr.append("TO_CHAR(P.PIR_CREATED_DATE, 'DD/MM/YYYY'), "); // 8
		sqlStr.append("PO.PI_OPTION_DESC, PI_VALUE, P.PIR_TRAFFIC_LIGHT, P.PIR_PI_REMARK, P.PIR_PI_REMARK2, P.PIR_PI_REMARK3, ");  //9 - 14
		sqlStr.append("P.PIR_UMDM_REMARK, P.PIR_NEAR_MISS, P.PIR_NEAR_MISS_PI, P.PIR_INCIDENT_CLASS_PI, "); //15 - 18
		sqlStr.append("P.PIR_PI_REMARK_DON, P.PIR_PI_REMARK_VPA, PO2.PI_OPTION_DESC, P.PIR_DEPT_CODE, P.PIR_DEPT_CODE_FLWUP, D3.CO_DEPARTMENT_DESC, prdc.PIR_NARRATIVE, "); //19 - 25
		sqlStr.append("P.PIR_HAZARDOUS_CONDITION, P.PIR_HAZARDOUS_CONDITION_PI, P.PIR_OUTCOME, P.PIR_PI_REMARK4 ");   //26 - 29
		sqlStr.append("FROM PI_REPORT P ");
		sqlStr.append("left outer join PI_REPORT_OPTION PO on PO.PI_OPTION_ID = P.PIR_INCIDENT_CLASSIFICATION ");
		sqlStr.append("left outer join PI_REPORT_OPTION PO2 on PO2.PI_OPTION_ID = P.PIR_INCIDENT_CLASS_PI ");
		sqlStr.append("left outer join CO_DEPARTMENTS D on P.PIR_DEPT_CODE = D.CO_DEPARTMENT_CODE ");
		sqlStr.append("left outer join CO_DEPARTMENTS D3 on P.PIR_DEPT_CODE_FLWUP = D3.CO_DEPARTMENT_CODE ");
		sqlStr.append("left outer join PI_REPORT_CONTENT PC ON PC.PIRID = P.PIRID AND PC.ENABLE = '1' AND PC.PI_OPTION_ID IN ('284', ");
		if (ConstantsServerSide.isTWAH()) {
			sqlStr.append("'815') ");
		} else {
			sqlStr.append("'317') ");
		}
		sqlStr.append("left outer join co_Staffs cs1 on cs1.CO_STAFF_ID = P.PIR_PX_NURSE ");
		sqlStr.append("left outer join CO_DEPARTMENTS D2 on cs1.CO_DEPARTMENT_CODE = D2.CO_DEPARTMENT_CODE ");
		sqlStr.append("left outer join pi_report_dhead_comment prdc on P.PIRID = prdc.PIRID ");
		sqlStr.append("left outer join pi_report_flwup_dialog prfd on P.PIRID = prfd.PIRID ");
//		sqlStr.append("WHERE P.PIR_ENABLED = 1 ");
		sqlStr_fetchPIREPORT_list = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT ");
		sqlStr.append("SET PIR_PNAME = ?, PIR_RANK = ?, PIR_DEPT_CODE = ?, ");
		sqlStr.append("PIR_INCIDENT_DATE = TO_DATE(?,'dd/MM/YYYY'), PIR_INCIDENT_TIME = ?, ");
		sqlStr.append("PIR_INCIDENT_PLACE = ?, PIR_INCIDENT_TYPE = ?, PIR_INCIDENT_CLASSIFICATION = ?, ");
		sqlStr.append("PIR_MODIFIED_DATE = SYSDATE, PIR_MODIFIED_USER = ?, PIR_REL_PIRID = ?, PIR_INCIDENT_PLACE_FREETEXT = ?, " );
		sqlStr.append("PIR_RESPONSIBLE_PARTY = ?, PIR_RESPONSIBLE_PARTY2 = ?, PIR_SENTINEL_EVENT = ?, PIR_SENTINEL_EVENT_ID = ?, ");
		sqlStr.append("PIR_PX_RESPONSIBLE_PARTY = ?, PIR_PX_RESPONSIBLE_PARTY2 = ?, PIR_PX_NURSE = ?, PIR_NEAR_MISS = ?, PIR_HAZARDOUS_CONDITION = ?, ");
		sqlStr.append("PIR_INCIDENT_TYPE_PI = ?, PIR_INCIDENT_CLASS_PI = ?, ");
		sqlStr.append("PIR_DEPT_CODE_FLWUP = ?, PIR_RESPONSIBLE_PARTY_FLWUP = ? ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr_updatePIREPORT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_INVOLVE_PERSON ");
		sqlStr.append("SET PATNO = ?, STAFF_ID = ?, PERSON_NAME = ?, SEX = ?, AGE = ?, ");
		sqlStr.append("DATE_OF_BIRTH = TO_DATE(?,'dd/MM/YYYY'), RANK = ?, DEPT_CODE = ?, ");
		sqlStr.append("REMARK = ?, SAME_REPORT_PERSON = ?, RELATIONSHIP = ?, ");
		sqlStr.append("VISTOR_RELATIVES_OF_PATIENT = ?, VISTOR_RELATIVES_OF_STAFF = ?, ");
		sqlStr.append("PERSON_STATUS = ?, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ?, ");
		sqlStr.append("PHYSICIAN = ?, DIAGNOSIS = ?, TEL = ?, ADDR = ?, ");
		sqlStr.append("ENABLE = 1 ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr.append("AND	 PIR_IP_ID = ?");
		sqlStr_updatePIREPORT_INVOLVE_PERSON = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_CONTENT ");
		sqlStr.append("SET PI_VALUE = ?, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ?, ");
		sqlStr.append("ENABLE = 1 ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr.append("AND PI_CONTENT_ID = ? ");
		sqlStr_updatePIREPORT_CONTENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_INVOLVE_PERSON ");
		sqlStr.append("SET ENABLE = 0, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr_deletePIREPORT_INVOLVE_PERSON = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_CONTENT ");
		sqlStr.append("SET ENABLE = 0, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr_deletePIREPORT_CONTENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT P.PIRID, P.PI_FLW_ID, P.PI_TO, P.PI_DEPT, P.PI_EMAIL, P.PI_ACTION, ");
		sqlStr.append("P.PI_AUTO_REMIND, D.CO_DEPARTMENT_DESC ");
		sqlStr.append("FROM PI_REPORT_FLWUP P, CO_DEPARTMENTS D ");
		sqlStr.append("WHERE P.PIRID = ? ");
		sqlStr.append("AND P.ENABLE = 1 ");
		sqlStr.append("AND P.PI_DEPT = D.CO_DEPARTMENT_CODE (+) ");
		sqlStr.append("ORDER BY CREATE_DATE ASC ");
		sqlStr_fetchPIREPORT_FLWUP = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT P.PIRID, P.PI_FLW_ID, P.PI_REPLY_ID, P.PI_REPLY_MSG, TO_CHAR(P.MODIFIED_DATE, 'DD/MM/YYYY HH24:MI'), S.CO_STAFFNAME ");
		sqlStr.append("FROM PI_REPORT_FLW_REPLY P, CO_USERS U, CO_STAFFS S ");
		sqlStr.append("WHERE P.PIRID = ? ");
		sqlStr.append("AND P.PI_FLW_ID = ? ");
		sqlStr.append("AND ENABLE = 1 ");
		sqlStr.append("AND (U.CO_USERNAME = P.MODIFIED_USER OR U.CO_STAFF_ID = P.MODIFIED_USER) ");
		sqlStr.append("AND U.CO_STAFF_ID = S.CO_STAFF_ID ");
		sqlStr.append("ORDER BY CREATE_DATE ASC ");
		sqlStr_fetchPIREPORT_FLW_REPLY = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT ");
		sqlStr.append("SET PIR_STATUS = ?, ");
		sqlStr.append("PIR_MODIFIED_DATE = SYSDATE, PIR_MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr_updatePIREPORT_STATUS = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT ");
		sqlStr.append("SET PIR_ENABLED = ?, ");
		sqlStr.append("PIR_MODIFIED_DATE = SYSDATE, PIR_MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr_updatePIREPORT_ENABLE = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_FLWUP( ");
		sqlStr.append("PIRID, PI_FLW_ID, PI_TO, PI_DEPT, PI_EMAIL, PI_ACTION, PI_AUTO_REMIND, ");
		sqlStr.append("CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, ?, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_FLWUP = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_FLWUP ");
		sqlStr.append("SET PI_TO = ?, PI_DEPT = ?, PI_EMAIL = ?, PI_ACTION = ?, ");
		sqlStr.append("PI_AUTO_REMIND = ?, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? AND PI_FLW_ID = ? ");
		sqlStr_updatePIREPORT_FLWUP = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_FLW_REPLY( ");
		sqlStr.append("PIRID, PI_FLW_ID, PI_REPLY_ID, PI_REPLY_MSG, CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_FLWUP_REPLY = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_FLWUP_DIALOG_ADD_RPT( ");
		sqlStr.append("PIRID, PIR_ARID, PIR_AR_FROM, PIR_AR_DEPT_CODE, PIR_AR_DEPT_DESC, PIR_AR_CONTENT, CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, ?, ?, ? ,?) ");
		sqlStr_insertPIREPORT_FLWUP_DIALOG_ADDRPT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_FLW_REPLY ");
		sqlStr.append("SET PI_REPLY_MSG = ?, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? AND PI_FLW_ID = ? AND PI_REPLY_ID = ? ");
		sqlStr_updatePIREPORT_FLWUP_REPLY = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_FLWUP ");
		sqlStr.append("SET ENABLE = 0, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr_deletePIREPORT_FLWUP = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT_FLW_REPLY ");
		sqlStr.append("SET ENABLE = 0, MODIFIED_DATE = SYSDATE, MODIFIED_USER = ? ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr_deletePIREPORT_FLWUP_REPLY = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT P.PI_OPTION_ID, P.PI_PARENT_ID, P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("P.PI_OPTION_DESC, P.PI_ORDER, PI_REMARK, G.PI_CATEGORY_DESC ");
		sqlStr.append("FROM PI_REPORT_OPTION P, ");
		sqlStr.append("(SELECT PI_GRPID, PI_CATEGORY_DESC ");
		sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
		sqlStr.append("WHERE PI_ENABLED = 1 ");
		sqlStr.append("AND PI_GRP_TYPE = 'classification' ");
		sqlStr.append("AND PI_SITE_CODE = ?) G ");
		sqlStr.append("WHERE P.PI_GRPID = G.PI_GRPID ");
		sqlStr.append("AND P.PI_SITE_CODE = ? ");
		sqlStr.append("AND P.PI_ENABLED = 1 ");
		sqlStr.append("ORDER BY PI_ORDER ");
		sqlStr_fetchPIREPORT_CLASSISIFICATION = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PI_GRP_DESC, PI_CATEGORY_DESC, PI_DISPLAYGENERAL ");
		sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
		sqlStr.append("WHERE PI_ENABLED = 1 ");
		sqlStr.append("AND PI_GRP_TYPE = 'incident_type' ");
		sqlStr.append("AND PI_SITE_CODE = ? ");
		sqlStr.append("AND PI_GRPID = ? ");
		sqlStr.append("ORDER BY PI_ORDER ");
		sqlStr_fetchPIREPORT_INCIDENT_TYPE = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC ");
		sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
		sqlStr.append("WHERE PI_PARENT_GRPID IS NULL ");
		sqlStr.append("AND PI_ENABLED = 1 ");
		sqlStr.append("AND PI_SITE_CODE = ? ");
		sqlStr.append("AND PI_MODULE_CODE = ? ");
		sqlStr.append("AND (PI_GRP_TYPE = 'category' OR PI_GRP_TYPE = 'group') ");
		sqlStr.append("ORDER BY PI_ORDER ");
		sqlStr_fetchPIREPORT_HEAD = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC ");
		sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
		sqlStr.append("WHERE PI_PARENT_GRPID = ? ");
		sqlStr.append("AND PI_ENABLED = 1 ");
		sqlStr.append("AND PI_SITE_CODE = ? ");
		sqlStr.append("AND PI_MODULE_CODE = ? ");
		sqlStr.append("AND PI_GRP_TYPE = 'category' ");
		sqlStr.append("ORDER BY PI_ORDER ");
		sqlStr_fetchPIREPORT_SUBHEAD = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PI_OPTION_ID, PI_GRPID, PI_OPTION_TYPE, PI_OPTION_DESC, PI_STYLE_COL, ");
		sqlStr.append("       PI_STYLE_SUBCONTENT, PI_STYLE_COPYABLE, PI_HAS_CHILD, PI_ORDER, PI_REMARK, PI_PARENT_ID, '', '', '' ");
		sqlStr.append("FROM   PI_REPORT_OPTION ");
		sqlStr.append("WHERE (PI_GRPID = ? ");
		sqlStr.append("OR     PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("AND    PI_ENABLED = 1 ");
		sqlStr_fetchPIREPORT_DETAIL = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC ");
		sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
		sqlStr.append("WHERE PI_PARENT_GRPID IS NULL ");
		sqlStr.append("AND PI_ENABLED = 1 ");
		sqlStr.append("AND PI_SITE_CODE = ? ");
		sqlStr.append("AND PI_MODULE_CODE = ? ");
		sqlStr.append("AND ((PI_GRP_TYPE = 'category' ");
		sqlStr.append("AND PI_GRPID in ( ");
		sqlStr.append("                  SELECT DISTINCT PI_GRPID ");
		sqlStr.append("                  FROM PI_REPORT_CONTENT ");
		sqlStr.append("                  WHERE PIRID = ? ");
		sqlStr.append("                  AND ENABLE = 1)) ");
		sqlStr.append("OR PI_GRP_TYPE = 'group') ");
		sqlStr.append("ORDER BY PI_ORDER ");
		sqlStr_fetchPIREPORT_HEAD_view = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PI_GRPID, PI_GRP_TYPE, PI_GRP_DESC, PI_CATEGORY_DESC ");
		sqlStr.append("FROM PI_REPORT_OPTION_GROUP ");
		sqlStr.append("WHERE PI_PARENT_GRPID = ? ");
		sqlStr.append("AND PI_ENABLED = 1 ");
		sqlStr.append("AND PI_SITE_CODE = ? ");
		sqlStr.append("AND PI_MODULE_CODE = ? ");
		sqlStr.append("AND PI_GRP_TYPE = 'category' ");
		sqlStr.append("AND PI_GRPID in ( ");
		sqlStr.append("                  SELECT DISTINCT PI_GRPID ");
		sqlStr.append("                  FROM PI_REPORT_CONTENT ");
		sqlStr.append("                  WHERE PIRID = ? ");
		sqlStr.append("                  AND ENABLE = 1) ");
		sqlStr.append("ORDER BY PI_ORDER ");
		sqlStr_fetchPIREPORT_SUBHEAD_view = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT * ");
		sqlStr.append("FROM( ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID, P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, Con.PI_VALUE, Con.PI_CONTENT_GRPID, Con.PI_CONTENT_ID ");
		sqlStr.append("   FROM   PI_REPORT_CONTENT Con, PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    Con.PI_GRPID = P.PI_GRPID ");
		sqlStr.append("   AND    Con.ENABLE = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID = Con.PI_OPTION_ID(+) ");
		sqlStr.append("   AND    Con.PIRID = ? ");
		sqlStr.append("   AND    P.PI_PARENT_ID IS NULL)) ");
		sqlStr.append("   UNION ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID, P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, '', 1, 0 ");
		sqlStr.append("   FROM   PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID NOT IN ( ");
		sqlStr.append("                           SELECT DISTINCT PI_OPTION_ID ");
		sqlStr.append("		                      FROM   PI_REPORT_CONTENT ");
		sqlStr.append("                           WHERE  PIRID = ? ");
		sqlStr.append("                  		  AND    ENABLE = 1) ");
		sqlStr.append("   AND P.PI_PARENT_ID IS NULL))) ");
		sqlStr.append("ORDER BY PI_ORDER ");
		sqlStr_fetchPIREPORT_DETAIL_view = sqlStr.toString();
		
		sqlStr.setLength(0);
		sqlStr.append("SELECT * ");
		sqlStr.append("FROM( ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID, P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, Con.PI_VALUE, Con.PI_CONTENT_GRPID, Con.PI_CONTENT_ID ");
		sqlStr.append("   FROM   PI_REPORT_CONTENT Con, PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    Con.PI_GRPID = P.PI_GRPID ");
		sqlStr.append("   AND    Con.ENABLE = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID = Con.PI_OPTION_ID(+) ");
		sqlStr.append("   AND    Con.PIRID = ? ");
		sqlStr.append("   AND    P.PI_PARENT_ID = ?)) ");
		sqlStr.append("   UNION ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID, P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, '', 1, 0 ");
		sqlStr.append("   FROM   PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID NOT IN ( ");
		sqlStr.append("                           SELECT DISTINCT PI_OPTION_ID ");
		sqlStr.append("                           FROM   PI_REPORT_CONTENT ");
		sqlStr.append("                           WHERE  PIRID = ? ");
		sqlStr.append("                           AND    ENABLE = 1) ");
		sqlStr.append("   AND P.PI_PARENT_ID = ?))) ");
		sqlStr.append("ORDER BY PI_CONTENT_GRPID, PI_ORDER ");
		sqlStr_fetchPIREPORT_SUBDETAIL_view = sqlStr.toString();
						
		sqlStr.setLength(0);		
		sqlStr.append("SELECT * ");
		sqlStr.append("FROM ( ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID, P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, Con.PI_VALUE, Con.PI_CONTENT_GRPID, Con.PI_CONTENT_ID ");
		sqlStr.append("   FROM   PI_REPORT_CONTENT Con, PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    Con.PI_GRPID = P.PI_GRPID ");
		sqlStr.append("   AND    Con.ENABLE = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID = Con.PI_OPTION_ID (+) ");
		sqlStr.append("   AND    Con.PIRID = ? ");
		sqlStr.append("   AND    Con.PI_CONTENT_GRPID = ? ");
		sqlStr.append("   AND    P.PI_PARENT_ID = ?)) ");
		sqlStr.append("   UNION ");
		sqlStr.append(" (SELECT * FROM ");
		sqlStr.append("  (SELECT P.PI_OPTION_ID, P.PI_GRPID, P.PI_OPTION_TYPE, ");
		sqlStr.append("          P.PI_OPTION_DESC, P.PI_STYLE_COL, ");
		sqlStr.append("          P.PI_STYLE_SUBCONTENT, P.PI_STYLE_COPYABLE, P.PI_HAS_CHILD, P.PI_ORDER, ");
		sqlStr.append("          P.PI_REMARK, P.PI_PARENT_ID, '', TO_NUMBER(?), 0 ");
		sqlStr.append("   FROM   PI_REPORT_OPTION P ");
		sqlStr.append("   WHERE (P.PI_GRPID = ? ");
		sqlStr.append("   OR     P.PI_GRPID IN (SELECT PI_GRPID_TO FROM PI_REPORT_OPTION_LINK WHERE PI_GRPID_FROM = ?)) ");
		sqlStr.append("   AND    P.PI_ENABLED = 1 ");
		sqlStr.append("   AND    P.PI_OPTION_ID NOT IN ( ");
		sqlStr.append("                           SELECT DISTINCT PI_OPTION_ID ");
		sqlStr.append("                           FROM   PI_REPORT_CONTENT ");
		sqlStr.append("                           WHERE  PIRID = ? ");
		sqlStr.append("                           AND    PI_CONTENT_GRPID = ? ");
		sqlStr.append("                           AND    ENABLE = 1) ");
		sqlStr.append("   AND P.PI_PARENT_ID = ?))) ");
		sqlStr.append("ORDER BY PI_CONTENT_GRPID, PI_ORDER ");
		sqlStr_fetchPIREPORT_SUBDETAIL_edit = sqlStr.toString();	

		sqlStr.setLength(0);
		sqlStr.append("SELECT PIRID, PI_FLW_ID, TO_CHAR(CREATE_DATE, 'DD/MM/YYYY HH:MM') ");
		sqlStr.append("FROM PI_REPORT_FLWUP ");
		sqlStr.append("WHERE ENABLE = 1 ");
		sqlStr.append("AND PIRID = ? ");
		sqlStr.append("ORDER BY CREATE_DATE DESC ");
		sqlStr_fetchPIREPORT_FLWUP_LIST = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PIRID, PI_FLW_ID,PI_TO,PI_CC,PI_BCC,PI_ACTION,PI_REMARK,PI_EMAIL,PI_AUTO_REMIND,PI_STATUS, TO_CHAR(CREATE_DATE, 'DD/MM/YYYY HH:MM') ");
		sqlStr.append("FROM PI_REPORT_FLWUP ");
		sqlStr.append("WHERE ENABLE = 1 ");
		sqlStr.append("AND PIRID = ? ");
		sqlStr.append("AND PI_FLW_ID = ? ");
		sqlStr.append("ORDER BY CREATE_DATE DESC ");
		sqlStr_fetchPIREPORT_FLWUP_MESSAGE = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("SELECT PIRID, PI_FLW_ID,PI_REPLY_ID,PI_REPLY_MSG,CREATE_USER, TO_CHAR(CREATE_DATE, 'DD/MM/YYYY HH:MM') ");
		sqlStr.append("FROM PI_REPORT_FLW_REPLY ");
		sqlStr.append("WHERE ENABLE = 1 ");
		sqlStr.append("AND PIRID = ? ");
		sqlStr.append("AND PI_FLW_ID = ? ");
		sqlStr.append("ORDER BY CREATE_DATE ASC ");
		sqlStr_fetchPIREPORT_FLWUP_ALLREPLY = sqlStr.toString();

		// FLWUP_DIALOG
		// SHOWS INCIDENT REPORT - BASIC INFO
		sqlStr.setLength(0);
		sqlStr.append("select pr.pir_pname, pr.pir_rank, cd.co_department_desc, to_char(pr.pir_incident_date, 'dd/mm/yyyy'), ");
		sqlStr.append("pr.pir_incident_time, pr.pir_incident_place, pr.pir_rel_pirid, pr.PIR_RESPONSIBLE_PARTY, pr.PIR_RESPONSIBLE_PARTY2, ");
		sqlStr.append("PIR_SENTINEL_EVENT, PIR_SENTINEL_EVENT_ID, PI_DESC, pir_incident_place_freetext, PIR_NEAR_MISS, PIR_RESPONSIBLE_PARTY_FLWUP ");
		sqlStr.append("from pi_report pr ");
		sqlStr.append("join co_departments cd on cd.co_department_code = pr.pir_dept_code ");
		sqlStr.append("left outer join pi_reporT_sentinel on PIR_SENTINEL_EVENT_ID = PI_ID ");
		sqlStr.append("WHERE PR.PIRID = ? ");
		sqlStr.append("AND PR.PIR_ENABLED = 1 ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_BASIC_INFO = sqlStr.toString();

		// SHOWS INCIDENT REPORT - INVOLVED PERSON
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_INVOLVE_PERSON = "";

		// SHOWS INCIDENT REPORT - REPORT MST
		sqlStr.setLength(0);
		sqlStr.append("select prog.pi_order, prog.pi_grpid, prog.pi_grp_desc " );
		sqlStr.append("from pi_report_content prc ");
		sqlStr.append("join pi_report_option_group prog on prc.pi_grpid = prog.pi_grpid ");
		sqlStr.append("where prc.pirid = ? ");
		sqlStr.append("AND	 PRC.ENABLE = 1 ");
		sqlStr.append("group by prog.pi_order, prog.pi_grpid, prog.pi_grp_desc order by prog.pi_order ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_INCIDENT_REPORT_MST = sqlStr.toString();

		// SHOWS INCIDENT REPORT - REPORT DTL
		sqlStr.setLength(0);
		sqlStr.append("select pro.pi_option_desc, prc.pi_value, prog.pi_category_desc, pro.pi_option_id, pro.pi_disp_parent_id, pro2.pi_option_desc ");
		sqlStr.append("from pi_report_content prc ");
		sqlStr.append("join pi_report_option_group prog on prc.pi_grpid = prog.pi_grpid ");
		sqlStr.append("join pi_report_option pro on prog.pi_grpid = pro.pi_grpid and prc.pi_option_id = pro.pi_option_id ");
		sqlStr.append("left outer join pi_report_option pro2 on prog.pi_grpid = pro2.pi_grpid and pro.pi_disp_parent_id = pro2.pi_option_id ");
		sqlStr.append("where prc.pirid = ? and prog.pi_grpid = ? ");
		sqlStr.append("AND PRC.ENABLE = 1  order by pro.pi_order");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_INCIDENT_REPORT_DTL = sqlStr.toString();

		// SHOWS Follow up Dialog
		sqlStr.setLength(0);
		sqlStr.append("SELECT P.PIRID, PIR_FLWID, decode(PIR_FLW_TYPE, 'Message', 'Discussion', PIR_FLW_TYPE), PIR_FLW_FROM, ");
		sqlStr.append("       TO_CHAR(PIR_FLW_DATE, 'DD/MM/YYYY hh24:mi:ss'), TO_CHAR(PIR_FLW_DUE_DATE, 'DD/MM/YYYY'), ");
		sqlStr.append("       TO_CHAR(PIR_FLW_COMPLETE_DATE, 'DD/MM/YYYY hh24:mi:ss'), cs.co_staffname, PIR_FLW_ACTION, ");
		sqlStr.append("       PIR_WFL_STATUS, PIR_RES_PARTY2, cs2.co_staffname ");
		sqlStr.append("FROM   PI_REPORT_FLWUP_DIALOG P, co_staffs cs, co_staffs cs2, PI_REPORT PR ");
		sqlStr.append("WHERE  P.PIRID = ? AND PR.PIRID = P.PIRID ");
		sqlStr.append("AND    P.PIR_FLW_TYPE in ('Message', 'Submit', 'Rejected', 'Redo' )");
		sqlStr.append("AND    P.ENABLE = 1 and p.PIR_RES_PARTY = cs.co_staff_id (+) and p.PIR_RES_PARTY2 = cs2.co_staff_id (+) ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG = sqlStr.toString();

		// SHOWS Follow up Dialog Content one by one
		sqlStr.setLength(0);
		sqlStr.append("SELECT PIR_FLW_ACTION ");
		sqlStr.append("FROM PI_REPORT_FLWUP_DIALOG P ");
		sqlStr.append("WHERE P.PIRID = ? ");
		sqlStr.append("AND   P.PIR_FLWID = ? ");
		sqlStr.append("AND   P.PIR_FLW_TYPE in ('Message', 'Submit', 'Rejected', 'Redo' )");
		sqlStr.append("AND   P.ENABLE = 1 ");
		sqlStr.append("ORDER BY CREATE_DATE DESC");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_CONTENT = sqlStr.toString();

		// SHOWS Follow up Additional Report Content one by one
		sqlStr.setLength(0);
		sqlStr.append("SELECT PIR_AR_CONTENT ");
		sqlStr.append("FROM PI_REPORT_FLWUP_DIALOG_ADD_RPT ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr.append("AND PIR_ARID = ? ");
		sqlStr.append("AND ENABLE = 1 ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_ADDRPT_CONTENT = sqlStr.toString();

		// SHOWS Follow up Dialog Content one by one
		sqlStr.setLength(0);
		sqlStr.append("SELECT PIR_REQUEST_CONTENT, PIR_REPLY_CONTENT ");
		sqlStr.append("FROM pi_report_pi_action_request ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr.append("AND pir_piid = ? ");
		sqlStr.append("AND ENABLE = 1 ");
		sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG_CONTENT = sqlStr.toString();

		// SHOWS Follow up Dialog
		sqlStr.setLength(0);
		sqlStr.append("select pir_flw_person, co_staffname ");
		sqlStr.append("from pi_report_flwup_dialog_person fu ");
		sqlStr.append("join co_staffs cs on fu.pir_flw_person = cs.co_staff_id ");
		sqlStr.append("WHERE PIRID = ? ");
		sqlStr.append("AND pir_flwid = ? ");
		sqlStr.append("AND ENABLE = 1 ");
		sqlStr.append("order by pir_flwpid ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_CC_LIST = sqlStr.toString();

		// SHOWS Follow up email info
		sqlStr.setLength(0);
		sqlStr.append("select co_Staffname, pir_flw_Action ");
		sqlStr.append("from pi_report_flwup_dialog ");
		sqlStr.append("join co_staffs on pir_flw_from = co_staff_id ");
		sqlStr.append("WHERE ENABLE = 1 ");
		sqlStr.append("AND PIRID = ? ");
		sqlStr.append("AND pir_flwid = ? ");
		sqlStr.append("AND PIR_FLW_TYPE = ? ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_EMAIL_INFO = sqlStr.toString();

		// SHOWS INCIDENT REPORT - Additional Report
		sqlStr.setLength(0);
		sqlStr.append("select pir_arid, decode(p.pir_ar_dept_code, '770', 'Administrator', '650', 'Administrator', '993', 'Administrator', '785', 'OSH/ICN', '870', 'PI', 'PI, 'PI', 'Dept Head/Duty Manager') , ");
		sqlStr.append("cu.co_firstname || ' ' || cu.co_lastname, p.pir_ar_dept_desc, p.pir_ar_content, to_char(p.create_date, 'dd/mm/yyyy hh24:mi') ");
		sqlStr.append("from pi_report_flwup_dialog_add_rpt p ");
		sqlStr.append("join co_users cu on cu.co_staff_id = p.pir_ar_from ");
		sqlStr.append("where P.PIRID = ? and p.pir_ar_dept_code = p.pir_ar_dept_code and enable = 1 ");
		sqlStr.append("order by create_date desc ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_ADDRPT = sqlStr.toString();

		// Get response person list
		sqlStr.setLength(0);
		sqlStr.append("select TO_CHAR(PIR_FLW_DATE, 'DD/MM/YYYY HH24:MI:SS'), PIR_FLW_TYPE, PIR_FLW_FROM, PIR_RES_PARTY, PIR_RES_PARTY2, PIR_WFL_STATUS, PIR_FLW_ACTION from pi_report_flwup_dialog where PIR_FLWID in ( ");
		sqlStr.append("select max(PIR_FLWID ) ");
		sqlStr.append("from pi_report_flwup_dialog ");
		sqlStr.append("where pirid = ? and PIR_FLW_TYPE in ('Submit', 'Redo') and enable = 1) ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_LATEST = sqlStr.toString();
		//
		sqlStr.setLength(0);
		sqlStr.append("select pir_flw_from from pi_report_flwup_dialog where PIR_FLWID in ( ");
		sqlStr.append("select max(PIR_FLWID ) ");
		sqlStr.append("from pi_report_flwup_dialog ");
		sqlStr.append("where pirid = ? and PIR_FLW_TYPE in ('Save') and enable = 1 ) ");
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_RESPONSE_PERSON_SAVEONLY = sqlStr.toString();

		// Get response person list
		sqlStr.setLength(0);
		sqlStr.append("SELECT pir_created_user FROM PI_REPORT WHERE PIRID = ? AND pir_site_code = ?");
		sqlStr_fetchPIREPORT_REPORT_CREATE_PERSON = sqlStr.toString();
		//

		// Insert Follow up Entry
		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_FLWUP_DIALOG( ");
		sqlStr.append("PIRID, PIR_FLWID, PIR_FLW_TYPE, PIR_FLW_DATE, PIR_FLW_FROM, ");
		sqlStr.append("PIR_FLW_DUE_DATE, PIR_FLW_COMPLETE_DATE, PIR_FLW_ACTION, PIR_RES_PARTY, PIR_RES_PARTY2, PIR_WFL_STATUS, ");
		sqlStr.append("CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, SYSDATE, ?, ");
		sqlStr.append("TO_DATE(?,'dd/MM/YYYY'), TO_DATE(?,'dd/MM/YYYY'), ?, ?, ?, ?, ");
		sqlStr.append("?, ?) ");
		sqlStr_insertPIREPORT_FLWUP_DIALOG = sqlStr.toString();

		// Insert Follow up - to person Entry
		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_FLWUP_DIALOG_PERSON ( ");
		sqlStr.append("PIRID, PIR_FLWID, PIR_FLWPID, PIR_FLW_PERSON, PIR_FLW_EMAIL, CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES (");
		sqlStr.append("?, ?, ?, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_FLWUP_DIALOG_TO = sqlStr.toString();

		// Dept Head Add follow up Comment
		sqlStr.setLength(0);
		sqlStr.append("SELECT PIRID, PIR_DID, PIR_VERSION, PIR_NARRATIVE, PIR_CASUE, PIR_ACTION_DONE, PIR_ACTION_TAKEN, PIR_STAFF_ID, "); //  0-7
		sqlStr.append("PIR_RISK_ASS, PIR_MON, PIR_INV, PIR_TREAT, PIR_HIGH_CARE, "); //  8-12
		sqlStr.append("PIR_MON_SPEC, PIR_INV_SPEC, PIR_TREAT_SPEC, PIR_HIGH_CARE_SEPC, "); //  13-16
		sqlStr.append("PIR_PERSON_FAULT, PIR_INADE_TRAIN, PIR_NO_PREVENT, PIR_MACH_FAULT, PIR_MISUSE, "); //  17-21
		sqlStr.append("PIR_INADE_INSTRU, PIR_INADE_EQUIP, PIR_POOR_QUAL, PIR_QUAL_DETECT, PIR_EXP_ITEM, "); //  22-26
		sqlStr.append("PIR_INADE_MAT, PIR_INST_NOT_FOLLOW, PIR_MOT_NATURE, PIR_NOISE, PIR_DIST_ENV, "); //  27-31
		sqlStr.append("PIR_UNV_FLOOR, PIR_SLIP, PIR_IM, PIR_CULTURE, PIR_LEADER, PIR_OTHER, PIR_OTHER_SPEC, "); //  32-38
		sqlStr.append("PIR_FAILURECOMPLY, " ); //  39
		sqlStr.append("PIR_SAMEDRUG, PIR_INAPPABB, PIR_ORDERMIS, PIR_LASA, PIR_LAPSES, "); //  40-44
		sqlStr.append("PIR_EQUIPFAILURE, PIR_ILLEGALHAND, PIR_MISCAL, PIR_SYSTEMFLAW, PIR_INADTRAINSTAFF, "); //  45-49
		sqlStr.append("PIR_OTHERSFREETEXT, PIR_OTHERSFREETEXTEDIT, PUR_RELATEDSTAFF, PIR_SHARESTAFF, TO_CHAR(PIR_SHARESTAFFDATE,'dd/MM/YYYY'), "); //  50-54
		sqlStr.append("PIR_NOAFFECT, PIR_NOHARM, PIR_TEMPHARM, PIR_PERMHARM, PIR_DEATH, "); //  55-59
		sqlStr.append("PIR_NARRATIVE_OSHICN, PIR_CASUE_OSHICN, PIR_ACTION_DONE_OSHICN, PIR_ACTION_TAKEN_OSHICN, "); //  60-63
		sqlStr.append("PIR_NARRATIVE_ADMIN, PIR_CASUE_ADMIN, PIR_ACTION_DONE_ADMIN, PIR_ACTION_TAKEN_ADMIN, "); //  64-68
		sqlStr.append("PIR_NARRATIVE_PI, PIR_CASUE_PI, PIR_ACTION_DONE_PI, PIR_ACTION_TAKEN_PI, "); //   //  69-72
		sqlStr.append("PIR_CONTAMIN, PIR_NONCONTAMIN, PIR_BODYFLUEXP, "); //  73-75
		sqlStr.append("PIR_ADMIN_VIEWED, PIR_ADMIN_HAS_COMMENT, "); //  76-77
		sqlStr.append("PIR_STAFF_EDU, PIR_STAFF_EDU_TEXT, PIR_STAFF_DISC, PIR_STAFF_DISC_TEXT, PIR_CONS, PIR_CONS_TEXT, "); //  78-83
		sqlStr.append("PIR_SHAR, PIR_SHAR_TEXT1, PIR_SHAR_TEXT2, PIR_REV_POL, PIR_REV_POL_TEXT, PIR_REV_FORM, PIR_REV_FORM_TEXT, "); //  84-90
		sqlStr.append("PIR_CRE_FORM, PIR_CRE_FORM_TEXT, PIR_REFER, PIR_REFER_TEXT, PIR_REFER_DEPT, PIR_OTHERS, "); //  91-96
		sqlStr.append("PIR_OSH_SLDAYS, PIR_OSH_LABDEPT, PIR_OSH_PATINV, PIR_OSH_LABDEPT_REMARK, PIR_OSH_POLICE, PIR_OSH_IOD, "); //  97-102
		sqlStr.append("PIR_NARRATIVE_FLWUP, PIR_CASUE_FLWUP, PIR_ACTION_DONE_FLWUP, PIR_ACTION_TAKEN_FLWUP, PIR_NARRATIVE_DM, PIR_CASUE_DM, PIR_ACTION_DONE_DM, PIR_ACTION_TAKEN_DM "); //  103-110
		sqlStr.append("FROM pi_report_dhead_comment ");
		sqlStr.append("WHERE ENABLE = 1 ");
		sqlStr.append("AND PIRID = ? ");
		sqlStr_fetchPIREPORT_DHEAD_COMMENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO PI_REPORT_DHEAD_COMMENT_SAFE ( ");
		sqlStr.append("SEQ_NO, PIRID, STATUS, STAFF_ID, INSERT_DATE, PIR_NARRATIVE, PIR_CASUE, PIR_ACTION_DONE, PIR_ACTION_TAKEN) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, sysdate, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_DHEAD_COMMENT_SAFE_BACKUP = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO pi_report_dhead_comment ( ");
		sqlStr.append("PIRID, PIR_DID, PIR_VERSION, PIR_NARRATIVE, PIR_CASUE, PIR_ACTION_DONE, PIR_ACTION_TAKEN, PIR_STAFF_ID, CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?, ?, ?, ? ,?, ? ,?) ");
		sqlStr_insertPIREPORT_DHEAD_COMMENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET PIR_FAILURECOMPLY = ?, ");
		sqlStr.append("PIR_SAMEDRUG = ?, PIR_INAPPABB = ?, PIR_ORDERMIS = ?, PIR_LASA = ?, PIR_LAPSES = ?, ");
		sqlStr.append("PIR_EQUIPFAILURE = ?, PIR_ILLEGALHAND = ?, PIR_MISCAL = ?, PIR_SYSTEMFLAW = ?, PIR_INADTRAINSTAFF = ?, ");
		sqlStr.append("PIR_OTHERSFREETEXT = ?, PIR_OTHERSFREETEXTEDIT = ?, PUR_RELATEDSTAFF = ?, PIR_SHARESTAFF = ?, PIR_SHARESTAFFDATE = TO_DATE(?,'dd/MM/YYYY hh24:mi'), ");
		sqlStr.append("PIR_NOAFFECT = ?, PIR_NOHARM = ?, PIR_TEMPHARM = ?, PIR_PERMHARM = ?, PIR_DEATH = ?, ");
		sqlStr.append("PIR_CONTAMIN = ?, PIR_NONCONTAMIN = ?, PIR_BODYFLUEXP = ?, ");
		sqlStr.append("PIR_OSH_SLDAYS = ?, PIR_OSH_LABDEPT = ?, PIR_OSH_PATINV = ?, PIR_OSH_LABDEPT_REMARK = ?, PIR_OSH_POLICE = ?,  PIR_OSH_IOD = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET PIR_NARRATIVE = ?, PIR_CASUE = ?, PIR_ACTION_DONE = ?, PIR_ACTION_TAKEN = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_DHEAD = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET PIR_NARRATIVE_OSHICN = ?, PIR_CASUE_OSHICN = ?, PIR_ACTION_DONE_OSHICN = ?, PIR_ACTION_TAKEN_OSHICN = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_OSHICN = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET PIR_NARRATIVE_ADMIN = ?, PIR_CASUE_ADMIN = ?, PIR_ACTION_DONE_ADMIN = ?, PIR_ACTION_TAKEN_ADMIN = ?, PIR_ADMIN_VIEWED = ?, PIR_ADMIN_HAS_COMMENT = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_ADMIN = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET PIR_NARRATIVE_PI = ?, PIR_CASUE_PI = ?, PIR_ACTION_DONE_PI = ?, PIR_ACTION_TAKEN_PI = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_PI = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET PIR_NARRATIVE_FLWUP = ?, PIR_CASUE_FLWUP = ?, PIR_ACTION_DONE_FLWUP = ?, PIR_ACTION_TAKEN_FLWUP = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_FLWUP = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET PIR_NARRATIVE_DM = ?, PIR_CASUE_DM = ?, PIR_ACTION_DONE_DM = ?, PIR_ACTION_TAKEN_DM = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_UMDM = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET ");
		sqlStr.append("PIR_STAFF_EDU = ?, PIR_STAFF_EDU_TEXT = ?, PIR_STAFF_DISC = ?, PIR_STAFF_DISC_TEXT = ?,");
		sqlStr.append("PIR_CONS = ?, PIR_CONS_TEXT = ?, PIR_SHAR = ?, PIR_SHAR_TEXT1 = ?, PIR_SHAR_TEXT2 = ?, ");
		sqlStr.append("PIR_REV_POL = ?, PIR_REV_FORM = ?, PIR_CRE_FORM = ?, ");
		sqlStr.append("PIR_REFER = ?, PIR_REFER_TEXT = ?, PIR_REFER_DEPT = ?, ");
		sqlStr.append("PIR_OTHERS = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_OTHER = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_dhead_comment ");
		sqlStr.append("SET ");
		sqlStr.append("PIR_RISK_ASS = ?, ");
		sqlStr.append("PIR_MON = ?, PIR_INV = ?, PIR_TREAT = ?, PIR_HIGH_CARE = ?, ");
		sqlStr.append("PIR_MON_SPEC = ?, PIR_INV_SPEC = ?, PIR_TREAT_SPEC = ?, PIR_HIGH_CARE_SEPC = ?, ");
		sqlStr.append("PIR_PERSON_FAULT = ?, PIR_INADE_TRAIN = ?, PIR_NO_PREVENT = ?, PIR_MACH_FAULT = ?, PIR_MISUSE = ?, ");
		sqlStr.append("PIR_INADE_INSTRU = ?, PIR_INADE_EQUIP = ?, PIR_POOR_QUAL = ?, PIR_QUAL_DETECT = ?, PIR_EXP_ITEM = ?, ");
		sqlStr.append("PIR_INADE_MAT = ?, PIR_INST_NOT_FOLLOW = ?, PIR_MOT_NATURE = ?, PIR_NOISE = ?, PIR_DIST_ENV = ?, ");
		sqlStr.append("PIR_UNV_FLOOR = ?, PIR_SLIP = ?, PIR_IM = ?, PIR_CULTURE = ?, PIR_LEADER = ?, PIR_OTHER = ?, PIR_OTHER_SPEC = ? ");
		sqlStr.append("WHERE PIR_DID = ? ");
		sqlStr_updatePIREPORT_DHEAD_COMMENT2 = sqlStr.toString();

		// Px Staff Add follow up Comment
		sqlStr.setLength(0);
		sqlStr.append("SELECT PIRID, PIR_PXID, PIR_RISK_ASS, PIR_HIGH_ALERT, ");
		sqlStr.append("PIR_BEFORE_WARD, PIR_BEFORE_OUTPAT, PIR_AFTER_WARD_INV, PIR_AFTER_WARD_GIVEN, PIR_AFTER_OUTPAT_NOTTAKEN, ");
		sqlStr.append("PIR_AFTER_OUTPAT_TAKEN, PIR_BEFORE_DISCHARGE, PIR_AFTER_DISCHARGE, PIR_BEFORE_ADMIN, PIR_AFTER_ADMIN, ");
		sqlStr.append("PIR_BEFORE_ADMIN_UNIT, PIR_AFTER_ADMIN_UNIT, PIR_CAUSE_REACTION ");
		sqlStr.append("FROM pi_report_px_comment ");
		sqlStr.append("WHERE ENABLE = 1 ");
		sqlStr.append("AND PIRID = ? ");
		sqlStr_fetchPIREPORT_PX_COMMENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO pi_report_px_comment ( ");
		sqlStr.append("PIRID, PIR_PXID, CREATE_USER, MODIFIED_USER) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_PX_COMMENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("INSERT INTO pi_report_pi_action_request ( ");
		sqlStr.append("PIRID, PIR_PIID, PIR_ACTION_REQUEST, PIR_COMP_DATE, PIR_REQUEST_STAFF, PIR_REQUEST_CONTENT, AUTO_REMINDER, CREATE_USER, MODIFIED_USER, REQ_TYPE) ");
		sqlStr.append("VALUES ( ");
		sqlStr.append("?, ?, ?, TO_DATE(?,'dd/MM/YYYY hh24:mi'), ?, ?, ?, ?, ?, ?) ");
		sqlStr_insertPIREPORT_PI_COMMENT = sqlStr.toString();

//		sqlStr.setLength(0);
//		sqlStr.append("UPDATE pi_report_pi_action_request ");
//		sqlStr.append("SET PIR_REPLY_CONTENT = ?, MODIFIED_USER = ?, MODIFIED_DATE = sysdate  ");
//		sqlStr.append("WHERE PIRID = ? and PIR_PIID = ? ");
//		sqlStr_updatePIREPORT_PI_COMMENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE pi_report_px_comment ");
		sqlStr.append("SET PIR_RISK_ASS = ?, ");
		sqlStr.append("PIR_HIGH_ALERT = ?, PIR_BEFORE_WARD = ?, PIR_BEFORE_OUTPAT = ?, PIR_AFTER_WARD_INV = ?, ");
		sqlStr.append("PIR_AFTER_WARD_GIVEN = ?, PIR_AFTER_OUTPAT_NOTTAKEN = ?, PIR_AFTER_OUTPAT_TAKEN = ?, PIR_BEFORE_DISCHARGE = ?, ");
		sqlStr.append("PIR_AFTER_DISCHARGE = ?, PIR_BEFORE_ADMIN = ?, PIR_AFTER_ADMIN = ?, PIR_BEFORE_ADMIN_UNIT = ?, ");
		sqlStr.append("PIR_AFTER_ADMIN_UNIT = ?, PIR_CAUSE_REACTION = ? ");
		sqlStr.append("WHERE PIR_PXID = ? ");
		sqlStr_updatePIREPORT_PX_COMMENT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("update pi_report_flwup_dialog set pir_res_party = ? where pirid = ? and pir_flw_type in ('Submit', 'Redo') ");
		sqlStr.append("and pir_flwid in (");
		sqlStr.append("select max(pir_flwid) from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_flw_type in ('Submit', 'Redo')) ");
		sqlStr_updatePIREPORT_FLWUP_DIALOG_PIR_RES_PARTY2 = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT SET PIR_TRAFFIC_LIGHT = ?, PIR_PI_REMARK = ?, PIR_PI_REMARK2 = ?, PIR_PI_REMARK3 = ? WHERE PIRID = ? ");
		sqlStr_updatePIREPORT_TRAFFIC_LIGHT = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT SET PIR_PI_REMARK_DON = ? WHERE PIRID = ? ");
		sqlStr_updateDONREPORT_REMARK = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT SET PIR_PI_REMARK_VPA = ? WHERE PIRID = ? ");
		sqlStr_updateVPAREPORT_REMARK = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT SET PIR_UMDM_REMARK = ? WHERE PIRID = ? ");
		sqlStr_updatePIREPORT_UMDMREMARK = sqlStr.toString();

		sqlStr.setLength(0);
		sqlStr.append("UPDATE PI_REPORT SET PIR_PI_ASS_INJURY = ? WHERE PIRID = ? ");
		sqlStr_updatePIREPORT_PI_ASS_INJURY = sqlStr.toString();

		// SHOWS Action Request Dialog
		sqlStr.setLength(0);
		sqlStr.append("select PIRID, PIR_PIID, ");
		sqlStr.append("decode(PIR_ACTION_REQUEST, '1', 'Provide general comment on the incident', '2', 'Provide photocopy of related patient information', '3', 'Provide report from related staff in your department', '4', 'Provide investigation report on the incident', '5', 'Recommend preventive/remedial measures', '6', 'Please send the Post Incident Examination form to PI department', '7', 'Others'), ");
		sqlStr.append("to_char(PIR_COMP_DATE, 'dd/mm/yyyy'), PIR_REQUEST_STAFF, PIR_REQUEST_CONTENT, ");
		sqlStr.append("PIR_REPLY_CONTENT, AUTO_REMINDER, to_char(modified_date, 'dd/mm/yyyy'), to_char(create_date, 'dd/mm/yyyy'), ");
		sqlStr.append("req_type, create_user, cs.co_staffname ");
		sqlStr.append("FROM pi_report_pi_action_request ");
		sqlStr.append("join co_staffs cs on cs.co_staff_id = create_user ");
		sqlStr.append("WHERE PIRID = ? and enable = 1 ");
//		sqlStr.append("ORDER BY CREATE_DATE DESC");
		sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG = sqlStr.toString();

		// SHOWS Action Request Dialog by excelRow
		sqlStr.setLength(0);
		sqlStr.append("select PIRID, PIR_PIID, ");
		sqlStr.append("decode(PIR_ACTION_REQUEST, '1', 'Provide general comment on the incident', '2', 'Provide photocopy of related patient information', '3', 'Provide report from related staff in your department', '4', 'Provide investigation report on the incident', '5', 'Recommend preventive/remedial measures', '6', 'Please send the Post Incident Examination form to PI department', '7', 'Others'), ");
		sqlStr.append("to_char(PIR_COMP_DATE, 'dd/mm/yyyy'), PIR_REQUEST_STAFF, PIR_REQUEST_CONTENT, ");
		sqlStr.append("PIR_REPLY_CONTENT, AUTO_REMINDER, CREATE_USER ");
		sqlStr.append("FROM pi_report_pi_action_request ");
		sqlStr.append("WHERE PIRID = ? and PIR_PIID = ? ");
		sqlStr.append("ORDER BY CREATE_DATE DESC");
		sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG_BYROW = sqlStr.toString();

		// excel export
		sqlStr.setLength(0);
		sqlStr.append("SELECT P.PIRID, P.PIR_PNAME, P.PIR_RANK, D.CO_DEPARTMENT_DESC, ");
		sqlStr.append("DECODE(P.PIR_INCIDENT_DATE, null, '', ");
		sqlStr.append("TO_CHAR(P.PIR_INCIDENT_DATE, 'DD/MM/YYYY') ||' '||P.PIR_INCIDENT_TIME), ");
		sqlStr.append("P.PIR_INCIDENT_PLACE, P.PIR_INCIDENT_CLASS_PI, ");
		//sqlStr.append("DECODE(P.PIR_STATUS, 0, 'Wait for Reporter Resubmit', 1, 'Wait for Investigation', 2, 'Wait for Administrator', 3, 'Wait for PI', 4, 'Wait for CEO', 5, 'Reporting Process Completed', 6, 'Rejected', 7, 'Wait for OSH/ICN', 8, '', 9, '', 10, 'Wait for Others', 11, 'Wait for Referring to OSH/ICN'), ");
		sqlStr.append("P.PIR_STATUS, ");
		sqlStr.append("TO_CHAR(P.PIR_CREATED_DATE, 'DD/MM/YYYY'), ");
		sqlStr.append("PI.PI_OPTION_DESC, PC.PI_VALUE, PIR_TRAFFIC_LIGHT, PC_notify_dr.PI_VALUE , PC_not_notify_dr.PI_VALUE , PI.PI_OPTION_ID, ");
		sqlStr.append("DH.PIR_RISK_ASS, ");
		sqlStr.append("decode(DH.PIR_NOAFFECT, null, '0', '1', 'No Affect', '0'), ");
		sqlStr.append("decode(DH.PIR_NOHARM, null, '0', '1', 'Caused No Harm', '0'), ");
		sqlStr.append("decode(DH.PIR_TEMPHARM, null, '0', '1', 'Caused Temporary Harm', '0'), ");
		sqlStr.append("decode(DH.PIR_PERMHARM, null, '0', '1', 'Caused Permanent Harm', '0'), ");
		sqlStr.append("decode(DH.PIR_DEATH, null, '0', '1', 'Causing Death', '0'), ");
		sqlStr.append("P.PIR_INCIDENT_TIME, P.PIR_PI_REMARK, PC_notify_dr2.PI_VALUE, P.PIR_PI_REMARK2, P.PIR_PI_REMARK3, ' ', ");
				//D2.CO_DEPARTMENT_DESC, ");
		sqlStr.append("PC_notify_dr3.PI_VALUE, ");
		sqlStr.append("decode(P.PIR_PI_ASS_INJURY, null, null, '0', 'No Affect', '1', 'Caused No Harm', '2', 'Caused Temporary Harm', '3', 'Caused Permanent Harm', '4', 'Causing Death', '5', 'NA' ) pi_ass_injury, ");
		sqlStr.append("pd.pir_narrative, pd.pir_narrative_oshicn, p.PIR_INCIDENT_CLASS_PI, ");
		sqlStr.append("ph.pir_risk_ass, ");
		sqlStr.append("pd.PIR_PERSON_FAULT, pd.PIR_INADE_TRAIN, pd.PIR_NO_PREVENT, pd.PIR_MACH_FAULT, pd.PIR_MISUSE, ");
		sqlStr.append("pd.PIR_INADE_INSTRU, pd.PIR_INADE_EQUIP, pd.PIR_POOR_QUAL, pd.PIR_QUAL_DETECT, pd.PIR_EXP_ITEM, ");
		sqlStr.append("pd.PIR_INADE_MAT, pd.PIR_INST_NOT_FOLLOW, pd.PIR_MOT_NATURE, pd.PIR_NOISE, pd.PIR_DIST_ENV, ");
		sqlStr.append("pd.PIR_UNV_FLOOR, pd.PIR_SLIP, pd.PIR_IM, pd.PIR_CULTURE, pd.PIR_LEADER, pd.PIR_OTHER, pd.PIR_OTHER_SPEC, ");
		sqlStr.append("case when to_date('01' || to_char(p.create_Date, 'mmyyyy'), 'ddmmyyyy') > to_date(to_char(P.PIR_INCIDENT_DATE, 'ddmmyyyy'), 'ddmmyyyy') then 'Y' else 'N' end late_report, ");
		sqlStr.append("P.PIR_INCIDENT_PLACE_FREETEXT ");
		if (ConstantsServerSide.isTWAH()) {
			sqlStr.append(", PC_notify_dr_tw.pi_value ");
		}
		sqlStr.append("FROM PI_REPORT P ");
		sqlStr.append("join PI_REPORT_OPTION PI on PI.PI_OPTION_ID = P.PIR_INCIDENT_CLASS_PI ");
		//sqlStr.append("join PI_REPORT_OPTION PO on PO.PI_OPTION_ID = P.PIR_INCIDENT_CLASSIFICATION ");
		sqlStr.append("join pi_report_dhead_comment pd on pd.pirid = P.pirid ");
		sqlStr.append("left outer join CO_DEPARTMENTS D on P.PIR_DEPT_CODE = D.CO_DEPARTMENT_CODE ");
		sqlStr.append("left outer join PI_REPORT_CONTENT PC ON PC.PIRID = P.PIRID AND PC.PI_OPTION_ID IN ('284', ");
		if (ConstantsServerSide.isHKAH()) {
			sqlStr.append("'317', ");
			sqlStr.append("'599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '621') AND PC.PIR_ENABLED = '1' "); // for Narra Desc in Other Incident
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_notify_dr ON PC_notify_dr.PIRID = P.PIRID AND PC_notify_dr.PI_OPTION_ID IN ('275') AND PC_notify_dr.PIR_ENABLED = '1' "); // for doctor notified ? Attending physician
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_notify_dr2 ON PC_notify_dr2.PIRID = P.PIRID AND PC_notify_dr2.PI_OPTION_ID IN ('276') AND PC_notify_dr2.PIR_ENABLED = '1' "); // for doctor notified ? House physician
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_notify_dr3 ON PC_notify_dr3.PIRID = P.PIRID AND PC_notify_dr3.PI_OPTION_ID IN ('614') AND PC_notify_dr3.PIR_ENABLED = '1' "); // for doctor notified ? Referral or visiting physician
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_not_notify_dr ON PC_not_notify_dr.PIRID = P.PIRID AND PC_not_notify_dr.PI_OPTION_ID IN ('612') AND PC_not_notify_dr.PIR_ENABLED = '1' ");  // for doctor notified ?
			sqlStr.append("left outer join PI_REPORT_DHEAD_COMMENT DH ON DH.PIRID = P.PIRID AND DH.PIR_ENABLED = 1 ");
			sqlStr.append("left outer join PI_REPORT_PX_COMMENT PH ON PH.PIRID = P.PIRID AND DH.PIR_ENABLED = 1 ");
		} else if (ConstantsServerSide.isTWAH()) {
			sqlStr.append("'815', '1607', '1132', '2105', '889', '2187', ");
			//sqlStr.append("'599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '621') AND PC.PIR_ENABLED = '1' "); // for Narra Desc in Other Incident
			sqlStr.append("'599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611') AND PC.PIR_ENABLED = '1' "); // for Narra Desc in Other Incident
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_notify_dr ON PC_notify_dr.PIRID = P.PIRID AND PC_notify_dr.PI_OPTION_ID IN ('275') AND PC_notify_dr.PIR_ENABLED = '1' "); // for doctor notified ? Attending physician
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_notify_dr2 ON PC_notify_dr2.PIRID = P.PIRID AND PC_notify_dr2.PI_OPTION_ID IN ('276') AND PC_notify_dr2.PIR_ENABLED = '1' "); // for doctor notified ? House physician
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_notify_dr3 ON PC_notify_dr3.PIRID = P.PIRID AND PC_notify_dr3.PI_OPTION_ID IN ('614') AND PC_notify_dr3.PIR_ENABLED = '1' "); // for doctor notified ? Referral or visiting physician
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_not_notify_dr ON PC_not_notify_dr.PIRID = P.PIRID AND PC_not_notify_dr.PI_OPTION_ID IN ('612') AND PC_not_notify_dr.PIR_ENABLED = '1' ");  // for doctor notified ?
			sqlStr.append("left outer join PI_REPORT_CONTENT PC_notify_dr_tw ON PC_notify_dr_tw.PIRID = P.PIRID ") ; // twah format Dr Notify ?
			sqlStr.append("AND PC_notify_dr_tw.PI_OPTION_ID IN ('1095', '1404', '1424', '1907', '2149', '2232') AND PC_notify_dr_tw.PIR_ENABLED = '1' "); // twah format Dr Notify ?
			sqlStr.append("left outer join PI_REPORT_DHEAD_COMMENT DH ON DH.PIRID = P.PIRID AND DH.PIR_ENABLED = 1 ");
			sqlStr.append("left outer join PI_REPORT_PX_COMMENT PH ON PH.PIRID = P.PIRID AND DH.PIR_ENABLED = 1 ");
		}
		//sqlStr.append("left outer join  PI_REPORT_INVOLVE_PERSON PP ON PP.PIRID = P.PIRID AND PP.IS_STAFF = 1 AND PP.PIR_ENABLED = 1 ");
		//sqlStr.append("left outer join CO_DEPARTMENTS D2 on PP.DEPT_CODE = D2.CO_DEPARTMENT_CODE ");

		sqlStr.append("left outer join co_Staffs cs1 on cs1.CO_STAFF_ID = p.PIR_PX_NURSE ");
		sqlStr.append("left outer join CO_DEPARTMENTS D2 on cs1.co_department_code = D2.CO_DEPARTMENT_CODE ");

		sqlStr.append("WHERE P.PIR_ENABLED = 1 ");
		sqlStr_fetchPIREPORT_excellist = sqlStr.toString();

		// excel export summary
		sqlStr.setLength(0);
		sqlStr.append("SELECT PO.PI_OPTION_DESC, count(1) ");
		sqlStr.append("FROM PI_REPORT P ");
		sqlStr.append("join PI_REPORT_OPTION PO on PO.PI_OPTION_ID = P.pir_incident_class_pi ");
		sqlStr.append("WHERE P.PIR_ENABLED = 1 ");
		sqlStr_fetchPIREPORT_excelsummarylist = sqlStr.toString();

		// Insert Follow up Entry
		sqlStr.setLength(0);
		sqlStr.append("insert into PI_REPORT_REMINDER_LOG (SEND_DATE, SEND_TYPE, REMINDER_TYPE, REMARK, CREATE_DATE) ");
		sqlStr.append("VALUES (to_char(sysdate, 'mmyyyy'), ?, ?, ?, sysdate)" );
		sqlStr_insertREMINDER_LOG = sqlStr.toString();

	}

	// Followup dialog
	// SHOWS INCIDENT REPORT - BASIC INFO
	public static ArrayList fetchReportFlwUpDialogBasicInfo(String pirID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_BASIC_INFO,
											new String[] {pirID});
	}

	// SHOWS INCIDENT REPORT - INVOLVED PERSON
	public static ArrayList fetchReportFlwUpDialogInvlovePerson(String pirID, String mode) {
		StringBuffer sqlStr = new StringBuffer();
		if (mode.equals("is_patient")) {
			sqlStr.setLength(0);
			sqlStr.append("SELECT P.PATNO, P.PERSON_NAME, ");
			sqlStr.append("DECODE(P.SEX, 'M', 'Male', 'F', 'Female', ''), P.AGE, TO_CHAR(P.DATE_OF_BIRTH, 'DD/MM/YYYY'), ");
			sqlStr.append("P.PHYSICIAN, P.DIAGNOSIS ");
			sqlStr.append("FROM PI_REPORT_INVOLVE_PERSON P, CO_DEPARTMENTS D ");
			sqlStr.append("WHERE P.PIRID = ? ");
			sqlStr.append("AND	 P.ENABLE = 1 ");
			sqlStr.append("AND   P.DEPT_CODE = D.CO_DEPARTMENT_CODE (+) ");
			sqlStr.append("AND P.IS_PATIENT = 1 ");
		}
		else if (mode.equals("is_staff")) {
			sqlStr.append("SELECT P.STAFF_ID, P.PATNO, P.PERSON_NAME, ");
			sqlStr.append("P.RANK, D.CO_DEPARTMENT_DESC, DECODE(P.SEX, 'M', 'Male', 'F', 'Female', '') ");
			sqlStr.append("FROM PI_REPORT_INVOLVE_PERSON P, CO_DEPARTMENTS D ");
			sqlStr.append("WHERE P.PIRID = ? ");
			sqlStr.append("AND	 P.ENABLE = 1 ");
			sqlStr.append("AND   P.DEPT_CODE = D.CO_DEPARTMENT_CODE (+) ");
			sqlStr.append("AND P.IS_STAFF = 1 ");
		}
		else if (mode.equals("is_visitor_relative")) {
			sqlStr.append("SELECT P.PATNO, P.STAFF_ID, P.PERSON_NAME, ");
			sqlStr.append("P.RELATIONSHIP, P.REMARK, P.TEL, P.ADDR ");
			sqlStr.append("FROM PI_REPORT_INVOLVE_PERSON P, CO_DEPARTMENTS D ");
			sqlStr.append("WHERE P.PIRID = ? ");
			sqlStr.append("AND	 P.ENABLE = 1 ");
			sqlStr.append("AND   P.DEPT_CODE = D.CO_DEPARTMENT_CODE (+) ");
			sqlStr.append("AND P.IS_VISTOR_OR_RELATIVE = 1 ");
		}
		else if (mode.equals("is_other")) {
			sqlStr.append("SELECT P.PERSON_STATUS, P.PERSON_NAME, P.REMARK, P.TEL, P.ADDR ");
			sqlStr.append("FROM PI_REPORT_INVOLVE_PERSON P, CO_DEPARTMENTS D ");
			sqlStr.append("WHERE P.PIRID = ? ");
			sqlStr.append("AND	 P.ENABLE = 1 ");
			sqlStr.append("AND   P.DEPT_CODE = D.CO_DEPARTMENT_CODE (+) ");
			sqlStr.append("AND P.IS_OTHER = 1 ");
		}
		sqlStr_fetchPIREPORT_FLWUP_DIALOG_INVOLVE_PERSON = sqlStr.toString();

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_INVOLVE_PERSON,
				new String[] {pirID});
	}

	// SHOWS INCIDENT REPORT - REPORT MST
	public static ArrayList fetchReportFlwUpDialogReportMst(String pirID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_INCIDENT_REPORT_MST,
											new String[] {pirID});
	}

	// SHOWS INCIDENT REPORT - REPORT DTL
	public static ArrayList fetchReportFlwUpDialogReportDtl(String pirID, String grpID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_INCIDENT_REPORT_DTL,
											new String[] {pirID, grpID});
	}

	// SHOWS Follow up Dialog
	public static ArrayList fetchReportFlwUpDialog(String pirID) {
		String sql = null;

		if (ConstantsServerSide.isHKAH()) {
			sql = sqlStr_fetchPIREPORT_FLWUP_DIALOG + "ORDER BY P.CREATE_DATE DESC";
		} else if (ConstantsServerSide.isTWAH()) {
			sql = sqlStr_fetchPIREPORT_FLWUP_DIALOG + " AND p.pir_wfl_status <> '7' " + " ORDER BY P.CREATE_DATE DESC";
		}
		return UtilDBWeb.getReportableList(sql, new String[] {pirID});
	}

	// SHOWS Follow up Dialog
	public static ArrayList fetchReportFlwUpDialogContent(String pirID, String pirflwID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_CONTENT,
											new String[] {pirID, pirflwID});
	}

	// SHOWS Follow up Dialog Additional report
	public static ArrayList fetchReportFlwUpDialogAddRptContent(String pirID, String pirarID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_ADDRPT_CONTENT,
											new String[] {pirID, pirarID});
	}

	// SHOWS Follow up Dialog CC List
	public static ArrayList fetchReportFlwUpDialogCCList(String pirID, String pirflwID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_CC_LIST,
											new String[] {pirID, pirflwID});
	}

	// SHOWS Follow up Info for the notify email
	public static ArrayList fetchReportFlwUpDialogEmailInfo(String pirID, String pirflwID, String msgType) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_EMAIL_INFO,
											new String[] {pirID, pirflwID, msgType});
	}

	// SHOWS INCIDENT REPORT - BASIC INFO
	public static ArrayList fetchReportFlwUpDialogAddRpt(String pirID, String deptCode) {
		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_ADDRPT,
											new String[] {pirID});
	}

	// get From Person
	public static String fetchReportFlwUpDialogFromPerson(String pirID) {
		ArrayList respondPerson = UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_LATEST, new String[] {pirID});
		if (respondPerson.size() > 0) {
			ReportableListObject rowRtn = (ReportableListObject) respondPerson.get(0);
			return rowRtn.getValue(2);
		} else {
			return null;
		}
	}

	// get Response Person list
	public static String[] fetchReportFlwUpDialogRespondPerson(String pirID) {
		ArrayList respondPerson = UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_LATEST, new String[] {pirID});
		if (respondPerson.size() > 0) {
			ReportableListObject rowRtn = (ReportableListObject) respondPerson.get(0);
			List<String> vals = new ArrayList();
			if (rowRtn.getValue(3) != null && rowRtn.getValue(3).length() > 0) {
				vals.add(rowRtn.getValue(3));
			}
			if (rowRtn.getValue(4) != null && rowRtn.getValue(4).length() > 0) {
				vals.add(rowRtn.getValue(4));
			}

			return (String[]) vals.toArray(new String[vals.size()]);
		} else {
			return null;
		}
	}

	public static ArrayList fetchReportFlwUpDialogLatest(String pirID) {
		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_LATEST, new String[] {pirID});
	}

	// get reporter if press save button
	public static String fetchReportFlwUpDialogRespondPersonSaveOnly(String pirID) {
		ArrayList respondPerson = UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_FLWUP_DIALOG_RESPONSE_PERSON_SAVEONLY, new String[] {pirID});
		if (respondPerson.size() > 0) {
			ReportableListObject rowRtn = (ReportableListObject) respondPerson.get(0);
			return rowRtn.getValue(0);
		} else {
			return null;
		}
	}

	public static ArrayList fetchReportReportCreatePerson(String pirID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_REPORT_CREATE_PERSON,
											new String[] {pirID, ConstantsServerSide.SITE_CODE});
	}

	// get pi near miss, classification
	public static ArrayList fetchReportPIclass(String pirID) {

		return UtilDBWeb.getReportableList("select pirid, decode(PIR_NEAR_MISS, '0', 'No', '1', 'Yes'), decode(PIR_NEAR_MISS_PI, '0', 'No', '1', 'Yes'), PIR_INCIDENT_CLASSIFICATION, PIR_INCIDENT_CLASS_PI from pi_report where pirid = ? ",
											new String[] {pirID});
	}

	public static String GetPIActionRequest(String actionID, UserBean userBean) {
		String rtn = null;
		String rtn2 = null;

		if (IsPIManager(userBean.getStaffID())) {
			rtn2 = "from PI Department ";
		} else {
			rtn2 = "from " + StaffDB.getStaffName(userBean.getStaffID());
		}

		if ("1".equals(actionID) || "R1".equals(actionID)) {
			rtn = "E-Incident Report Message ";
			if ("R1".equals(actionID)) {
				rtn += " (REMINDER) " + rtn2 + " :  ";
			} else {
				rtn += rtn2 + " : ";
			}
			rtn += "Provide general comment on the incident. ";
		} else if ("2".equals(actionID) || "R2".equals(actionID)) {
			rtn = "E-Incident Report Message ";
			if ("R2".equals(actionID)) {
				rtn += " (REMINDER) " + rtn2  + " :  ";
			} else {
				rtn += rtn2 + " : ";
			}
			rtn += "Provide photocopy of related patient information. ";
		} else if ("3".equals(actionID) || "R3".equals(actionID)) {
			rtn = "E-Incident Report Message ";
			if ("R3".equals(actionID)) {
				rtn += " (REMINDER) " + rtn2 + " :  ";
			} else {
				rtn += rtn2 + " : ";
			}
			rtn += "Provide report from related staff in your department. ";
		} else if ("4".equals(actionID) || "R4".equals(actionID)) {
			rtn = "E-Incident Report Message ";
			if ("R4".equals(actionID)) {
				rtn += " (REMINDER) " + rtn2 + " :  ";
			} else {
				rtn += rtn2 + " : ";
			}
			rtn += "Provide investigation report on the incident. ";
		} else if ("5".equals(actionID) || "R5".equals(actionID)) {
			rtn = "E-Incident Report Message ";
			if ("R5".equals(actionID)) {
				rtn += " (REMINDER) " + rtn2 + " :  ";
			} else {
				rtn += rtn2 + " :  ";
			}
			rtn += "Recommend preventive/remedial measures. ";
		} else if ("6".equals(actionID) || "R6".equals(actionID)) {
			rtn = "E-Incident Report Message ";
			if ("R6".equals(actionID)) {
				rtn += " (REMINDER) " + rtn2 + " :  ";
			} else {
				rtn += rtn2 + " :  ";
			}
			rtn += "Please send the Post Incident Examination form to PI department. ";
		} else if ("7".equals(actionID) || "R7".equals(actionID)) {
			rtn = "E-Incident Report Message ";
			if ("R7".equals(actionID)) {
				rtn += " (REMINDER) " + rtn2 + " :  ";
			} else {
				rtn += rtn2 + " :  ";
			}
		}

		if (IsPIManager(userBean.getStaffID())) {
			if (ConstantsServerSide.isHKAH()) {
				rtn = "HKAH-SR " + rtn ;
			} else if (ConstantsServerSide.isTWAH()) {
				rtn = "HKAH-TW " + rtn;
			}
		}
		return rtn;
	}

	// get classification
	public static String getClassDesc(String siteCode, String classCode) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT P.PI_OPTION_DESC	FROM PI_REPORT_OPTION P, 	(SELECT PI_GRPID, PI_CATEGORY_DESC ");
		sqlStr.append("FROM PI_REPORT_OPTION_GROUP  WHERE PI_ENABLED = 1 AND PI_GRP_TYPE = 'classification' ");
		sqlStr.append("AND PI_SITE_CODE = ?) G WHERE P.PI_GRPID = G.PI_GRPID 	AND P.PI_SITE_CODE = ? ");
		sqlStr.append("AND P.PI_ENABLED = 1  AND P.PI_OPTION_ID = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {siteCode, siteCode, classCode});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return excelRow.getValue(0);
		}
		return "";
	}

	//get latest redo caller
	public static String getLastestRedoID(UserBean userBean, String pirID, String mode) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_flw_from ");
		sqlStr.append("from pi_report_flwup_dialog ");
		sqlStr.append("where pirid = ? ");
		sqlStr.append("and enable = 1 and pir_flw_type = 'Redo' order by pir_flwid desc ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return excelRow.getValue(0);
		}
		return "";
	}

	public static Boolean ShowEditButton(String pirID, String staffID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from PI_REPORT where PIRID = ? and PIR_CREATED_USER = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, staffID});
		return (record.size() > 0);
	}

	// Check if the report hasn't submit to anyone yet
	public static Boolean CanEditReport(String pirID, String StaffID) {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.append("select 1 from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_flw_type in ('Redo') and pir_res_party = ?");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, StaffID});
		if (record.size() > 0) {
			return true;
		} else if (IsIRSAdmin(StaffID)) {
			return true;
		} else {
			sqlStr.setLength(0);
			sqlStr.append("select 1 from PI_REPORT where PIRID = ? and PIR_CREATED_USER = ?");
			record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, StaffID});
			return (record.size() > 0);
		}
	}

	// get next workflow person
	public static String GetNextRespPerson(UserBean userBean, String pirID, String rptSts, String incident_classification) {
		String staffID = null;

		ArrayList record = null;
		ReportableListObject row = null;
		
		System.out.println("[PiReport] HAT_GET_IRSPERSON pirID="+pirID+", rptSts="+rptSts);
		
		record = UtilDBWeb.getFunctionResults("HAT_GET_IRSPERSON", new String[] { pirID, rptSts });
		if (record.size() > 0) {
			row = (ReportableListObject) record.get(0);
			staffID = row.getValue(0);
			if (staffID != null) {
				return staffID;
			}
		}
		
		System.out.println(" staffID="+staffID);

		return staffID;
	}

	public static Boolean IsVisitorBBF(String pirID) { // for twah : is visitor bbf (option Id 1600) case ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pirid from pi_report_content where pirid = ? and pi_option_id = '1600' ");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		return (record.size() > 0);
	}

	public static Boolean IsSubHeadCase(String deptCode) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select co_department_subhead from co_departments where co_department_code = ? and (co_department_subhead is not null and trim(co_department_subhead) is not null) ");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {deptCode});
		return (record.size() > 0);
	}

	public static Boolean IsSubHead(String staffID, String pirID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select * from co_departments where co_department_subhead = ? and co_department_code = (select pir_dept_code_flwup from pi_report where pirid = ?) ");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {staffID, pirID});
		return (record.size() > 0);
	}

	public static Boolean IsNeverSubmitted(String pirID) { // is submit a saved Report ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pirid from pi_report_flwup_dialog where pirid = ? and enable = 1 and PIR_FLW_TYPE in ('Message', 'Submit', 'Rejected', 'Redo') ");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		if (record.size() > 0) {
			return false;
		}
		return true;
	}

	public static Boolean IsSentinelReport(String pirID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_sentinel_event from pi_report where pirid = ? and pir_sentinel_event = 1");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		return (record.size() > 0);
	}

	//17092018 all inc type use px flow
	public static Boolean IsPxIncident(String pirID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_dept_code_flwup from pi_report where pirid = ?");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return IsPxDeptCode(excelRow.getValue(0));
		}
		return false;
	}

	public static Boolean IsPxDeptCode(String deptCode) {
		return getPxDeptCode().equals(deptCode);
	}

	public static String getPxDeptCode() {
		if (ConstantsServerSide.isTWAH()) {
			return "PHAR";
		} else {
			return "380";
		}
	}

	public static Boolean IsPIManager(String StaffID) { // is PI Manager staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select cs.co_staff_id from co_staffs cs where cs.co_staff_id = ? and cs.co_staff_id in (select co_department_head from co_departments where co_department_code = ?)");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID, ConstantsServerSide.isTWAH()?"PI":"870"});
		if (record.size() > 0) {
			return true;
		}
		else if (IsPIAdmin(StaffID) || IsIRSAdmin(StaffID) || "piuser".equals(StaffID)) {
			return true;
		}
		return false;
	}

	public static Boolean IsAdminStaff(String StaffID) { // is Admin staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from co_staffs cs where cs.co_staff_id = ? and cs.co_staff_id in (select co_department_supervisor from co_departments)");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		// check if administrator, nurse admin assist or sno
		sqlStr.setLength(0);
		sqlStr.append("select 1 from pi_report_person_list where pir_type in ('administrator', 'nurseadminassist', 'sno') and pir_staff_id = ? and enable = '1'");
		record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		return false;
	}

	public static Boolean IsRedoReport(String pirID) { // no use function 21-12-2016
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select cs.co_staff_id from co_staffs cs where cs.co_staff_id = ? and (cs.co_staff_id in (select co_department_head from co_departments) or cs.co_staff_id in (select co_department_subhead from co_departments))");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		return (record.size() > 0);
	}

	public static Boolean IsDeptHeadStaff(String StaffID) { // is Dep Head staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select cs.co_staff_id from co_staffs cs where cs.co_staff_id = ? and (cs.co_staff_id in (select co_department_head from co_departments) or cs.co_staff_id in (select co_department_subhead from co_departments))");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}

	// is duty manager?
	public static Boolean IsDutyMgr(String StaffID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from pi_report_person_list l inner join co_staffs s on l.pir_staff_id = s.co_staff_id where l.pir_type = 'dutymgr' and l.pir_staff_id = ? and l.enable = '1' and s.co_enabled = '1'");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}

	public static Boolean IsPxReportNurse(String pirID) { // is Pharmacy report Nurse?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select * from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_wfl_status = '12'");
		//sqlStr.append("select PIR_PX_REPORT_NURSE from pi_report where pirid = ?");

		// get reporter staff id
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		return (record.size() > 0);
	}

	public static Boolean IsNursingStaffReporter(String pirID) { // is Nursing staff reporter?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select cu.co_staff_id from pi_report p join co_users cu on cu.co_username = p.create_user or cu.co_staff_id = p.create_user where pirid = ?");

		// get reporter staff id
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return IsNursingStaff(excelRow.getValue(0));
		}
		return false;
	}

	public static Boolean IsNursingStaff(String StaffID) { // is Nursing staff ?
		StringBuffer sqlStr = new StringBuffer();
		if (ConstantsServerSide.isTWAH()) {
			sqlStr.append("select cs1.co_staff_id from co_staffs cs1 where cs1.co_staff_id = ? and co_department_code in ('U400', 'U100', 'U300', 'U200', 'CCIC', 'HEMO', 'OR', 'OPD', 'NUAD', 'IC', 'U3NW', 'INTEGRATED', 'HDU', 'LCB' )");
		} else {
			sqlStr.append("select cs1.co_staff_id from co_staffs cs1 where cs1.co_staff_id = ? and co_department_code in ('120', '360', '220', '365', '362', '110', '100', '130', '330', '140', '780', '370', '200', '320', '770', '150', '160', '420', '791', '315', '105', '210', '375', '421')");
		}

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		return (IsIRSAdmin(StaffID));
	}

	public static Boolean IsNursingSeniorStaff(String StaffID) { // is senior Nursing staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('nurse', 'nurseadmin') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		return (IsIRSAdmin(StaffID));
	}

	public static Boolean IsNursingAdmin(String StaffID) { // is senior Nursing staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('nurseadmin') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		return (IsIRSAdmin(StaffID));
	}

	public static Boolean IsReporterPharmacyStaff(String StaffID) { // is Pharmacy staff ?
		return false;
	}

	public static Boolean IsPharmacyStaff(String StaffID) { // is Pharmacy staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from co_staffs where co_staff_id = ? ");
		if (ConstantsServerSide.isTWAH()) {
			sqlStr.append("and co_department_code in ('PHAR')");
		} else {
			sqlStr.append("and co_department_code in ('380')");
		}
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		return (IsIRSAdmin(StaffID));
	}

	public static Boolean IsPharmacySeniorStaff(String StaffID) { // is senior Pharmacy staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_staff_id, pir_type, pir_email, pir_staff_name from pi_report_person_list where pir_type in ('pharmacy', 'pharmacyd_dhead') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		return (IsIRSAdmin(StaffID));
	}

	public static Boolean IsPharmacyDepartmentHeadStaff(String StaffID) { // is senior Pharmacy head ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from co_departments where co_department_head = ? ");
		if (ConstantsServerSide.isTWAH()) {
			sqlStr.append("and co_department_code in ('PHAR')");
		} else {
			sqlStr.append("and co_department_code in ('380')");
		}
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		return (IsIRSAdmin(StaffID));
	}

	public static Boolean IsValidDocCode(String docCode) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select doccode from doctor@iweb where doccode = ?");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {docCode});
		return (record.size() > 0);
	}

	public static Boolean IsCooVpaRespondIncident(String pirID, String StaffID) { // is coo or vpa handle incident report?
		StringBuffer sqlStr = new StringBuffer();
		// check vpa/coo...
		sqlStr.setLength(0);
		sqlStr.append("select pir_staff_id  from pi_report_person_list where pir_type = 'coo_vpa' and pir_staff_id = ( ");
		sqlStr.append("select pir_res_party from pi_report_flwup_dialog ");
		sqlStr.append("where pir_wfl_status = '2' and pirid = ? and enable = 1 ");
		sqlStr.append("and PIR_FLWID in ( select max(PIR_FLWID ) from pi_report_flwup_dialog ");
		sqlStr.append("where pirid = ? and enable = 1 and PIR_FLW_TYPE in ('Submit', 'Redo') ");
		sqlStr.append(") and enable = '1')");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, pirID});
		return (record.size() > 0);
	}

	public static Boolean IsCeo(String StaffID) { // is coo or vpa or vpma ?
		StringBuffer sqlStr = new StringBuffer();
		// check vpa/coo...
		sqlStr.setLength(0);
		sqlStr.append("select * from pi_report_person_list where pir_type = 'ceo' and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if ((record.size() > 0) || (IsIRSAdmin(StaffID))) {
			return true;
		}

		if (IsIRSAdmin(StaffID)) {
			return true;
		}

		return false;
	}

	public static Boolean IsCooVpa(String StaffID) { // is coo or vpa or vpma ?
		StringBuffer sqlStr = new StringBuffer();
		// check vpa/coo...
		sqlStr.setLength(0);
		sqlStr.append("select * from pi_report_person_list where pir_type = 'coo_vpa' and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}
		// twah check vpma...
		sqlStr.setLength(0);
		sqlStr.append("select * from pi_report_person_list where pir_type = 'ccvpma' and pir_staff_id = ? and enable = '1'");
		record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		if (record.size() > 0) {
			return true;
		}

		// check ceo...
		sqlStr.setLength(0);
		sqlStr.append("select * from pi_report_person_list where pir_type = 'ceo' and pir_staff_id = ? and enable = '1'");
		record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}

	public static Boolean IsPharmacyAdmin(String StaffID) { // is Pharmacy Admin ?
		StringBuffer sqlStr = new StringBuffer();
		// check vpa/coo...
		sqlStr.setLength(0);
		sqlStr.append("select * from pi_report_person_list where pir_type = 'pharmacyadmin' and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}
	
	public static Boolean IsOshStaff(String StaffID) { // is OSH staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from pi_report_person_list where pir_type in ('osh') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}
	
	public static Boolean IsOshIcnStaff(String StaffID) { // is OSH/ICN staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from pi_report_person_list where pir_type in ('osh', 'icn') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}

	public static Boolean IsOshIcnSeniorStaff(String StaffID) { // is OSH staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from pi_report_person_list where pir_type in ('osh', 'icn') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}

	public static Boolean IsNormalStaff(String StaffID) { // is Normal staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from co_staffs cs where cs.co_staff_id = ? and (cs.co_staff_id in (select co_department_head from co_departments) or ");
		sqlStr.append("cs.co_staff_id in (select co_department_supervisor from co_departments))");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() == 0);  // is normal staff
	}

	public static Boolean IsNotifyPerson(String StaffID) { // is OSH/ICN staff ?
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from co_staffs where co_staff_id = ? ");
		if (ConstantsServerSide.isTWAH()) {
			sqlStr.append("and co_department_code in ('IC', 'OSH')");
		} else {
			sqlStr.append("and co_department_code in ('785', '780')");
		}

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}

	public static Boolean IsRedoStatus(String pirID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_flwid from pi_report_flwup_dialog where pir_flwid = ( ");
		sqlStr.append("		select max(pir_flwid) from pi_report_flwup_dialog where pirid = ? and enable = 1) and pir_flw_type = 'Redo' ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		return (record.size() > 0);
	}

	public static Boolean IsActionRequestStaff(UserBean userBean, String pirID, String pirPIID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pirid from PI_REPORT_PI_ACTION_REQUEST where pirid = ? and pir_piid = ? and PIR_REQUEST_STAFF = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, pirPIID, userBean.getStaffID() });
		return (record.size() > 0);
	}

	public static Boolean IsFurtherNotifyStaff(UserBean userBean) {
		StringBuffer sqlStr = new StringBuffer();

		sqlStr.append("select pir_staff_id from pi_report_person_list where pir_type = 'notice' and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {userBean.getStaffID() });
		return (record.size() > 0);
	}

	public static Boolean IsSentinelEventStaff(UserBean userBean, String pirID) {
		StringBuffer sqlStrSentinel = new StringBuffer();
		sqlStrSentinel.append("select pir_staff_id ");
		sqlStrSentinel.append("from pi_report_person_list ");
		sqlStrSentinel.append("where pir_type in ('sentinel', 'ceo') ");
		sqlStrSentinel.append("and pir_staff_id = ? ");
		sqlStrSentinel.append("and enable = '1' ");

		ArrayList<ReportableListObject> record2 = UtilDBWeb.getReportableList(sqlStrSentinel.toString(), new String[] {userBean.getStaffID()});
		if (record2.size() > 0) {
			// Further Notice person
			if (IsSentinelReport(pirID)) {
				// chk rpt is Sentinel Event ?
				StringBuffer sqlStrRpt = new StringBuffer();
				sqlStrRpt.append("select pirid from pi_report where pirid = ? and pir_sentinel_event = 1");
				record2 = UtilDBWeb.getReportableList(sqlStrRpt.toString(), new String[] {pirID});
				if (record2.size() > 0) {
					return true;
				}
			} else {
				return true;
			}
		}
		return false;
	}

	public static Boolean IsDHead(String staffID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select cd.co_department_code, cd.co_department_desc, cd.co_department_head ");
		sqlStr.append("from co_departments cd ");
		sqlStr.append("where cd.co_department_head = ?");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {staffID});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return true;
		}
		// check duty manager

		// check senior phx
		//if (IsPharmacySeniorStaff(StaffID)) {
//			return true;
		//}

		// twah check ccvpma
		if (IsCooVpa(staffID)) {
			return true;
		}
		//

		return (IsIRSAdmin(staffID));
	}

	public static Boolean IsSNO(String StaffID) {
		// check Action Request Staff here -- may need to place other !
		StringBuffer sqlStrActionRequest = new StringBuffer();
		sqlStrActionRequest.append("select co_department_code from co_departments cd where cd.co_department_subhead = ? ");
		ArrayList<ReportableListObject> recordActionRequest = UtilDBWeb.getReportableList(sqlStrActionRequest.toString(), new String[] {StaffID});
		return (recordActionRequest.size() > 0);
	}

	public static Boolean IsActionRequestStaff(String StaffID, String pirID, String pirPIID) {
		// check Action Request Staff here -- may need to place other !
		StringBuffer sqlStrActionRequest = new StringBuffer();
		sqlStrActionRequest.append("select pir_request_staff ");
		sqlStrActionRequest.append("from pi_report_pi_action_request ");
		sqlStrActionRequest.append("where pirid = ? and pir_PIID = ? and pir_request_staff = ? ");
		ArrayList<ReportableListObject> recordActionRequest = UtilDBWeb.getReportableList(sqlStrActionRequest.toString(), new String[] {pirID, pirPIID, StaffID});
		if (recordActionRequest.size() > 0) {
			return true;
		}
		//

		// check if cc email staff
		sqlStrActionRequest.setLength(0);
		sqlStrActionRequest.append("select pl.pir_staff_id from pi_report_person_list pl ");
		sqlStrActionRequest.append("join pi_report p on p.pirid = ? ");
		sqlStrActionRequest.append("where pl.pir_email like '%' || p.pir_dept_code || '%' ");
		sqlStrActionRequest.append("and pl.pir_staff_id = ? ");
		sqlStrActionRequest.append("and pl.enable = '1' ");
		recordActionRequest = UtilDBWeb.getReportableList(sqlStrActionRequest.toString(), new String[] {pirID, StaffID});
		if (recordActionRequest.size() > 0) {
			return true;
		}

		return false;
	}

	public static Boolean IsPx(String StaffID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from co_staffs where co_staff_id = ? ");
		if (ConstantsServerSide.isTWAH()) {
			sqlStr.append("and co_department_code in ('PHAR')");
		} else {
			sqlStr.append("and co_department_code in ('380')");
		}
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {StaffID});
		return (record.size() > 0);
	}

	public static Boolean IsAllowIncidentClass(UserBean userBean, String pirID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT PIR_INCIDENT_CLASS_PI FROM PI_PERSON_2_INCIDENT_CLASS WHERE PIR_SITE_CODE = ? AND PIR_STAFF_ID = ? and PIR_ENABLE = '1'");
		ArrayList<ReportableListObject> result = UtilDBWeb.getReportableList(sqlStr.toString(), new String [] {ConstantsServerSide.SITE_CODE, userBean.getStaffID()});
		if (result.size() > 0) {
			sqlStr.setLength(0);
			sqlStr.append("SELECT 1 FROM PI_REPORT WHERE PIR_SITE_CODE = ? AND PIRID = ? AND PIR_ENABLED = 1 AND PIR_INCIDENT_CLASS_PI IN (");
			sqlStr.append("SELECT PIR_INCIDENT_CLASS_PI FROM PI_PERSON_2_INCIDENT_CLASS WHERE PIR_SITE_CODE = ? AND PIR_STAFF_ID = ? and PIR_ENABLE = '1'");
			sqlStr.append(")");

			result = UtilDBWeb.getReportableList(sqlStr.toString(), new String [] {ConstantsServerSide.SITE_CODE, pirID, ConstantsServerSide.SITE_CODE, userBean.getStaffID()});
			return result.size() > 0;
		} else {
			return true;
		}
	}

	public static String getRespondPerson(String pirID, String rptStr, String ori_rptSts ) {
		StringBuffer sqlStr = new StringBuffer();
		StringBuffer sqlStrOshIcn = new StringBuffer();

		String getRedoBackToRptSts = ori_rptSts;

		if ("0".equals(rptStr)) {
			sqlStr.append("SELECT CU.CO_STAFF_ID FROM PI_REPORT P JOIN CO_USERS CU ON P.PIR_CREATED_USER = CU.CO_USERNAME OR P.PIR_CREATED_USER = CU.CO_STAFF_ID WHERE PIRID = ? AND pir_site_code = ?");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, ConstantsServerSide.SITE_CODE});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		else if ("11".equals(rptStr)) { // if  icn/osh case status = "11"
			sqlStr.append("select p1.pir_flw_from from pi_report_flwup_dialog p1 where p1.PIR_FLWID in (select max(p12.PIR_FLWID) from pi_report_flwup_dialog p12 where p12.pirid = ? and p12.enable = 1 and p12.pir_wfl_status = '" + getRedoBackToRptSts + "' and p12.PIR_FLW_TYPE = 'Submit')");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		else if ("12".equals(rptStr)) { // if  medication case status = "12"
			sqlStr.append("select p1.pir_flw_from from pi_report_flwup_dialog p1 where p1.PIR_FLWID in (select max(p12.PIR_FLWID) from pi_report_flwup_dialog p12 where p12.pirid = ? and p12.enable = 1 and p12.pir_wfl_status = '" + getRedoBackToRptSts + "' and p12.PIR_FLW_TYPE = 'Submit')");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		else if ("14".equals(rptStr)) { // if  medication case status = "14"
			sqlStr.append("select p1.pir_flw_from from pi_report_flwup_dialog p1 where p1.PIR_FLWID in (select max(p12.PIR_FLWID) from pi_report_flwup_dialog p12 where p12.pirid = ? and p12.enable = 1 and p12.pir_wfl_status = '" + getRedoBackToRptSts + "' and p12.PIR_FLW_TYPE = 'Submit')");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		else if ("19".equals(rptStr)) { // if  medication case status = "19"
			sqlStr.append("select p1.pir_flw_from from pi_report_flwup_dialog p1 where p1.PIR_FLWID in (select max(p12.PIR_FLWID) from pi_report_flwup_dialog p12 where p12.pirid = ? and p12.enable = 1 and p12.pir_wfl_status = '" + getRedoBackToRptSts + "' and p12.PIR_FLW_TYPE = 'Submit')");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		else if ("1".equals(rptStr) && "3".equals(getRedoBackToRptSts)) { // from PI manager to pharmacist
			sqlStr.append("select pir_res_party from pi_report_flwup_dialog where pirid = ? and enable = 1 and PIR_FLWID in (select max(p22.PIR_FLWID ) from pi_report_flwup_dialog p22 where p22.pirid = ? and p22.enable = 1and p22.PIR_FLW_TYPE = 'Submit' and p22.pir_wfl_status = ? )");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, pirID, rptStr});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		else {
			sqlStr.append("select decode(p2.pir_flw_from, p1.pir_res_party, p1.pir_res_party, p1.pir_res_party2) resparty from pi_report_flwup_dialog p1 join pi_report_flwup_dialog p2 on p2.PIR_FLWID in (  select max(p22.PIR_FLWID )  from pi_report_flwup_dialog p22 where p22.pirid = ? and p22.enable = 1 and p22.PIR_FLW_TYPE = 'Submit' and p22.pir_wfl_status = '" + getRedoBackToRptSts + "') and p2.pirid = p1.pirid where p1.PIR_FLWID in (  select max(p12.PIR_FLWID) from pi_report_flwup_dialog p12  where p12.pirid = ? and p12.enable = 1 and p12.pir_wfl_status = ? and p12.PIR_FLW_TYPE = 'Submit')");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, pirID, rptStr});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}

		return "";
	}

	public static String[] getResponsibleParty(String pirID) {
		String[] flwUpDialogToPerson = fetchReportFlwUpDialogRespondPerson(pirID);
		if (flwUpDialogToPerson != null) {
			return flwUpDialogToPerson;
		} else { // get reporter if save the report
			String flwUpDialogToPersonSaveOnly = fetchReportFlwUpDialogRespondPersonSaveOnly(pirID);
			if (flwUpDialogToPersonSaveOnly != null) {
				return new String[] { flwUpDialogToPersonSaveOnly };
			}
		}
		return null;
	}

	public static Boolean IsRespondsiblePerson(String loginID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 FROM PI_REPORT R INNER JOIN PI_REPORT_FLWUP_DIALOG D ON R.PIRID = D.PIRID WHERE R.PIR_STATUS > 0 AND (D.PIR_RES_PARTY = ? OR D.PIR_RES_PARTY2 = ?)");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {loginID, loginID});
		if (record.size() > 0) {
			return true;
		}
		else {
			return false;
		}
	}

	public static Boolean IsRespondsiblePerson(String pirID, String staffID) {
		String flwUpDialogToPerson[] = getResponsibleParty(pirID);
		if (flwUpDialogToPerson != null) {
			for (int i = 0; i < flwUpDialogToPerson.length; i++) {
				if (staffID.equals(flwUpDialogToPerson[i])) {
					return true;
				}
			}
		}

		if (IsIRSAdmin(staffID)) {
			return true;
		}

		return false;
	}

	public static Boolean IsResponsibleDepartmentHead(String pirID, String staffID) {
		ArrayList result = UtilDBWeb.getReportableList("select 1 from pi_report where pirid = ? and PIR_RESPONSIBLE_PARTY = ?", new String [] {pirID, staffID});

		return (result.size() > 0);
	}

	public static Boolean IsResponsibleFlwUp(String pirID, String staffID) {
		ArrayList result = UtilDBWeb.getReportableList("select 1 from pi_report where pirid = ? and PIR_RESPONSIBLE_PARTY_FLWUP = ?", new String [] {pirID, staffID});

		if (ConstantsServerSide.isTWAH()) {
			if (result.isEmpty()) {
				StringBuffer sqlStr = new StringBuffer();
				sqlStr.append("select PIR_RES_PARTY, pir_res_party2 from pi_report_flwup_dialog ");
				sqlStr.append("where pirid = ? and enable = 1 and PIR_FLW_TYPE in ('Submit', 'Redo') and ((pir_res_party = ? and pir_wfl_status = '1') or pir_res_party2 = ?)");
				result = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, staffID, staffID});
			}
		}
		
		return (result.size() > 0);
	}

	public static Boolean IsRespondsibleUMDM(String pirID, String staffID) {
		StringBuffer sqlStr = new StringBuffer();
		StringBuffer sqlStr2 = new StringBuffer();

		if (ConstantsServerSide.isTWAH()) {
			return false;
		}

		if (!IsNursingStaff(staffID)) {
			return false;
		}

		sqlStr.append("select PIR_RES_PARTY, pir_res_party2 from pi_report_flwup_dialog ");
		sqlStr.append("where pirid = ? and enable = 1 and PIR_FLW_TYPE in ('Submit', 'Redo') and ((pir_res_party = ? and pir_wfl_status = '1') or pir_res_party2 = ?)");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID, staffID, staffID});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);

			// check if both dm/um and admin is the same person
			sqlStr2.append("select co_department_head, co_department_supervisor from co_departments ");
			sqlStr2.append("where co_department_code in (select pir_dept_code from pi_report where pirid = ?) ");
			sqlStr2.append("and co_department_supervisor = ?");
			ArrayList<ReportableListObject> record2 = UtilDBWeb.getReportableList(sqlStr2.toString(), new String[] {pirID, staffID});
			if (record2.size() > 0) {
				ReportableListObject excelRow2 = (ReportableListObject) record2.get(0);
				if (excelRow2.getValue(0) == excelRow2.getValue(1)) {
					return false;
				} else {
					return true;
				}
			} else {
				return true;
			}
		}

		return false;
	}

	public static Boolean IsCanEditPerson(String pirID, String loginID, String rptSts) {
		ReportableListObject excelRow = null;
		StringBuffer contentStr = new StringBuffer();

		if ("0".equals(rptSts)) {
			ArrayList reportCreatePerson = fetchReportReportCreatePerson(pirID);
			if (reportCreatePerson.size() > 0) {
				excelRow = (ReportableListObject) reportCreatePerson.get(0);
				if (loginID.equals(excelRow.getValue(0))) {
					return true;
				}
			}
		}
		return false;
	}

	public static Boolean IsPatientIncident(String Incident) {
		return ("1".equals(Incident) || "4".equals(Incident) || IsMedicationIncident(Incident));
	}

	public static Boolean IsStaffIncident(String Incident) {
		return ("2".equals(Incident) || "5".equals(Incident) || "7".equals(Incident) || "700".equals(Incident));
	}

	public static Boolean IsMedicationIncident(String Incident) {
		return ("8".equals(Incident) || "530".equals(Incident));
	}

	public static String getIncidentTypeByClass(String incClass) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pi_parent_id from pi_report_option where PI_OPTION_ID = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {incClass});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return excelRow.getValue(0);
		}
		return "";
	}

	public static String getIncidentType(String pirid) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_incident_classification from pi_report where pirid = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirid});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return excelRow.getValue(0);
		}
		return "";
	}

	public static String getStatusDesc(String incidentType, String status) {
		if (ConstantsServerSide.isTWAH()) {
			if ("7".equals(status)) {
				return "OSH/ICN Acceptance";
			} else if ("11".equals(status)) {
				return "Refer to ICN/OSH (Pending Manager Input - Clinical)";
			} else if ("19".equals(status)) {
				return "SNO Input";
			} else if ("1".equals(status)) {
				return "Unit Manager Input/Senior Pharmacist Input";
			}
		} else {
			if ("7".equals(status)) {
				if ("7".equals(incidentType) || "700".equals(incidentType)) {
					return "OSH/ICN Acceptance";
				} else {
					return "OSH Acceptance";
				}
			} else if ("11".equals(status)) {
				if ("7".equals(incidentType) || "700".equals(incidentType)) {
					return "Refer to ICN/OSH";
				} else {
					return "Refer to OSH";
				}
			} else if ("19".equals(status)) {
				if ("7".equals(incidentType) || "700".equals(incidentType)) {
					return "Refer to ICN/OSH";
				} else {
					return "Refer to OSH";
				}
			} else if ("1".equals(status)) {
				/*
				if ("7".equals(incidentType) || "700".equals(incidentType)) {
					return "OSH/ICN Investigation";
				} else {
					return "OSH Investigation";
				}
				*/
				return "Unit Manager Input/Senior Pharmacist Input";
			}
		}
		return "";
	}

	// Get Report Status
	public static String getRptStsDesc(String pirID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select PIR_INCIDENT_CLASSIFICATION, PIR_DEPT_CODE, PIR_DEPT_CODE_FLWUP, PIR_STATUS from pi_report where pirid = ?");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirID});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return getRptStsDesc(IsPxDeptCode(excelRow.getValue(2)), excelRow.getValue(0), excelRow.getValue(1), excelRow.getValue(3));
		} else {
			return "";
		}
	}

	public static String getRptStsDesc(Boolean isPxIncident, String incidentType, String deptCode, String rptSts) {
		String descPrefix = null;
		if (ConstantsServerSide.isTWAH()) {
			descPrefix = "Pending ";
		} else {
			descPrefix = "Wait for ";
		}
		if ("0".equals(rptSts)) {
			return descPrefix + "Reporter resubmit";
		}
		else if ("1".equals(rptSts)) {
			// Staff Injury-Fall, Staff Injury-General, Sharp Injury / Body Fluid Exposure, Workplace Violence
			if (IsStaffIncident(incidentType)) {
				return descPrefix + getStatusDesc(incidentType, rptSts);
			} else if (IsMedicationIncident(incidentType) && isPxIncident) {
				// Medication Incident, Medication Adverse Drug Reaction
				return descPrefix + "Senior Pharmacist input";
			} else {
				return descPrefix + "Unit Manager Input";
			}
		} else if ("2".equals(rptSts)) {
			return descPrefix + "Administrator";
		} else if ("3".equals(rptSts)) {
			return descPrefix + "PI";
		} else if ("4".equals(rptSts)) {
			return descPrefix + "CEO";
		} else if ("5".equals(rptSts)) {
			return "Reporting Process Completed";
		} else if ("6".equals(rptSts)) {
			return "Rejected";
		} else if ("7".equals(rptSts)) {
			// Wait for OSH/ICN
			return descPrefix + getStatusDesc(incidentType, rptSts);
		} else if ("8".equals(rptSts)) {
			return descPrefix + "Senior Pharmacist Acceptance";
		} else if ("10".equals(rptSts)) {
			return descPrefix + "Others";
		} else if ("11".equals(rptSts)) {
			if (IsSubHeadCase(deptCode)) {
				return "Unit Manager Input";
			} else {
				// Wait for Refer to OSH/ICN
				return descPrefix + getStatusDesc(incidentType, rptSts);
			}
		} else if ("12".equals(rptSts)) {
			if (IsMedicationIncident(incidentType)) {
				// Unit Manager Input
				return "Refer to Pharmacist";
			} else {
				return descPrefix + "Manager Input - Clinical";
			}
		} else if ("14".equals(rptSts) || "29".equals(rptSts)) {
			return descPrefix + "Chief Pharmacist Input";
		} else if ("19".equals(rptSts)) {
			if (ConstantsServerSide.isTWAH()) {
				return descPrefix + "SNO Input";
			} else {
				return descPrefix + "Senior UM Input";
			}
		} else {
			return "Unknown";
		}
	}
	//

	public static String omitNull(String value) {
		if (value == null || value.isEmpty()) {
			return "";
		}
		return value;
	}

	public static Boolean IsAddRptPerson(String staffID) {
		StringBuffer sqlStr = new StringBuffer();
		String deptCode = null;
		Boolean rtn = false;
		sqlStr.append("select co_department_code from co_staffs where co_staff_id = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {staffID});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);

			deptCode = excelRow.getValue(0);
			if ("770".equals(deptCode)) { //Administrator/vpma/coo  ('770', '650', '993')
				rtn = true;
			}
			else if ("650".equals(deptCode)) {
				rtn = true;
			}
			else if ("993".equals(deptCode)) {
				rtn = true;
			}
			else if ("785".equals(deptCode)) { // OSH/ICN
				rtn = true;
			}
			else if ("870".equals(deptCode)) { //PI
				rtn = true;
			}
			else {
				rtn = IsDHead(staffID);
			}
			return rtn;
		}
		else {
			return false;
		}
	}

	public static Boolean IsOshIcnPerson(String staffID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select pir_staff_id from pi_report_person_list where pir_type in ('osh', 'icn') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {staffID});
		return (record.size() > 0);
	}

	public static Boolean IsSeniorPharmacy(String staffID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from pi_report_person_list where pir_type in ('pharmacy', 'pharmacyd_dhead') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {staffID});
		return (record.size() > 0);
	}

	public static boolean isSNO(String staffID) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select 1 from pi_report_person_list where pir_type in ('sno') and pir_staff_id = ? and enable = '1'");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] { staffID });
		return (record.size() > 0);
	}

	public static Boolean IsPIAdmin(String staffID) { // no use function 21-12-2016
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append(" SELECT 1 FROM AC_FUNCTION_ACCESS WHERE AC_FUNCTION_ID = 'function.piadmin.list' AND AC_ENABLED = 1 and AC_STAFF_ID = ?");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {staffID});
		return (record.size() > 0);
	}

	public static Boolean IsIRSAdmin(String staffID) { // no use function 21-12-2016
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append(" SELECT 1 FROM AC_FUNCTION_ACCESS WHERE AC_FUNCTION_ID = 'function.irsadmin.list' AND AC_ENABLED = 1 and AC_STAFF_ID = ?");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {staffID});
		return (record.size() > 0);
	}

	// get DeptHead
	// subhead act as depthead for admin office 610 (SR)
	public static String getDeptHead(String deptCode, String getType) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("select case when cd.co_department_code = '610' then cd.co_department_subhead else cd.co_department_head end co_department_head, cs.co_staffname, trim(cd.co_department_subhead), cs2.co_staffname from co_departments cd ");
		sqlStr.append("join co_staffs cs on cs.co_staff_id = cd.co_department_head ");
		sqlStr.append("left outer join co_staffs cs2 on cs2.co_staff_id = cd.co_department_subhead ");
		sqlStr.append("where cd.co_department_code = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {deptCode});
		if (record.size() > 0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			if ("ID".equals(getType)) {
				if ( "".equals(excelRow.getValue(2)) || excelRow.getValue(2) == null ) {
					return excelRow.getValue(0);
				} else {
					return excelRow.getValue(0); // return sub head name
				}
			}
			else {
				return excelRow.getValue(1);
			}
		}
		return "";
	}
	//

	// get the person who send to ICN/OSH (status = 7)
	public static String getSendPerson(String pirid, String getType) {
		StringBuffer sqlStr = new StringBuffer();

		if ("OshIcn".equals(getType)) {
			sqlStr.append("select pir_flw_from from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_wfl_status = 7 and pir_flwid in ");
			sqlStr.append("(select max(pir_flwid) from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_wfl_status = 7) ");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirid, pirid});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		else if ("Pharmacy".equals(getType)) {
			sqlStr.append("select pir_flw_from from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_wfl_status = 8 and pir_flwid in ");
			sqlStr.append("(select max(pir_flwid) from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_wfl_status = 8) ");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirid, pirid});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		return "";
	}
	//

	// get the person who accept the investigate - no one call this now
	public static String getAcceptPerson(String pirid, String getType) {
		StringBuffer sqlStr = new StringBuffer();

		if ("Pharmacy".equals(getType)) {
			sqlStr.append("select pir_flw_from from pi_report_flwup_dialog where pirid = ? and pir_wfl_status = 0 and pir_flwid in ");
			sqlStr.append("(select max(pir_flwid) from pi_report_flwup_dialog where pirid = ? and enable = 1 and pir_wfl_status = 0) ");
			ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {pirid, pirid});
			if (record.size() > 0) {
				ReportableListObject excelRow = (ReportableListObject) record.get(0);
				return excelRow.getValue(0);
			}
		}
		return "";
	}
	//

	public static String getDeptDesc(String deptCode) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("SELECT CO_DEPARTMENT_DESC ");
		sqlStr.append("FROM   CO_DEPARTMENTS ");
		sqlStr.append("WHERE  CO_ENABLED = 1 ");
		sqlStr.append("AND    CO_DEPARTMENT_CODE = ? ");

		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] { deptCode });
		if (record.size()>0) {
			ReportableListObject excelRow = (ReportableListObject) record.get(0);
			return excelRow.getValue(0);
		} else {
			return "";
		}
	}

	// Insert Follow up Dialog
	private static String getNextFlwupDialogID() {
		String flwupID = null;

		ArrayList result = UtilDBWeb.getReportableList("SELECT MAX(PIR_FLWID) + 1 FROM PI_REPORT_FLWUP_DIALOG ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			flwupID = reportableListObject.getValue(0);

			// set 1 for initial
			if (flwupID == null || flwupID.length() == 0) return "1";
		}
		return flwupID;
	}

	private static String getNextFlwupDialogPersonID() {
		String flwupID = null;

		ArrayList result = UtilDBWeb.getReportableList("SELECT MAX(PIR_FLWPID) + 1 FROM PI_REPORT_FLWUP_DIALOG_PERSON ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			flwupID = reportableListObject.getValue(0);

			// set 1 for initial
			if (flwupID == null || flwupID.length() == 0) return "1";
		}
		return flwupID;
	}

	public static String addFlwUpDialog(UserBean userBean, String pirID, String fuType, String fuCreateDate, String fuFrom,
			String fuDueDate, String fuCompDate, String fuAction, String respParty, String respParty2, String rptSts) {

		String fuid = getNextFlwupDialogID();

		if (UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_FLWUP_DIALOG,
					new String[] {pirID, fuid, fuType, /*fuCreateDate,*/ fuFrom, /*userBean.getStaffID(),*/
								fuDueDate, fuCompDate, fuAction, respParty, respParty2, rptSts,
								userBean.getStaffID(), userBean.getStaffID()})) {
			return fuid;
		}
		return null;
	}

	public static String addFlwUpDialogToPerson(UserBean userBean, String pirID, String pirflwID, String ToPerson) {

		String fupid = getNextFlwupDialogPersonID();

		if (UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_FLWUP_DIALOG_TO,
					new String[] {pirID, pirflwID, fupid, ToPerson, "abc@def.com", userBean.getStaffID(),
								userBean.getStaffID()})) {
			return fupid;
		}
		return null;
	}

	public static boolean SendFlwupMsg(UserBean userBean, String msgType, String incident_type, String pirID, String piflwID, String EmailList) {
		boolean success = true;
		String From = "";
		String FollowUpMsg = "";
		ReportableListObject excelRow = null;
		StringBuffer contentStr = new StringBuffer();

		//contentStr.append(EmailList + "<br/><br/><br/><br/>");

		contentStr.append("This email was sent by system for the incident report of :");
		contentStr.append("<b>" + incident_type + "</b>");
		contentStr.append("<br/><br/><br/>");
		if (msgType.equals("Message")) {
			contentStr.append("The Follow up message ");
		}
		else if (msgType.equals("Rejected")) {
			contentStr.append("The incident report has been rejected ");
		}
		else if (msgType.equals("Submit")) {
			contentStr.append("The incident report has been submitted ");
		}

		// get the follow up msg info
		ArrayList flwUpDialogEmailInfo = fetchReportFlwUpDialogEmailInfo(pirID, piflwID, msgType);
		if (flwUpDialogEmailInfo.size() > 0) {
			excelRow = (ReportableListObject) flwUpDialogEmailInfo.get(0);
			From = excelRow.getValue(0);
			FollowUpMsg = excelRow.getValue(1);
		}
		//

		contentStr.append("from : " + From);
		contentStr.append("<br/>");
		contentStr.append(FollowUpMsg);
		contentStr.append("<br/>");
		contentStr.append("<br/>");
		contentStr.append("Please click <a href=");
		contentStr.append("http://localhost:8080/intranet/pi/incident_report2.jsp?command=view&pirID=");
		contentStr.append(pirID);
		contentStr.append(">HERE</a> to view it");
		contentStr.append("<br/>");

		return success;
	}

	// additional report for OSH, Adm, PI
	private static String getNextFlwupAddRptID() {
		String flwupID = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"SELECT MAX(PIR_ARID) + 1 FROM PI_REPORT_FLWUP_DIALOG_ADD_RPT ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			flwupID = reportableListObject.getValue(0);

			// set 1 for initial
			if (flwupID == null || flwupID.length() == 0) return "1";
		}
		return flwupID;
	}

	public static String addFlwUpAddRpt(UserBean userBean, String pirID, String addRptFrom, String deptCode, String deptDesc, String content) {
		String addrptID = getNextFlwupAddRptID();

		UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_FLWUP_DIALOG_ADDRPT,
										new String[] {pirID, addrptID, addRptFrom, deptCode, deptDesc, content,
													 userBean.getStaffID(), userBean.getStaffID()});
		return addrptID;
	}

	// Dept Head Tab add follow up comment
	public static ArrayList fetchReporDheadComment(String pirID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_DHEAD_COMMENT,
											new String[] {pirID});
	}

	// Insert PI_REPORT_DHEAD_COMMENT_SAFE
	private static String getNextDheadCommentSafeID() {
		String seqNo = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"SELECT MAX(seq_no) + 1 FROM PI_REPORT_DHEAD_COMMENT_SAFE ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			seqNo = reportableListObject.getValue(0);

			// set 1 for initial
			if (seqNo == null || seqNo.length() == 0) return "1";
		}
		return seqNo;
	}

	// Insert Dhead Comment Safe Backup ID Dialog
	public static String addDheadCommentSafe(UserBean userBean, String pirID, String status,
			 String Narrative, String Cause, String ActionDone, String ActionTaken) {

		String seqNo = getNextDheadCommentSafeID();

		if (UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_DHEAD_COMMENT_SAFE_BACKUP,
		new String[] {
					seqNo, pirID, status, userBean.getStaffID(),
					Narrative, Cause, ActionDone, ActionTaken
			})) {
		}
		return null;
	}

	private static String getNextDheadCommentID() {
		String pirdid = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"SELECT MAX(PIR_DID) + 1 FROM pi_report_dhead_comment ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			pirdid = reportableListObject.getValue(0);

			// set 1 for initial
			if (pirdid == null || pirdid.length() == 0) return "1";
		}
		return pirdid;
	}

	public static void addDheadComment(UserBean userBean, String pirID, String status,
										 String Narrative, String Cause, String ActionDone, String ActionTaken,
										 String dHeadID) {

		String pirdid = getNextDheadCommentID();

		UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_DHEAD_COMMENT,
					new String[] {pirID, pirdid, pirdid,
								Narrative, Cause, ActionDone, ActionTaken,
								dHeadID,
								userBean.getStaffID(), userBean.getStaffID()});

		// insert PI_REPORT_DHEAD_COMMENT_SAFE
		addDheadCommentSafe(userBean, pirID, status,
				 Narrative, Cause, ActionDone, ActionTaken);
	}

	public static boolean updateDheadComment(UserBean userBean, String pirID, String piDID, String saveFrom, String rptSts,
			 Boolean IsStaffOrMedicationIncident, Boolean IsOshIcnOrPharmacy,
			 //Boolean IsStaffIncident, Boolean IsOshIcn,
			 String Narrative, String Cause, String ActionDone, String ActionTaken,
			 String Narrative_followup, String Cause_followup, String ActionDone_followup, String ActionTaken_followup,
			 String Narrative_UMDM, String Cause_UMDM, String ActionDone_UMDM, String ActionTaken_UMDM,
			 String RiskAss, String Mon, String Inv, String Treat, String HighCare, String MonSpec, String InvSpec,
			 String TreatSpec, String HighCareSpec, String PersonFault, String InadeTrain,
			 String NoPrevent, String MachFault, String MisUse, String InadeInstru, String InadeEquip,
			 String PoorQual, String QualDetect, String ExpItem, String InadeMat, String InstNotFollow,
			 String MotNature, String Noise, String DistEnv, String UnvFloor, String Slip,
			 String IM, String Culture, String Leader, String Other, String OtherSpec,
			 String failurecomply,
			 String samedrug, String inappabb, String ordermis, String lasa, String lapses,
			 String equipfailure, String illegalhand, String miscal, String systemflaw, String Inadtrainstaff,
			 String othersfreetext, String othersfreetextedit, String relatedstaff, String sharestaff, String sharestaffdate,
			 String noaffect, String noharm, String tempharm, String permharm, String death,
			 String contamin, String noncontamin, String bodyfluexp, String adminviewed, String admincomment,
			 String staffedu, String staffedutext, String staffdisc, String staffdisctext,
			 String cons, String constext, String shar, String shartext1, String shartext2,
			 String revpol, String revform, String creform, String refer, String refertext, String referdepttext,
			 String others, String sldays, String labdept, String patinv, String labdeptremark, String rptpolice, String rptiod
	) {
		Boolean IsResponsibleDHead = IsResponsibleDepartmentHead(pirID, userBean.getStaffID());
		Boolean IsResponsibleFlwUp = IsResponsibleFlwUp(pirID, userBean.getStaffID());
		Boolean IsResponsibleUMDM = IsRespondsibleUMDM(pirID, userBean.getStaffID());

		// insert PI_REPORT_DHEAD_COMMENT_SAFE
		if ("fuAdmFUCmt".equals(saveFrom)) {
			addDheadCommentSafe(userBean, pirID, rptSts,
					 Narrative, Cause, ActionDone, ActionTaken);
		}

		if ("fuAdmFUCmt".equals(saveFrom)) {
			if ("1".equals(rptSts) || ("2".equals(rptSts) && IsResponsibleUMDM) || "11".equals(rptSts) || "12".equals(rptSts) || "14".equals(rptSts)) {
				if (IsStaffOrMedicationIncident && IsOshIcnOrPharmacy && !"11".equals(rptSts) && !"12".equals(rptSts) ) {
					UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_OSHICN,
							new String[] {Narrative, Cause, ActionDone, ActionTaken,
										piDID});
				}
				else {
					UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_OTHER,
							new String[] {staffedu,  staffedutext,  staffdisc,  staffdisctext,
										cons,  constext,  shar,  shartext1,  shartext2,
										revpol,  revform,  creform,
										refer,  refertext,  referdepttext,
										others,
										piDID});

					if (ConstantsServerSide.isHKAH()) {
						if (IsResponsibleDHead) {
							UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_DHEAD,
									new String[] {Narrative, Cause, ActionDone, ActionTaken,
												piDID});
						}

						if (IsResponsibleFlwUp) {
							UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_FLWUP,
									new String[] {Narrative_followup, Cause_followup, ActionDone_followup, ActionTaken_followup,
												piDID});
						}

						if (IsResponsibleUMDM) {
							UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_UMDM,
									new String[] {Narrative_UMDM, Cause_UMDM, ActionDone_UMDM, ActionTaken_UMDM,
												piDID});
						}
					} else {
						UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_DHEAD,
								new String[] {Narrative, Cause, ActionDone, ActionTaken,
											piDID});
					}
				}
			}
			else if ("2".equals(rptSts)) {
				UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_ADMIN,
						new String[] {Narrative, Cause, ActionDone, ActionTaken, adminviewed, admincomment, piDID});
			}
			else if ("3".equals(rptSts)) {
				UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT_NARRATIVE_PI,
						new String[] {Narrative, Cause, ActionDone, ActionTaken, piDID});
			}

			return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT,
					new String[] {failurecomply,
					samedrug, inappabb, ordermis, lasa, lapses,
					equipfailure, illegalhand, miscal, systemflaw, Inadtrainstaff,
					othersfreetext, othersfreetextedit, relatedstaff, sharestaff, sharestaffdate,
					noaffect, noharm, tempharm, permharm, death,
					contamin, noncontamin, bodyfluexp, sldays, labdept, patinv, labdeptremark, rptpolice, rptiod,
					piDID});
		}
		else if ("fuAdmCmt".equals(saveFrom)) {
			return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_DHEAD_COMMENT2,
					new String[] {
					RiskAss,
					Mon,  Inv,  Treat,  HighCare,
					MonSpec,  InvSpec, TreatSpec,  HighCareSpec,
					PersonFault,  InadeTrain, NoPrevent,  MachFault,  MisUse,
					InadeInstru,  InadeEquip, PoorQual,  QualDetect,  ExpItem,
					InadeMat,  InstNotFollow, MotNature,  Noise,  DistEnv,
					UnvFloor,  Slip, IM,  Culture,  Leader,  Other,  OtherSpec,
					piDID});
		}

		return false;
	}

	// Dept Head Tab add follow up comment
	public static ArrayList fetchReportPxComment(String pirID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_PX_COMMENT,
											new String[] {pirID});
	}

	private static String getNextPxCommentID() {
		String pirpxid = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"SELECT MAX(PIR_PXID) + 1 FROM pi_report_px_comment ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			pirpxid = reportableListObject.getValue(0);

			// set 1 for initial
			if (pirpxid == null || pirpxid.length() == 0) return "1";
		}
		return pirpxid;
	}

	public static String addPxComment(UserBean userBean, String pirID) {
		String piPXID = getNextPxCommentID();
		if (UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_PX_COMMENT, new String[] {pirID, piPXID, userBean.getStaffID(), userBean.getStaffID()})) {
			return piPXID;
		} else {
			return null;
		}
	}

	public static boolean updatePxComment(UserBean userBean, String pirID, String piPXID,
		String RiskAss,
		String HighAlert, String BeforeWard, String BeforeOutpat, String AfterWardInv,
		String AfterWardGiven, String AfterOutpatNotTaken, String AfterOutpatTaken, String BeforeDischarge,
		String AfterDischarge, String BeforeAdmin, String AfterAdmin, String BeforeAdminUnit,
		String AfterAdminUnit, String causeReaction
	) {
		if (piPXID == null || piPXID.length() == 0) {
			piPXID = addPxComment(userBean, pirID);
		}
		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_PX_COMMENT,
					new String[] {RiskAss,
								HighAlert, BeforeWard, BeforeOutpat, AfterWardInv,
								AfterWardGiven, AfterOutpatNotTaken, AfterOutpatTaken, BeforeDischarge,
								AfterDischarge, BeforeAdmin, AfterAdmin, BeforeAdminUnit,
								AfterAdminUnit, causeReaction,
								piPXID});
	}

	public static boolean updatePharmacyRespPerson(String pirID, String PxStaff) {
		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_FLWUP_DIALOG_PIR_RES_PARTY2, new String[] {PxStaff, pirID, pirID});
	}

	private static String getNextPIActionRequestID() {
		String pirpiid = null;

		ArrayList result = UtilDBWeb.getReportableList("SELECT MAX(PIR_PIID) + 1 FROM pi_report_pi_action_request ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			pirpiid = reportableListObject.getValue(0);

			// set 1 for initial
			if (pirpiid == null || pirpiid.length() == 0) return "1";
		}
		return pirpiid;
	}

	private static String piClassDifferetReporterClass(String pirID, String piNearMiss, String piClass) {
		String rtn1 = null;
		String rtn2 = null;
		String alertEmailBody = null;

		ArrayList result = UtilDBWeb.getReportableList(
							"select decode(PIR_NEAR_MISS, '0', 'No', 'Yes'), PIR_INCIDENT_CLASSIFICATION, decode(PIR_NEAR_MISS, '" + piNearMiss + "', 'same', 'notsame'), decode(PIR_INCIDENT_CLASSIFICATION, '" + piClass + "', 'ture', 'false')  from pi_report where pirid = '" + pirID + "'");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			rtn1 = reportableListObject.getValue(2);
			rtn2 = reportableListObject.getValue(3);
			if ("notsame".equals(rtn1) || "notsame".equals(rtn2)) {

				if ("0".equals(piNearMiss)) {
					piNearMiss = "No";
				} else {
					piNearMiss = "Yes";
				}

				alertEmailBody = "Reporter Near Miss : " + reportableListObject.getValue(0) + "<br/>";
				alertEmailBody += "Reporter Incident Classfication : " + getClassDesc(ConstantsServerSide.SITE_CODE, reportableListObject.getValue(1)) + "<br/>";
				alertEmailBody += "<br/>";
				alertEmailBody += "PI Near Miss : " + piNearMiss + "<br/>";
				alertEmailBody += "Reporter Incident Classfication : " + getClassDesc(ConstantsServerSide.SITE_CODE, piClass) + "<br/>";
				return alertEmailBody;
			}
		}
		return "";
	}

	// update PI near miss and classification
	public static String updatePIClass(UserBean userBean, String pirID, String piNearMiss, String piClass, String inOutPatient, String hazardousCondition, String outcome, String piRemarks) {
		String piType = getIncidentTypeByClass(piClass);

		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("UPDATE pi_report SET PIR_NEAR_MISS_PI = ?, PIR_INCIDENT_TYPE_PI = ?, PIR_INCIDENT_CLASS_PI = ?, PIR_INOUT_PAT = ?, PIR_HAZARDOUS_CONDITION_PI = ?, PIR_OUTCOME = ?, PIR_PI_REMARK4 = ? ");
		sqlStr.append("WHERE pirid = ? ");

		UtilDBWeb.updateQueue(sqlStr.toString(), new String[] {piNearMiss, piType, piClass, inOutPatient, hazardousCondition, outcome, piRemarks, pirID });

		// send cc email to DON if pi class not equal to reporter
//		String alertEmailBody = piClassDifferetReporterClass(pirID, piNearMiss, piClass);
//		if (!"".equals(alertEmailBody)) {
//			// send email to DON
//			alert(userBean.getStaffID(), "PI redefined the near miss / incident classfication, ", pirID, "", "", "piclassdiff", "", getNurseAdminEmail(), alertEmailBody, "");
//		}

		return "";
	}

	// Reject report by PI
	public static String rejectReport(UserBean userBean, String pirID) {
//		String alertEmailBody = null;
//		String piType = null;

		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("update pi_report set enable = '0', pir_status = '6' where pirid = ?");

		UtilDBWeb.updateQueue(sqlStr.toString(), new String[] {pirID });

		// send email to those have involved to this report
//		alert(userBean.getStaffID(), "PI redefined the near miss / incident classfication, ", pirID, "", "", "piclassdiff", "", getNurseAdminEmail(), alertEmailBody, "");

		return "";
	}

	public static String addPIActionRequest(UserBean userBean, String pirID,  String actionRequest, String compDate, String actionrequeststaff, String requestContent,
			String autoReminder, String reqType) {

		String pirpiid = getNextPIActionRequestID();

		UtilDBWeb.updateQueue(sqlStr_insertPIREPORT_PI_COMMENT,
			new String[] {pirID, pirpiid, actionRequest,	compDate, actionrequeststaff, requestContent, autoReminder,
					 userBean.getStaffID(), userBean.getStaffID(), reqType});

		return pirpiid;
	}

	public static String setPIActionRequestReplied(UserBean userBean, String pirID, String pirPID) {
		UtilDBWeb.updateQueue("update pi_report_pi_action_request set PIR_REPLY_CONTENT = '.', modified_date = sysdate where pir_piid = ?",new String[] {pirPID});

		return "";
	}

	public static String updatePIActionRequest(UserBean userBean, String pirID, String pirpiid, String replyContent) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("UPDATE pi_report_pi_action_request ");
		sqlStr.append("SET PIR_REPLY_CONTENT = ?, MODIFIED_USER = ?, PIR_MODIFIED_DATE = sysdate ");
		sqlStr.append("WHERE PIRID = ? and PIR_PIID = ? ");

		UtilDBWeb.updateQueue(sqlStr.toString(), new String[] {replyContent, userBean.getStaffID(), pirID, pirpiid});

		return "";
	}

	public static String updatePxReportNurseFlag(String pirID, String flag) {
		StringBuffer sqlStr = new StringBuffer();
		sqlStr.append("update pi_report set PIR_PX_REPORT_NURSE = ? where pirid = ?");

		UtilDBWeb.updateQueue(sqlStr.toString(), new String[] {flag, pirID});

		return "";
	}

	// SHOWS Action Request Dialog
	public static ArrayList fetchReportActionRequestUpDialog(String pirID, String staffID) {
		String sql = sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG;

		if (!IsPIManager(staffID)) {
			sql = sql + " and create_user = ? ";
		}
		sql += " ORDER BY CREATE_DATE DESC";

		if (IsPIManager(staffID)) {
			return UtilDBWeb.getReportableList(sql,
					new String[] {pirID});
		}
		else {
			return UtilDBWeb.getReportableList(sql,
					new String[] {pirID, staffID});
		}

	}

	// SHOWS Action Request Dialog by excelRow
	public static ArrayList fetchReportActionRequestUpDialogByRow(String pirID, String pirPIID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG_BYROW,
											new String[] {pirID, pirPIID});
	}

	// SHOWS Follow up Dialog
	public static ArrayList fetchReportActionRequestUpDialogContent(String pirID, String pirflwID) {

		return UtilDBWeb.getReportableList(sqlStr_fetchPIREPORT_ACTIONREQUEST_DIALOG_CONTENT,
											new String[] {pirID, pirflwID});
	}

	// check has redo report
	public static String hasRedoReport(String StaffID) {
		ArrayList result = UtilDBWeb.getReportableList(
				"select pf.PIRID from pi_report_flwup_dialog pf, pi_report p where pir_flwid = ( " +
					"select max(pir_flwid) from pi_report_flwup_dialog where pf.pirid = p.pirid and p.pir_enabled = 1 and pir_flw_type = 'Redo' and pir_res_party = '" + StaffID + "') and pir_res_party = '" + StaffID + "'");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			return reportableListObject.getValue(0);

		}
		return "";
	}

	public static String getRptSts(String pirID) {
		ArrayList result = UtilDBWeb.getReportableList(
							"select pir_status from pi_report where pirid = '" + pirID + "'");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			return reportableListObject.getValue(0);

		}
		return "";
	}
	// END - check has redo report

	public static boolean updateTrafficLight(String[] pirIDs, String[] Traffics, String[] piRemarks, String[] piRemarks2, String[] piRemarks3) {
		boolean result;
		for (int i = 0; i < pirIDs.length; i++) {
			result = UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_TRAFFIC_LIGHT,
					new String[] {Traffics[i], piRemarks[i], piRemarks2[i], piRemarks3[i], pirIDs[i] });
			if (!result) {
				return false;
			}
		}
		return true;
	}

	public static boolean updateDONremark(String[] pirIDs, String[] donRemarks) {
		boolean result;
		for (int i = 0; i < pirIDs.length; i++) {
			result = UtilDBWeb.updateQueue(sqlStr_updateDONREPORT_REMARK,
					new String[] {donRemarks[i], pirIDs[i] });
			if (!result) {
				return false;
			}
		}
		return true;
	}

	public static boolean updateVPAremark(String[] pirIDs, String[] vpaRemarks) {
		boolean result;
		for (int i = 0; i < pirIDs.length; i++) {
			result = UtilDBWeb.updateQueue(sqlStr_updateVPAREPORT_REMARK,
					new String[] {vpaRemarks[i], pirIDs[i] });
			if (!result) {
				return false;
			}
		}
		return true;
	}

	public static boolean updateUMDMRemark(String[] pirIDs, String[] umdmRemarks, String[] umdmRemarks2, String[] umdmRemarks3) {
		boolean result;
		for (int i = 0; i < pirIDs.length; i++) {
			result = UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_UMDMREMARK,
					new String[] {umdmRemarks[i], pirIDs[i] });
			if (!result) {
				return false;
			}
		}
		return true;
	}

	public static boolean updatePiAssInjury(String pirID, String AssInjury) {
		return UtilDBWeb.updateQueue(sqlStr_updatePIREPORT_PI_ASS_INJURY, new String[] {AssInjury, pirID });
	}

	public static String getPreviousStatus(String pirID) {
		String oldRptSts = null;
		String newRptSts = null;
		int redoCount = 1;

		ArrayList<ReportableListObject> record = fetchReportBasicInfo(pirID);
		ReportableListObject row = null;
		if (record.size() > 0) {
			row = (ReportableListObject) record.get(0);
			oldRptSts = row.getValue(9);
		}

		if (oldRptSts != null) {
			record = UtilDBWeb.getReportableList("select pir_flw_type, pir_wfl_status from pi_report_flwup_dialog where pirid = ? and pir_flw_type != 'Save' order by pir_flwid desc", new String[] { pirID });
			for (int i = 0; i < record.size() && newRptSts == null; i++) {
				row = (ReportableListObject) record.get(i);
				if ("Redo".equals(row.getValue(0))) {
					redoCount++;
				} else if (redoCount == 0) {
					newRptSts = row.getValue(1);
				} else {
					redoCount--;
				}
			}
		}

		if (newRptSts == null || "0".equals(newRptSts) || "8".equals(newRptSts) || "11".equals(newRptSts) || "12".equals(newRptSts)) {
			newRptSts = "0";
		}

		return newRptSts;
	}

	public static String getNextStatus(UserBean userBean, String pirID, String rptSts, String command) {
		String status = null;

		ArrayList record = null;
		ReportableListObject row = null;

		System.out.println("[PiPeport] HAT_GET_IRSSTATUS pirID="+pirID+", staff_id="+(userBean != null ? userBean.getStaffID() : "null")+",rptSts="+rptSts+", command="+command);
		
		record = UtilDBWeb.getFunctionResults("HAT_GET_IRSSTATUS", new String[] { "NEXT", userBean != null ? userBean.getStaffID() : null, pirID, rptSts, command });
		if (record.size() > 0) {
			row = (ReportableListObject) record.get(0);
			status = row.getValue(0);
			if (status != null) {
				return status;
			}
		}

		return rptSts;
	}

	public static Boolean IsReminderSent(String sendType, String reminderType) { // is Pharmacy Admin ?
		StringBuffer sqlStr = new StringBuffer();
		// check vpa/coo...
		sqlStr.setLength(0);
		sqlStr.append("SELECT send_date FROM PI_REPORT_REMINDER_LOG WHERE SEND_DATE = to_char(sysdate, 'mmyyyy') and SEND_TYPE = ? and REMINDER_TYPE = ? ");
		ArrayList<ReportableListObject> record = UtilDBWeb.getReportableList(sqlStr.toString(), new String[] {sendType, reminderType});
		return (record.size() > 0);
	}

	public static boolean addReminderLog(String sendType, String remindType, String remark) {
		return UtilDBWeb.updateQueue(sqlStr_insertREMINDER_LOG, new String[] {sendType, remindType, remark});
	}

	//Pi send reminder
	public static boolean sendFurtherActionReminder(UserBean userBean) {
		ReportableListObject dbRow = null;
		String actionRequest = null;
		String compDate = null;
		String requestContent = null;
		String actionrequeststaff = null;
		String pirID = null;
		String pirPIID = null;
		String requesterEmail = null;
		String sendType = "PI";
		String reminderType = "FURTHERACTION";
		String remark = "";

		// check reminder snet ?
		 if (!IsReminderSent(sendType, reminderType)) {
			 // insert sent log
			 addReminderLog(sendType, reminderType, remark);
			 //

			 ArrayList result = UtilDBWeb.getReportableList("select pa.PIRID, PIR_PIID, PIR_ACTION_REQUEST, to_char(PIR_COMP_DATE, 'dd/mm/yyyy'), PIR_REQUEST_STAFF, PIR_REQUEST_CONTENT from pi_report_pi_action_request pa, pi_report p where p.pirid = pa.pirid and p.enable = 1 and pa.pir_reply_content is null and pa.create_date >= TRUNC(SysDate,'YEAR') and pa.req_type = 'PI' order by pa.pirid");
			 for (int j = 0; j < result.size(); j++) {
				dbRow = (ReportableListObject) result.get(j);
				if (result.size() > 0) {
					//action request email
					pirID = dbRow.getValue(0);
					pirPIID = dbRow.getValue(1);
					actionRequest = GetPIActionRequest("R" + dbRow.getValue(2), userBean);
					actionrequeststaff = UserDB.getUserEmail(actionrequeststaff);
					compDate = dbRow.getValue(3);
					requestContent = dbRow.getValue(5);
					requesterEmail = UserDB.getUserEmail(dbRow.getValue(4));
					sendEmailActionRequest(userBean, actionRequest, pirID, pirPIID, "", "ActionRequestReminder", "", requesterEmail, compDate, requestContent);
				}
			}
		 }

		return true;
	}

	public static boolean sendIncidentReportReminder(UserBean userBean) {
		ReportableListObject dbRow = null;
		ReportableListObject Row = null;
		String sql = null;
		String pirID = null;
		String toEmail0 = null;
		String toEmail1 = null;
		String toEmail2 = null;
		String rptSts = null;
		String incident_classification = null;
		String sendType = "PI";
		String reminderType = "REPORT";
		String remark = "";
		String rptCreator = "";

		sql = "select p.create_date, p.pirid, p.pir_status, fl.pir_flw_from, fl.pir_res_party, fl.pir_res_party2, p.pir_incident_classification, co_staffname ";
		sql += "from pi_report p, pi_report_flwup_dialog fl, co_staffs ";
		sql += "where co_staff_id = pir_res_party and p.enable = 1 and p.pir_status not in ('3', '5') ";
		sql += "and p.pirid = fl.pirid ";
		sql += "and p.create_date >= TRUNC(SysDate,'YEAR') ";
		sql += "and fl.enable = 1 and fl.pir_flwid in (select max(sl.pir_flwid) from pi_report_flwup_dialog sl where sl.pirid = fl.pirid) ";
		sql += "order by p.pirid desc ";

		// check reminder snet ?
		 if (!IsReminderSent(sendType, reminderType)) {
			 // insert sent log
			 addReminderLog(sendType, reminderType, remark);
			 //
			 ArrayList result = UtilDBWeb.getReportableList(sql);
			 for (int j = 0; j < result.size(); j++) {
				dbRow = (ReportableListObject) result.get(j);
				if (result.size() > 0) {
					pirID = dbRow.getValue(1);
					rptSts = dbRow.getValue(2);
					toEmail0 = UserDB.getUserEmail(dbRow.getValue(3));
					toEmail1 = UserDB.getUserEmail(dbRow.getValue(4));
					toEmail2 = UserDB.getUserEmail(dbRow.getValue(5));
					rptCreator = dbRow.getValue(7);
					incident_classification = dbRow.getValue(6);

					if ("7".equals(rptSts)) { // renminder for Wait for OSH/ICN acceptance
						ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "oshicn");
						for (int i = 0; i < flwUpDialogreportDtl.size(); i++) {
							Row = (ReportableListObject) flwUpDialogreportDtl.get(i);
							if (flwUpDialogreportDtl.size() > 0) {
								sendEmailReferOshIcnPharmacy(userBean, incident_classification, pirID, "RemindRefer", "", Row.getValue(2), "");
							}
						}
					}
					else if ("8".equals(rptSts)) { // renminder for Wait for Pharmacy acceptance	- 8
						ArrayList flwUpDialogreportDtl = fetchReportSentinelEventAllPerson(userBean, "pharmacy");
						for (int k = 0; k < flwUpDialogreportDtl.size(); k++) {
							Row = (ReportableListObject) flwUpDialogreportDtl.get(k);
							if (flwUpDialogreportDtl.size() > 0) {
								sendEmailReferOshIcnPharmacy(userBean, incident_classification, pirID, "RemindRefer", "", Row.getValue(2), "");
							}
						}
					}
					else {
						if ("0".equals(rptSts)) { // junior staff not have email, send remail to the um/dm
							alert(userBean.getStaffID(), "", pirID, rptCreator, "0", "RemindSubmit", "", toEmail0, "", "");
						} else {
							alert(userBean.getStaffID(), "", pirID, "", "", "RemindSubmit", "", toEmail1, "", "");
							if (!"".equals(toEmail2) && toEmail2 != null) {
								alert(userBean.getStaffID(), "", pirID, "", "", "RemindSubmit", "", toEmail2, "", "");
							}
						}
					}
				}
			}
		 }
		 return true;
	}

	public static boolean sendPostExamReportReminder(UserBean userBean) {
		ReportableListObject dbRow = null;
		ReportableListObject Row = null;
		String sql = null;
		String pirID = null;
		String toEmail1 = null;
		String toEmail2 = null;
		String Respond1 = null;
		String Respond2 = null;
		String rptSts = null;
		String incident_classification = null;
		String sendType = "PI";
		String reminderType = "DOCTOR";
		String remark = "";

		sql = "select fl.pirid, fl.pir_wfl_status, fl.pir_flw_from, cs.co_staffname, p.pir_incident_class_pi ";
		sql += "from pi_report p, pi_report_flwup_dialog fl, co_staffs cs ";
		sql += "where ";
		sql += "fl.pir_flw_from = cs.co_staff_id and ";
		sql += "p.pirid = fl.pirid ";
		sql += "and p.enable = 1 ";
		sql += "and p.pir_pi_ass_injury is null ";
		sql += "and p.pir_incident_class_pi in ('1', '4', '3', '6') ";
		sql += "and p.create_date < sysdate - 7 ";
		sql += "and p.create_date >= TRUNC(SysDate,'YEAR') ";
		sql += "and (p.PIR_PI_ASS_INJURY is null or p.PIR_PI_ASS_INJURY <> '5') ";
		sql += "and fl.pir_wfl_status in ('2') and fl.pir_flw_type <> 'Redo' ";
		sql += "and fl.enable = 1 ";
		sql += "and fl.pir_flwid in (select max(sl.pir_flwid) from pi_report_flwup_dialog sl where sl.pirid = fl.pirid and sl.pir_wfl_status = fl.pir_wfl_status and sl.pir_flw_type = fl.pir_flw_type) ";
		sql += "union all ";
		sql += "select fl.pirid, fl.pir_wfl_status, fl.pir_flw_from, cs.co_staffname, p.pir_incident_class_pi ";
		sql += "from pi_report p, pi_report_flwup_dialog fl, co_staffs cs ";
		sql += "where ";
		sql += "fl.pir_flw_from = cs.co_staff_id and ";
		sql += "p.pirid = fl.pirid ";
		sql += "and p.enable = 1 ";
		sql += "and p.pir_pi_ass_injury is null ";
		sql += "and p.pir_incident_class_pi in ('2', '5', '7') ";
		sql += "and p.create_date < sysdate - 7 ";
		sql += "and p.create_date >= TRUNC(SysDate,'YEAR') ";
		sql += "and (p.PIR_PI_ASS_INJURY is null or p.PIR_PI_ASS_INJURY <> '5') ";
		sql += "and fl.pir_wfl_status in ('1') and fl.pir_flw_type <> 'Redo' ";
		sql += "and fl.enable = 1 ";
		sql += "and fl.pir_flwid in (select max(sl.pir_flwid) from pi_report_flwup_dialog sl where sl.pirid = fl.pirid and sl.pir_wfl_status = fl.pir_wfl_status and sl.pir_flw_type = fl.pir_flw_type) ";
		sql += "union all ";
		sql += "select fl.pirid, fl.pir_wfl_status, fl.pir_flw_from, cs.co_staffname, p.pir_incident_class_pi ";
		sql += "from pi_report p, pi_report_flwup_dialog fl, co_staffs cs ";
		sql += "where ";
		sql += "fl.pir_flw_from = cs.co_staff_id and ";
		sql += "p.pirid = fl.pirid ";
		sql += "and p.enable = 1 ";
		sql += "and p.pir_pi_ass_injury is null ";
		sql += "and p.pir_incident_class_pi in ('8', '530') ";
		sql += "and p.create_date < sysdate - 7 ";
		sql += "and p.create_date >= TRUNC(SysDate,'YEAR') ";
		sql += "and (p.PIR_PI_ASS_INJURY is null or p.PIR_PI_ASS_INJURY <> '5') ";
		sql += "and fl.pir_wfl_status in ('1') and fl.pir_flw_type <> 'Redo' ";
		sql += "and fl.enable = 1 ";
		sql += "and fl.pir_flwid in (select max(sl.pir_flwid) from pi_report_flwup_dialog sl where sl.pirid = fl.pirid and sl.pir_wfl_status = fl.pir_wfl_status and sl.pir_flw_type = fl.pir_flw_type) ";
		sql += "order by pirid ";

		// check reminder snet ?
		if (!IsReminderSent(sendType, reminderType)) {
			// insert sent log
			addReminderLog(sendType, reminderType, remark);
			//

			ArrayList result = UtilDBWeb.getReportableList(sql);
			for (int j = 0; j < result.size(); j++) {
				dbRow = (ReportableListObject) result.get(j);
				if (result.size() > 0) {
					//action request email
					pirID = dbRow.getValue(0);
					rptSts = "";

					Respond1 = dbRow.getValue(2);
					if (Respond1 == null) {
						Respond1 = "";
					}

					toEmail1 = UserDB.getUserEmail(dbRow.getValue(2));
					incident_classification = dbRow.getValue(4);

					// dont send to phac director
					if (!Respond1.equals(getMedicationReportDhead(""))) {
						alert(userBean.getStaffID(), incident_classification, pirID, "", rptSts, "PostExamFormReminder", "", toEmail1, "", "");
					}
				}
			}
		}
		return true;
	}

	public static boolean sendCeoReminder(UserBean userBean) {
		ReportableListObject dbRow = null;
		ReportableListObject Row = null;
		String sql = null;
		String pirID = null;
		String toEmail1 = null;
		String toEmail2 = null;
		String Respond1 = null;
		String Respond2 = null;
		String rptSts = null;
		String incident_classification = null;

		toEmail1 = getCeoEmail();
		alert(userBean.getStaffID(), incident_classification, pirID, "", rptSts, "CeoReminder", "", toEmail1, "", "");

		return true;
	}

	//END - Pi send reminder

	/*
	public static Workbook SaveExceltemp() {
		HSSFWorkbook wb = null;

		// New method:
		wb = new HSSFWorkbook();

		// Old method:
		OutputStream inp = null;
		try {
			File file = new File("hkahrisk.xls");
//			if (!file.exists()) {
//				file.createNewFile();
//			}
			inp = new FileOutputStream(file);
			//CreationHelper createHelper = wb.getCreationHelper();
			//Sheet sheet1 = wb.createSheet("HKAH Risk Management Data");

			//Sheet sheet1 = wb.getSheet("HKAH");
			//if (sheet1 == null) {
			//}

			// for each sheet in the workbook
			for (int i = 0; i < wb.getNumberOfSheets(); i++) {
			}

			wb.write(inp);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (inp != null) {
				try {
					inp.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		//wb = WorkbookFactory.create(inp);
		return wb;
	}

	public static HSSFWorkbook SaveExcel2(UserBean userBean, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;

		try {
			fileInputStream = new FileInputStream("hkahrisk.xls");

			workbook = new HSSFWorkbook(fileInputStream);

			// for each sheet in the workbook
			//for (int i = 0; i < workbook.getNumberOfSheets(); i++) {
			//}

			sheet = workbook.getSheet("HKAH");
			excelRow = sheet.getRow(0);

			rptDate = Calendar.getInstance().get(Calendar.MONTH);
			//excelRow.createCell(5).setCellValue("May-14");

			ArrayList excelReport = null; //getPIReportExcelList(userBean, incident_date_from, incident_date_to);
			for (int j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.createRow(j + 3);
					//cell = excelRow.createCell(0);
					//cell.setCellValue(new HSSFRichTextString("12-04-2014"));
					excelRow.createCell(0).setCellValue(dbRow.getValue(4).substring(0,10));
					excelRow.createCell(1).setCellValue(dbRow.getValue(21));
					excelRow.createCell(2).setCellValue(dbRow.getValue(9));
					excelRow.createCell(3).setCellValue(dbRow.getValue(10));
					excelRow.createCell(4).setCellValue(dbRow.getValue(5));
					excelRow.createCell(5).setCellValue(dbRow.getValue(1));

					// assess of injury
					if (!"0".equals(dbRow.getValue(16))) {
						excelRow.createCell(6).setCellValue(dbRow.getValue(16));
					} else if (!"0".equals(dbRow.getValue(17))) {
						excelRow.createCell(6).setCellValue(dbRow.getValue(17));
					} else if (!"0".equals(dbRow.getValue(18))) {
						excelRow.createCell(6).setCellValue(dbRow.getValue(18));
					} else if (!"0".equals(dbRow.getValue(19))) {
						excelRow.createCell(6).setCellValue(dbRow.getValue(19));
					} else if (!"0".equals(dbRow.getValue(20))) {
						excelRow.createCell(6).setCellValue(dbRow.getValue(20));
					}

					// "Related Staff from"
					if ("2".equals(dbRow.getValue(14)) || "5".equals(dbRow.getValue(14)) || "7".equals(dbRow.getValue(14))) {
						excelRow.createCell(7).setCellValue("Y");
					} else {
						if ("checked".equals(dbRow.getValue(12))) {
							excelRow.createCell(7).setCellValue("Y");
						} else if ("checked".equals(dbRow.getValue(13))) {
							excelRow.createCell(7).setCellValue("N");
						}
					}

					// notify Dr ?
					excelRow.createCell(8).setCellValue(dbRow.getValue(15));
					// disk rating
					excelRow.createCell(9).setCellValue(dbRow.getValue(11));
				}
			}

			//cell.setCellStyle(style);
			//sheet.autoSizeColumn((short) 1);

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}
	*/

	// get realted staff from
	// SHOWS INCIDENT REPORT - REPORT MST
	public static String getReportRelatedStaffFrom(String pirID) {

		//pirID = "229";
		ReportableListObject row = null;
		String rtnStaffFrom = "";

		ArrayList relatedStaffFrom = UtilDBWeb.getReportableList("select distinct co_department_desc from pi_report_involve_person join co_departments on co_department_code = dept_code where pirid = ? and is_staff = 1 and enable = 1",
											new String[] {pirID});
		if (relatedStaffFrom.size() > 0) {
			for (int i = 0; i < relatedStaffFrom.size(); i++) {
				row = (ReportableListObject) relatedStaffFrom.get(i);
				if ("".equals(rtnStaffFrom)) {
					rtnStaffFrom = row.getValue(0);
				}
				else {
					rtnStaffFrom = rtnStaffFrom + ", " + row.getValue(0);
				}
			}
		}

		// assume the reporter is the related staff without enter involving person
		relatedStaffFrom = UtilDBWeb.getReportableList("SELECT D.CO_DEPARTMENT_DESC from pi_report p left outer join CO_DEPARTMENTS D on P.PIR_DEPT_CODE = D.CO_DEPARTMENT_CODE where pirid = ?",
				new String[] {pirID});
		if (relatedStaffFrom.size() > 0) {
			for (int i = 0; i < relatedStaffFrom.size(); i++) {
				row = (ReportableListObject) relatedStaffFrom.get(i);
				if ("".equals(rtnStaffFrom)) {
					rtnStaffFrom = row.getValue(0);
				}
				else {
					rtnStaffFrom = rtnStaffFrom + ", " + row.getValue(0);
				}
			}
		}

		//

		return rtnStaffFrom;

	}

	public static String getMonthWord(String month) {
		String rtn = null;

		if ("1".equals(month)) {
			rtn = "Jan";
		} else if ("2".equals(month)) {
			rtn = "Feb";
		} else if ("3".equals(month)) {
			rtn = "Mar";
		} else if ("4".equals(month)) {
			rtn = "Apr";
		} else if ("5".equals(month)) {
			rtn = "May";
		} else if ("6".equals(month)) {
			rtn = "Jun";
		} else if ("7".equals(month)) {
			rtn = "Jul";
		} else if ("8".equals(month)) {
			rtn = "Aug";
		} else if ("9".equals(month)) {
			rtn = "Sep";
		} else if ("10".equals(month)) {
			rtn = "Oct";
		} else if ("11".equals(month)) {
			rtn = "Nov";
		} else if ("12".equals(month)) {
			rtn = "Dec";
		}

		return rtn;
	}

	public static String getLastMonthDay(String currMonth, String currYear) {
		StringBuffer sqlStr = new StringBuffer();
		String sql = null;
		String rtn = null;
		String currDate = null;
		//select to_date('01032015', 'ddmmyyyy') - 1 from dual;
		//DD/MM/YYYY
		if (currMonth.equals("12")) {
			currDate = "1/" + "1/" + Integer.toString(Integer.parseInt(currYear) + 1);
		} else {
			currDate = "1/" + Integer.toString(Integer.parseInt(currMonth) + 1) + "/" + currYear;
		}
		sql = "select to_char(to_date('" + currDate + "', 'dd/mm/yyyy') - 1, 'dd/mm/yyyy') from dual ";
		ArrayList result = UtilDBWeb.getReportableList(sql);
		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			rtn = reportableListObject.getValue(0);
		}
		return rtn;
	}

	public static String getLastDay(String currMonth, String currYear) {
		StringBuffer sqlStr = new StringBuffer();
		String sql = null;
		String rtn = null;
		String currDate = null;
		//select to_date('01032015', 'ddmmyyyy') - 1 from dual;
		//DD/MM/YYYY
		if (currMonth.equals("12")) {
			currDate = "1/" + "1"+ "/" + Integer.toString(Integer.parseInt(currYear) + 1);
		} else {
			currDate = "1/" + Integer.toString(Integer.parseInt(currMonth) + 1) + "/" + currYear;
		}
		sql = "select to_char(to_date('" + currDate + "', 'dd/mm/yyyy') - 1, 'dd') from dual ";
		//select to_char(to_date('01102015','ddmmyyyy') - 1, 'dd') from dual;
		ArrayList result = UtilDBWeb.getReportableList(sql);
		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			rtn = reportableListObject.getValue(0);
		}
		return rtn;
	}

	public static boolean CEOReportGenSheet(UserBean userBean, Boolean IsPIManager, HSSFWorkbook workbook, HSSFSheet sheet, String currMonth, String currYear) {
		String inc_date_from = null;
		String inc_date_to = null;
		String rptTitle = null;
		ReportableListObject dbRow = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle styleLateSubmit = null;
		HSSFCellStyle styleNormal = null;
		HSSFCellStyle style3 = null;
		HSSFCellStyle styleColHeader = null;
		// Assessment of injury
		Integer no_affect = 0;
		Integer no_harm = 0;
		Integer temp_harm = 0;
		Integer perm_harm = 0;
		Integer death = 0;
		// incident class hk
		Integer sum_equip = 0;
		Integer sum_med = 0;
		Integer sum_adr = 0;
		Integer sum_pat_fall = 0;
		Integer sum_pat_inj = 0;
		Integer sum_sharp_inj = 0;
		Integer sum_staff_inj = 0;
		Integer sum_staff_fall = 0;
		Integer sum_sec = 0;
		Integer sum_vis_fall = 0;
		Integer sum_vis_gen = 0;
		Integer sum_others = 0;
		HSSFRow excelRow2 = null;
		Integer ColIndex = 0;
		// incident class tw
		Integer sum_pat_fall_tw = 0;
		Integer sum_staff_fall_tw = 0;
		Integer sum_vis_fall_tw = 0;
		Integer sum_pat_inj_tw = 0;
		Integer sum_staff_inj_tw = 0;
		Integer sum_vis_gen_tw = 0;
		Integer sum_sharp_inj_tw = 0;
		Integer sum_med_tw = 0;
		Integer sum_adr_tw = 0;
		Integer sum_sec_tw = 0;
		Integer sum_equip_tw = 0;
		Integer sum_inc_opr_tw = 0;
		Integer sum_blood_tran_tw = 0;
		Integer sum_others_tw = 0;

		sheet = workbook.getSheet(currMonth);

		styleNormal = workbook.createCellStyle();
		styleLateSubmit = workbook.createCellStyle();
		excelRow = sheet.getRow(0);
		styleNormal = excelRow.getCell(0).getCellStyle();
		styleLateSubmit = excelRow.getCell(1).getCellStyle();
		excelRow = sheet.getRow(3);
		styleColHeader = excelRow.getCell(0).getCellStyle();

		style3 = workbook.createCellStyle();
		// set title year
		excelRow = sheet.getRow(2);
		style3 = excelRow.getCell(0).getCellStyle();
		rptTitle = excelRow.getCell(0).getStringCellValue();
		//style2.setFillForegroundColor(HSSFColor.GREY_50_PERCENT.index);
		//style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		//excelRow.getCell(0).setCellValue("Month-end Summary Report of Incident Risk Management Data Time Peroid: " + getMonthWord(currMonth) + " " + currYear);
		excelRow.getCell(0).setCellValue(rptTitle + getMonthWord(currMonth) + " " + currYear);
		excelRow.getCell(0).setCellStyle(style3);

		workbook.setSheetName(workbook.getSheetIndex(sheet), getMonthWord(currMonth) + " " + currYear);
		inc_date_from = "01/" + currMonth + "/" + currYear;
		inc_date_to = getLastMonthDay(currMonth, currYear);
		ArrayList excelReport = getPIReportList(userBean, "ceo", inc_date_from, inc_date_to,
			"", "", "", "", "",
			"", "", "", "", "",
			"", "", "", "", "",
			"", "", "", "",
			"", "", "", "", "N", "", userBean.getDeptCode(), userBean.getStaffID());
		int i = 0;
		int j = 0;

		for (j = 0; j < excelReport.size(); j++) {
			dbRow = (ReportableListObject) excelReport.get(j);
			if (excelReport.size() > 0) {
				excelRow = sheet.getRow(j + 4);

				// if late submit report, set blue color
				if ("Y".equals(dbRow.getValue(55))) {
					for (i = 0; i < 10; i++) {
						excelRow.getCell(i).setCellStyle(styleLateSubmit);
					}
				}
				excelRow.getCell(0).setCellValue(dbRow.getValue(0));
				excelRow.getCell(1).setCellValue(dbRow.getValue(4).substring(0,10));
				excelRow.getCell(2).setCellValue(dbRow.getValue(21));
				excelRow.getCell(3).setCellValue(dbRow.getValue(9));
				if (IsPIManager) {
					excelRow.getCell(5).setCellValue(dbRow.getValue(25));
					excelRow.getCell(4).setCellValue(dbRow.getValue(22));
					ColIndex = 0;
				} else {
					ColIndex = -2;
				}
				excelRow.getCell(6 + ColIndex).setCellValue(dbRow.getValue(10));
				if ("Others".equals(dbRow.getValue(5))) {
					excelRow.getCell(7 + ColIndex).setCellValue(dbRow.getValue(56));
				} else {
					excelRow.getCell(7 + ColIndex).setCellValue(dbRow.getValue(5));
				}

				// related staff from
				excelRow.getCell(8 + ColIndex).setCellValue(getReportRelatedStaffFrom(dbRow.getValue(0)));

				// assess of injury
				//if ("2".equals(dbRow.getValue(6)) || "5".equals(dbRow.getValue(6)) || "7".equals(dbRow.getValue(6))) {
				if (!"0".equals(dbRow.getValue(16))) {
					excelRow.getCell(9 + ColIndex).setCellValue(dbRow.getValue(16));
				} else if (!"0".equals(dbRow.getValue(17))) {
					excelRow.getCell(9 + ColIndex).setCellValue(dbRow.getValue(17));
				} else if (!"0".equals(dbRow.getValue(18))) {
					excelRow.getCell(9 + ColIndex).setCellValue(dbRow.getValue(18));
				} else if (!"0".equals(dbRow.getValue(19))) {
					excelRow.getCell(9 + ColIndex).setCellValue(dbRow.getValue(19));
				} else if (!"0".equals(dbRow.getValue(20))) {
					excelRow.getCell(9 + ColIndex).setCellValue(dbRow.getValue(20));
				} else {
					excelRow.getCell(9 + ColIndex).setCellValue(dbRow.getValue(28));
				}
				//} else {
				//	excelRow.getCell(7).setCellValue("");
				//}
				if ("No Affect".equals(excelRow.getCell(9 + ColIndex).getStringCellValue())) {
					no_affect = no_affect + 1;
				}
				if ("Caused No Harm".equals(excelRow.getCell(9 + ColIndex).getStringCellValue())) {
					no_harm = no_harm + 1;
				}
				if ("Caused Temporary Harm".equals(excelRow.getCell(9 + ColIndex).getStringCellValue())) {
					temp_harm = temp_harm + 1;
				}
				if ("Caused Permanent Harm".equals(excelRow.getCell(9 + ColIndex).getStringCellValue())) {
					perm_harm = perm_harm + 1;
				}
				if ("Causing Death".equals(excelRow.getCell(9 + ColIndex).getStringCellValue())) {
					death = death + 1;
				}
				// notify Dr ?
				if (ConstantsServerSide.isHKAH()) {
					if ("2".equals(dbRow.getValue(14)) || "5".equals(dbRow.getValue(14)) || "7".equals(dbRow.getValue(14))) {
						excelRow.getCell(10 + ColIndex).setCellValue("Y");
					} else {
						if ("checked".equals(dbRow.getValue(12))) {
							excelRow.getCell(10 + ColIndex).setCellValue("Y");
						} else if ("checked".equals(dbRow.getValue(23))) {
							excelRow.getCell(10 + ColIndex).setCellValue("Y");
						} else if ("checked".equals(dbRow.getValue(27))) {
							excelRow.getCell(10 + ColIndex).setCellValue("Y");
						} else if ("checked".equals(dbRow.getValue(13))) {
							excelRow.getCell(10 + ColIndex).setCellValue("N");
						} else {
							excelRow.getCell(10 + ColIndex).setCellValue(" ");
						}
					}
				} else if (ConstantsServerSide.isTWAH()) {
					if ("2".equals(dbRow.getValue(14)) || "5".equals(dbRow.getValue(14)) || "7".equals(dbRow.getValue(14))) {
						excelRow.getCell(10 + ColIndex).setCellValue("Y");
					} else if ("1".equals(dbRow.getValue(14)) || "4".equals(dbRow.getValue(14)) || "6".equals(dbRow.getValue(14)) || "10".equals(dbRow.getValue(14)) ||
								"2092".equals(dbRow.getValue(14)) || "2172".equals(dbRow.getValue(14))) {
						if ("".equals(dbRow.getValue(57))) {
							excelRow.getCell(10 + ColIndex).setCellValue("N");
						} else if (dbRow.getValue(57) == null) {
							excelRow.getCell(10 + ColIndex).setCellValue("N");
						} else {
							excelRow.getCell(10 + ColIndex).setCellValue("Y");
						}
					} else {
						if ("checked".equals(dbRow.getValue(12))) {
							excelRow.getCell(10 + ColIndex).setCellValue("Y");
						} else if ("checked".equals(dbRow.getValue(23))) {
							excelRow.getCell(10 + ColIndex).setCellValue("Y");
						} else if ("checked".equals(dbRow.getValue(27))) {
							excelRow.getCell(10 + ColIndex).setCellValue("Y");
						} else if ("checked".equals(dbRow.getValue(13))) {
							excelRow.getCell(10 + ColIndex).setCellValue("N");
						}
					}
				}

				if (ConstantsServerSide.isHKAH()) {
					if ("2".equals(dbRow.getValue(6))) {
						sum_staff_fall = sum_staff_fall + 1;
					} else if ("5".equals(dbRow.getValue(6))) {
						sum_staff_inj = sum_staff_inj + 1;
					} else if ("7".equals(dbRow.getValue(6))) {
						sum_sharp_inj = sum_sharp_inj + 1;
					} else if ("1".equals(dbRow.getValue(6))) {
						sum_pat_fall = sum_pat_fall + 1;
					} else if ("4".equals(dbRow.getValue(6))) {
						sum_pat_inj = sum_pat_inj + 1;
					} else if ("3".equals(dbRow.getValue(6))) {
						sum_vis_fall = sum_vis_fall + 1;
					} else if ("6".equals(dbRow.getValue(6))) {
						sum_vis_gen = sum_vis_gen + 1;
					} else if ("8".equals(dbRow.getValue(6))) {
						sum_med = sum_med + 1;
					} else if ("10".equals(dbRow.getValue(6))) {
						sum_others = sum_others + 1;
					} else if ("9".equals(dbRow.getValue(6))) {
						sum_equip = sum_equip + 1;
					} else if ("474".equals(dbRow.getValue(6))) {
						sum_sec = sum_sec + 1;
					}
				} else if (ConstantsServerSide.isTWAH()) {
					if ("1".equals(dbRow.getValue(6))) {
						sum_pat_fall_tw = sum_pat_fall_tw + 1;
					} else if ("2".equals(dbRow.getValue(6))) {
						sum_staff_fall_tw = sum_staff_fall_tw + 1;
					} else if ("3".equals(dbRow.getValue(6))) {
						sum_vis_fall_tw = sum_vis_fall_tw + 1;
					} else if ("4".equals(dbRow.getValue(6))) {
						sum_pat_inj_tw = sum_pat_inj_tw + 1;
					} else if ("5".equals(dbRow.getValue(6))) {
						sum_staff_inj_tw = sum_staff_inj_tw + 1;
					} else if ("6".equals(dbRow.getValue(6))) {
						sum_vis_gen_tw = sum_vis_gen_tw + 1;
					} else if ("7".equals(dbRow.getValue(6))) {
						sum_sharp_inj_tw = sum_sharp_inj_tw + 1;
					} else if ("8".equals(dbRow.getValue(6))) {
						sum_med_tw = sum_med_tw + 1;
					} else if ("530".equals(dbRow.getValue(6))) {
						sum_adr_tw = sum_adr_tw + 1;
					} else if ("474".equals(dbRow.getValue(6))) {
						sum_sec_tw = sum_sec_tw + 1;
					} else if ("9".equals(dbRow.getValue(6))) {
						sum_equip_tw = sum_equip_tw + 1;
					} else if ("2092".equals(dbRow.getValue(6))) {
						sum_inc_opr_tw = sum_inc_opr_tw + 1;
					} else if ("2172".equals(dbRow.getValue(6))) {
						sum_blood_tran_tw = sum_blood_tran_tw + 1;
					} else if ("10".equals(dbRow.getValue(6))) {
						sum_others_tw = sum_others_tw + 1;
					}
				}
				//
				excelRow.getCell(11 + ColIndex).setCellValue(dbRow.getValue(15));

				// phar risk rating
				//excelRow.getCell(9).setCellValue(dbRow.getValue(32));
			}
		}

		// sum "Assessment of Injury (for this month)"
		excelRow = sheet.getRow(32);
		excelRow.getCell(2).setCellValue(no_affect);
		excelRow = sheet.getRow(33);
		excelRow.getCell(2).setCellValue(no_harm);
		excelRow = sheet.getRow(34);
		excelRow.getCell(2).setCellValue(temp_harm);
		excelRow = sheet.getRow(35);
		excelRow.getCell(2).setCellValue(perm_harm);
		excelRow = sheet.getRow(36);
		excelRow.getCell(2).setCellValue(death);
		excelRow = sheet.getRow(37);
		excelRow.getCell(2).setCellFormula("SUM(C33:C37)");

		if (ConstantsServerSide.isHKAH()) {
			// sum Classification according to Indicators (for this month)
			excelRow = sheet.getRow(32);
			excelRow.getCell(5).setCellValue(sum_equip);
			excelRow = sheet.getRow(33);
			excelRow.getCell(5).setCellValue(sum_med);
			// ADR
			excelRow = sheet.getRow(32);
			excelRow.getCell(9).setCellValue(sum_adr);
			//
			excelRow = sheet.getRow(34);
			excelRow.getCell(5).setCellValue(sum_pat_fall);
			excelRow = sheet.getRow(35);
			excelRow.getCell(5).setCellValue(sum_pat_inj);
			excelRow = sheet.getRow(36);
			excelRow.getCell(5).setCellValue(sum_sharp_inj);
			excelRow = sheet.getRow(37);
			excelRow.getCell(5).setCellValue(sum_staff_inj);
			excelRow = sheet.getRow(38);
			excelRow.getCell(5).setCellValue(sum_staff_fall);
			excelRow = sheet.getRow(39);
			excelRow.getCell(5).setCellValue(sum_sec);
			excelRow = sheet.getRow(40);
			excelRow.getCell(5).setCellValue(sum_vis_fall);
			excelRow = sheet.getRow(41);
			excelRow.getCell(5).setCellValue(sum_vis_gen);
			excelRow = sheet.getRow(42);
			excelRow.getCell(5).setCellValue(sum_others);
			excelRow = sheet.getRow(43);
			excelRow.getCell(5).setCellFormula("SUM(F33:F43)");
		} else if (ConstantsServerSide.isTWAH()) {
			// sum Classification according to Indicators (for this month)
			excelRow = sheet.getRow(32);
			excelRow.getCell(5).setCellValue(sum_pat_fall_tw);
			excelRow = sheet.getRow(33);
			excelRow.getCell(5).setCellValue(sum_staff_fall_tw);
			excelRow = sheet.getRow(34);
			excelRow.getCell(5).setCellValue(sum_vis_fall_tw);
			excelRow = sheet.getRow(35);
			excelRow.getCell(5).setCellValue(sum_pat_inj_tw);
			excelRow = sheet.getRow(36);
			excelRow.getCell(5).setCellValue(sum_staff_inj_tw);
			excelRow = sheet.getRow(37);
			excelRow.getCell(5).setCellValue(sum_vis_gen_tw);
			excelRow = sheet.getRow(38);
			excelRow.getCell(5).setCellValue(sum_sharp_inj_tw);
			excelRow = sheet.getRow(39);
			excelRow.getCell(5).setCellValue(sum_med_tw);
			// ADR
			excelRow = sheet.getRow(32);
			excelRow.getCell(9).setCellValue(sum_adr_tw);
			//
			excelRow = sheet.getRow(40);
			excelRow.getCell(5).setCellValue(sum_sec_tw);
			excelRow = sheet.getRow(41);
			excelRow.getCell(5).setCellValue(sum_equip_tw);
			excelRow = sheet.getRow(42);
			excelRow.getCell(5).setCellValue(sum_inc_opr_tw);
			excelRow = sheet.getRow(43);
			excelRow.getCell(5).setCellValue(sum_blood_tran_tw);
			excelRow = sheet.getRow(44);
			excelRow.getCell(5).setCellValue(sum_others_tw);
			excelRow = sheet.getRow(45);
			excelRow.getCell(5).setCellFormula("SUM(F33:F45)");
		}
		return true;
	};

	public static HSSFWorkbook piPxReport(UserBean userBean, String currYear, String incident_date_from, String incident_date_to) {
		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int j = 0;

		String SumTitle = "";
		String CurrYear = "";
		String Last1Year = "";
		String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		String Last1YearFrom = "";
		String Last1YearTo = "";
		String Last2YearFrom = "";
		String Last2YearTo = "";
		String xlsFileName = null;
		String tmp = null;

		Integer k = 0;
		Integer l = 0;

		try {

			xlsFileName = "pipx.xls";

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);
			sheet = workbook.getSheet("Report1");

			CurrYear = currYear;
			Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
			Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);

			CurrYearFrom = "0101" + CurrYear + " 000001";
			CurrYearTo = "3112" + CurrYear + " 235959";
			Last1YearFrom = "0101" + Last1Year + " 000001";
			Last1YearTo = "3112" + Last1Year + " 235959";
			Last2YearFrom = "0101" + Last2Year + " 000001";
			Last2YearTo = "3112" + Last2Year + " 235959";

			//Pharmacy Severity Index (SI) of Medication Error for
			SumTitle = "Pharmacy Severity Index (SI) of Medication Error for " + " ";
			excelRow = sheet.getRow(0);
			excelRow.getCell(0).setCellValue(SumTitle + CurrYear);
			tmp = null;

			for (j = 0; j < 11; j++) {
				excelRow = sheet.getRow(j + 2);
				tmp = Integer.toString(j + 2 + 1);
				excelRow.getCell(11).setCellFormula("K" + tmp + "/K14");
			}
			//CurrYear = "2014";
			ArrayList excelReport = getPIReport(userBean, "irs_data_sevindex_med_pxrpt", CurrYear, Last2Year, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if ("7".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(2);
					} else if ("6".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(3);
					} else if ("5".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(4);
					} else if ("4".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(5);
					} else if ("3".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(6);
					} else if ("2".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(7);
					} else if ("1".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(8);
					} else if ("1(ii)".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(9);
					} else if ("1(i)".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(10);
					} else if ("0".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(11);
					} else if ("unclass".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(12);
					}

					//fill in jan to dec   col 7 = Jan, 18 = dec
					for (k = 0; k < 12; k++) {
						excelRow.getCell(k + 12).setCellValue(Integer.valueOf(dbRow.getValue(k + 1)));
					}
				}
			}

			for (k = 0; k < 11; k++) {
				l = k + 3;
				excelRow = sheet.getRow(k + 2);
				excelRow.getCell(10).setCellFormula("SUM(M" + l + ":X" + l + ")");
			}

			excelRow = sheet.getRow(13);
			excelRow.getCell(10).setCellFormula("SUM(K3:K13)");
			excelRow.getCell(14).setCellFormula("SUM(M3:M13, N3:N13, O3:O13)");
			excelRow.getCell(17).setCellFormula("SUM(P3:P13, Q3:Q13, R3:R13)");
			excelRow.getCell(20).setCellFormula("SUM(S3:S13, T3:T13, U3:U13)");
			excelRow.getCell(23).setCellFormula("SUM(V3:V13, W3:W13, X3:X13)");

			String tot = "";
			String val = "";
			String precent = "";

			FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();

			// duplicate the label with %
			for (j = 0; j < 10; j++) {
				excelRow = sheet.getRow(13);
				//tot = String.valueOf(excelRow.getCell(10).getNumericCellValue());

				excelRow = sheet.getRow(j + 2);
				//val = String.valueOf(excelRow.getCell(10).getNumericCellValue());
				evaluator.evaluate(excelRow.getCell(10));
				val = String.valueOf(Math.round(evaluator.evaluateInCell(excelRow.getCell(10)).getNumericCellValue()));
				//precent = String.valueOf(excelRow.getCell(11).getNumericCellValue());
				precent = String.valueOf(Math.round(evaluator.evaluateInCell(excelRow.getCell(11)).getNumericCellValue() * 100));
				if ("0".equals(val)) {
					excelRow.getCell(1).setCellValue("");
				} else {
					excelRow.getCell(1).setCellValue(excelRow.getCell(2).getStringCellValue() + ".    Number = " + val + " " + ", % = " + precent);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook CEOReport(UserBean userBean, String currDay, String currMonth, String currYear, String incident_date_from, String incident_date_to,
			String report_date_from, String report_date_to,
			String classification,
			String equip, String adr, String med, String patfall, String patgen,
			String bef, String stagen, String stafall, String secu, String vrofall,
			String vrogen, String oth,
			String status, String nearmiss, String pirID, String DeptCode, String LoginID,
			ArrayList viewList) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		String xlsFileName = null;
		Boolean IsPIManager = false;

		Integer i = 0;
		Integer j = 0;
		IsPIManager = IsPIManager(userBean.getStaffID());

		try {
			if (IsPIManager) {
				if (ConstantsServerSide.isHKAH()) {
					xlsFileName = "ceoreport_pi.xls";
				} else {
					xlsFileName = "ceoreport_pi_tw.xls";
				}
			} else {
				if (ConstantsServerSide.isHKAH()) {
					xlsFileName = "ceoreport_admin.xls";
				} else {
					xlsFileName = "ceoreport_admin_tw.xls";
				}
			}
			fileInputStream = new FileInputStream(xlsFileName);

			workbook = new HSSFWorkbook(fileInputStream);

			// temp code
			//currMonth = "9";
			//
			//for (i = 1; i <= Integer.parseInt("4"); i++) {
			for (i = 1; i <= Integer.parseInt(currMonth); i++) {
				CEOReportGenSheet(userBean, IsPIManager, workbook, sheet, String.valueOf(i), currYear);
			}

			// remove the empty sheet
			for (j = i; j <= 12; j++) {
				workbook.removeSheetAt(workbook.getSheetIndex(String.valueOf(j)));
			}

			//workbook.removeSheetAt(workbook.getSheetIndex(String.valueOf(10)));
			//workbook.removeSheetAt(workbook.getSheetIndex(String.valueOf(11)));
			//workbook.removeSheetAt(workbook.getSheetIndex(String.valueOf(12)));

			sheet = workbook.getSheet("cum");
			currDay = getLastDay(currMonth, currYear);
			piCEOReportCum(userBean, sheet, xlsFileName, currDay, currMonth, currYear);

		} catch (IOException e) {
			 e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook CEOReportOld(UserBean userBean, String currDay, String currMonth, String currYear, String incident_date_from, String incident_date_to,
			String report_date_from, String report_date_to,
			String classification,
			String equip, String adr, String med, String patfall, String patgen,
			String bef, String stagen, String stafall, String secu, String vrofall,
			String vrogen, String oth,
			String status, String nearmiss, String pirID, String DeptCode, String LoginID,
			ArrayList viewList) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle styleLateSubmit = null;
		HSSFCellStyle styleNormal = null;
		HSSFCellStyle style3 = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		short fontColor = 0;
		String rootCasue = null;
		boolean firstRootCause = false;
		String rptTitle = null;
		String inc_date_from = null;
		String xlsFileName = null;
		// Assessment of injury
		Integer no_affect = 0;
		Integer no_harm = 0;
		Integer temp_harm = 0;
		Integer perm_harm = 0;
		Integer death = 0;
		// incident class
		Integer sum_equip = 0;
		Integer sum_med = 0;
		Integer sum_adr = 0;
		Integer sum_pat_fall = 0;
		Integer sum_pat_inj = 0;
		Integer sum_sharp_inj = 0;
		Integer sum_staff_inj = 0;
		Integer sum_staff_fall = 0;
		Integer sum_sec = 0;
		Integer sum_vis_fall = 0;
		Integer sum_vis_gen = 0;
		Integer sum_others = 0;

		try {
			xlsFileName = "ceoreport.xls";
			fileInputStream = new FileInputStream(xlsFileName);

			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("data");

			styleNormal = workbook.createCellStyle();
			styleLateSubmit = workbook.createCellStyle();
			excelRow = sheet.getRow(0);
			styleNormal = excelRow.getCell(0).getCellStyle();
			styleLateSubmit = excelRow.getCell(1).getCellStyle();

			style3 = workbook.createCellStyle();
			// set title year
			excelRow = sheet.getRow(2);
			style3 = excelRow.getCell(0).getCellStyle();
			rptTitle = excelRow.getCell(0).getStringCellValue();
			//style2.setFillForegroundColor(HSSFColor.GREY_50_PERCENT.index);
			//style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
			//excelRow.getCell(0).setCellValue("Month-end Summary Report of Incident Risk Management Data Time Peroid: " + getMonthWord(currMonth) + " " + currYear);
			excelRow.getCell(0).setCellValue(rptTitle + getMonthWord(currMonth) + " " + currYear);
			excelRow.getCell(0).setCellStyle(style3);

			workbook.setSheetName(workbook.getSheetIndex(sheet), getMonthWord(currMonth) + " " + currYear);
			inc_date_from = "01/" + currMonth + "/" + currYear;
			//ArrayList excelReport = getPIReportList(userBean, "ceo", incident_date_from, incident_date_to,
			ArrayList excelReport = getPIReportList(userBean, "ceo", inc_date_from, incident_date_to,
				report_date_from, report_date_to, classification,
				equip, "", "", adr, med, patfall, patgen,
				bef, stagen, stafall, secu, vrofall,
				vrogen , null, oth,
				status, nearmiss, "", "", "", "N", pirID, userBean.getDeptCode(), userBean.getStaffID());
			//ArrayList excelReport = viewList;

			int i = 0;
			int j = 0;
			for (j = 0; j < excelReport.size(); j++) {
			dbRow = (ReportableListObject) excelReport.get(j);
			if (excelReport.size() > 0) {
				excelRow = sheet.getRow(j + 4);

				// if late submit report, set blue color
				if ("Y".equals(dbRow.getValue(55))) {
					for (i = 0; i < 10; i++) {
						excelRow.getCell(i).setCellStyle(styleLateSubmit);
					}
				}
				excelRow.getCell(0).setCellValue(dbRow.getValue(0));
				excelRow.getCell(1).setCellValue(dbRow.getValue(4).substring(0,10));
				excelRow.getCell(2).setCellValue(dbRow.getValue(21));
				excelRow.getCell(3).setCellValue(dbRow.getValue(9));
				excelRow.getCell(4).setCellValue(dbRow.getValue(10));
				if ("Others".equals(dbRow.getValue(5))) {
					excelRow.getCell(5).setCellValue(dbRow.getValue(56));
				} else {
					excelRow.getCell(5).setCellValue(dbRow.getValue(5));
				}

				// related staff from
				excelRow.getCell(6).setCellValue(getReportRelatedStaffFrom(dbRow.getValue(0)));

				// assess of injury
				//if ("2".equals(dbRow.getValue(6)) || "5".equals(dbRow.getValue(6)) || "7".equals(dbRow.getValue(6))) {
				if (!"0".equals(dbRow.getValue(16))) {
					excelRow.getCell(7).setCellValue(dbRow.getValue(16));
				} else if (!"0".equals(dbRow.getValue(17))) {
					excelRow.getCell(7).setCellValue(dbRow.getValue(17));
				} else if (!"0".equals(dbRow.getValue(18))) {
					excelRow.getCell(7).setCellValue(dbRow.getValue(18));
				} else if (!"0".equals(dbRow.getValue(19))) {
					excelRow.getCell(7).setCellValue(dbRow.getValue(19));
				} else if (!"0".equals(dbRow.getValue(20))) {
					excelRow.getCell(7).setCellValue(dbRow.getValue(20));
				} else {
					excelRow.getCell(7).setCellValue(dbRow.getValue(28));
				}
				//} else {
				//	excelRow.getCell(7).setCellValue("");
				//}
				if ("No Affect".equals(excelRow.getCell(7).getStringCellValue())) {
					no_affect = no_affect + 1;
				}
				if ("Caused No Harm".equals(excelRow.getCell(7).getStringCellValue())) {
					no_harm = no_harm + 1;
				}
				if ("Caused Temporary Harm".equals(excelRow.getCell(7).getStringCellValue())) {
					temp_harm = temp_harm + 1;
				}
				if ("Caused Permanent Harm".equals(excelRow.getCell(7).getStringCellValue())) {
					perm_harm = perm_harm + 1;
				}
				if ("Causing Death".equals(excelRow.getCell(7).getStringCellValue())) {
					death = death + 1;
				}
				// notify Dr ?
				if ("2".equals(dbRow.getValue(14)) || "5".equals(dbRow.getValue(14)) || "7".equals(dbRow.getValue(14))) {
					excelRow.getCell(8).setCellValue("Y");
				} else {
					if ("checked".equals(dbRow.getValue(12))) {
						excelRow.getCell(8).setCellValue("Y");
					} else if ("checked".equals(dbRow.getValue(23))) {
						excelRow.getCell(8).setCellValue("Y");
					} else if ("checked".equals(dbRow.getValue(27))) {
						excelRow.getCell(8).setCellValue("Y");
					} else if ("checked".equals(dbRow.getValue(13))) {
						excelRow.getCell(8).setCellValue("N");
					}
				}

				if ("2".equals(dbRow.getValue(6))) {
					sum_staff_fall = sum_staff_fall + 1;
				} else if ("5".equals(dbRow.getValue(6))) {
					sum_staff_inj = sum_staff_inj + 1;
				} else if ("7".equals(dbRow.getValue(6))) {
					sum_sharp_inj = sum_sharp_inj + 1;
				} else if ("1".equals(dbRow.getValue(6))) {
					sum_pat_fall = sum_pat_fall + 1;
				} else if ("4".equals(dbRow.getValue(6))) {
					sum_pat_inj = sum_pat_inj + 1;
				} else if ("3".equals(dbRow.getValue(6))) {
					sum_vis_fall = sum_vis_fall + 1;
				} else if ("6".equals(dbRow.getValue(6))) {
					sum_vis_gen = sum_vis_gen + 1;
				} else if ("8".equals(dbRow.getValue(6))) {
					sum_med = sum_med + 1;
				} else if ("10".equals(dbRow.getValue(6))) {
					sum_others = sum_others + 1;
				} else if ("9".equals(dbRow.getValue(6))) {
					sum_equip = sum_equip + 1;
				} else if ("474".equals(dbRow.getValue(6))) {
					sum_sec = sum_sec + 1;
				}
				//
				excelRow.getCell(9).setCellValue(dbRow.getValue(15));

				// phar risk rating
				//excelRow.getCell(9).setCellValue(dbRow.getValue(32));

				}
			}

			// sum "Assessment of Injury (for this month)"
			excelRow = sheet.getRow(32);
			excelRow.getCell(2).setCellValue(no_affect);
			excelRow = sheet.getRow(33);
			excelRow.getCell(2).setCellValue(no_harm);
			excelRow = sheet.getRow(34);
			excelRow.getCell(2).setCellValue(temp_harm);
			excelRow = sheet.getRow(35);
			excelRow.getCell(2).setCellValue(perm_harm);
			excelRow = sheet.getRow(36);
			excelRow.getCell(2).setCellValue(death);
			excelRow = sheet.getRow(37);
			excelRow.getCell(2).setCellFormula("SUM(C33:C37)");

			// sum Classification according to Indicators (for this month)
			excelRow = sheet.getRow(32);
			excelRow.getCell(5).setCellValue(sum_equip);
			excelRow = sheet.getRow(33);
			excelRow.getCell(5).setCellValue(sum_med);
			// ADR
			excelRow = sheet.getRow(32);
			excelRow.getCell(9).setCellValue(sum_adr);
			//
			excelRow = sheet.getRow(34);
			excelRow.getCell(5).setCellValue(sum_pat_fall);
			excelRow = sheet.getRow(35);
			excelRow.getCell(5).setCellValue(sum_pat_inj);
			excelRow = sheet.getRow(36);
			excelRow.getCell(5).setCellValue(sum_sharp_inj);
			excelRow = sheet.getRow(37);
			excelRow.getCell(5).setCellValue(sum_staff_inj);
			excelRow = sheet.getRow(38);
			excelRow.getCell(5).setCellValue(sum_staff_fall);
			excelRow = sheet.getRow(39);
			excelRow.getCell(5).setCellValue(sum_sec);
			excelRow = sheet.getRow(40);
			excelRow.getCell(5).setCellValue(sum_vis_fall);
			excelRow = sheet.getRow(41);
			excelRow.getCell(5).setCellValue(sum_vis_gen);
			excelRow = sheet.getRow(42);
			excelRow.getCell(5).setCellValue(sum_others);
			excelRow = sheet.getRow(43);
			excelRow.getCell(5).setCellFormula("SUM(F33:F43)");

			sheet = workbook.getSheet("cum");
			piCEOReportCum(userBean, sheet, xlsFileName, currDay, currMonth, currYear);

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook DOHReport(UserBean userBean, String currDay, String currMonth, String currYear, String incident_date_from, String incident_date_to,
			String report_date_from, String report_date_to,
			String classification,
			String equip, String adr, String med, String patfall, String patgen,
			String bef, String stagen, String stafall, String secu, String vrofall,
			String vrogen, String oth,
			String status, String pirID, String DeptCode, String LoginID,
			ArrayList viewList) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle styleLateSubmit = null;
		HSSFCellStyle styleNormal = null;
		HSSFCellStyle styleBoth = null;
		HSSFCellStyle style3 = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		short fontColor = 0;
		String rptTitle = null;
		String inc_date_from = null;
		String xlsFileName = null;
		String lastYear = null;
		String followUp = null;
		boolean firstFollowUp = false;

		try {
			xlsFileName = "dohreport.xls";
			fileInputStream = new FileInputStream(xlsFileName);

			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("doh");

			styleNormal = workbook.createCellStyle();
			styleBoth = workbook.createCellStyle();
			styleLateSubmit = workbook.createCellStyle();
			excelRow = sheet.getRow(5);
			styleNormal = excelRow.getCell(0).getCellStyle();
			excelRow = sheet.getRow(4);
			styleBoth = excelRow.getCell(1).getCellStyle();

			styleLateSubmit = excelRow.getCell(1).getCellStyle();

			style3 = workbook.createCellStyle();
			// set title year
			excelRow = sheet.getRow(0);
			style3 = excelRow.getCell(0).getCellStyle();
			rptTitle = excelRow.getCell(0).getStringCellValue();
			excelRow.getCell(0).setCellValue(rptTitle + " " + currYear);
			excelRow.getCell(0).setCellStyle(style3);
			// first part
			excelRow = sheet.getRow(4);
			style3 = excelRow.getCell(1).getCellStyle();
			//rptTitle = excelRow.getCell(1).getStringCellValue();

			lastYear = String.valueOf(Integer.valueOf(currYear) - 1);

			excelRow.getCell(1).setCellValue(lastYear + " (June to Dec)" );
			excelRow.getCell(1).setCellStyle(style3);

			//first part

			ArrayList excelReport = getPIReport(userBean, "doh", "0107" + lastYear + " 000001", "3112" + lastYear + " 235959", "");
			int j = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(j + 5);
					excelRow.getCell(0).setCellStyle(styleNormal);
					excelRow.getCell(1).setCellStyle(styleNormal);
					excelRow.getCell(2).setCellStyle(styleNormal);
					if ("Y".equals(dbRow.getValue(2))) {
						excelRow.getCell(0).setCellValue(dbRow.getValue(3) + "      (late submission)");
					} else {
						excelRow.getCell(0).setCellValue(dbRow.getValue(3));
					}
					excelRow.getCell(1).setCellValue(dbRow.getValue(1));
					// Brief Follow up Actions
					followUp = "";
					firstFollowUp = false;
					if (!"".equals(dbRow.getValue(5)) && !dbRow.getValue(5).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Staff education held in " + dbRow.getValue(5);
					}
					if (!"".equals(dbRow.getValue(7)) && !dbRow.getValue(7).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Staff disciplinary action in " + dbRow.getValue(7);
					}
					if (!"".equals(dbRow.getValue(9)) && !dbRow.getValue(9).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Consultation held in " + dbRow.getValue(9);
					}
					if (!"".equals(dbRow.getValue(11)) && !dbRow.getValue(11).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Sharing of incident at " + dbRow.getValue(11);
					}
					if (!"".equals(dbRow.getValue(12)) && !dbRow.getValue(12).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " (meeting or occasion) in " + dbRow.getValue(12);
					}
					if (!"".equals(dbRow.getValue(13)) && !dbRow.getValue(13).isEmpty()) {
						if ("1".equals(dbRow.getValue(13))) {
							if (!firstFollowUp) {
								firstFollowUp = true;
							} else {
								followUp = followUp + ", ";
							}
							followUp = followUp + " Revision of policy ";
						}
					}
					if (!"".equals(dbRow.getValue(14)) && !dbRow.getValue(14).isEmpty()) {
						if ("1".equals(dbRow.getValue(14))) {
							if (!firstFollowUp) {
								firstFollowUp = true;
							} else {
								followUp = followUp + ", ";
							}
							followUp = followUp + " Revision of form ";
						}
					}
					if (!"".equals(dbRow.getValue(15)) && !dbRow.getValue(15).isEmpty()) {
						if ("1".equals(dbRow.getValue(15))) {
							if (!firstFollowUp) {
								firstFollowUp = true;
							} else {
								followUp = followUp + ", ";
							}
							followUp = followUp + " Creation of new form ";
						}
					}
					if (!"".equals(dbRow.getValue(17)) && !dbRow.getValue(17).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " Refer to " + dbRow.getValue(17);
					}
					if (!"".equals(dbRow.getValue(18)) && !dbRow.getValue(18).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " Department in " + dbRow.getValue(18);
					}
					if (!"".equals(dbRow.getValue(20)) && !dbRow.getValue(20).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " Others : " + dbRow.getValue(20);
					}

					followUp = followUp + "\r\n";
					followUp = followUp + "CASE CLOSED";

					excelRow.getCell(2).setCellValue(followUp);

				}
			}
			j = j + 7;
			//second part
			excelRow = sheet.getRow(j);
			excelRow.getCell(1).setCellValue(currYear + " (Jan to Jun)" );
			excelRow.getCell(0).setCellStyle(styleBoth);
			excelRow.getCell(1).setCellStyle(styleBoth);
			excelRow.getCell(2).setCellStyle(styleBoth);
			j = j + 1;
			excelReport = getPIReport(userBean, "doh", "0101" + currYear + " 000001", "3006" + currYear + " 235959", "");
			int i = 0;
			for (i = 0; i < excelReport.size(); i++) {
				dbRow = (ReportableListObject) excelReport.get(i);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(i + j);
					excelRow.getCell(0).setCellStyle(styleNormal);
					excelRow.getCell(1).setCellStyle(styleNormal);
					excelRow.getCell(2).setCellStyle(styleNormal);
					if ("Y".equals(dbRow.getValue(2))) {
						excelRow.getCell(0).setCellValue(dbRow.getValue(3) + "     (late submission)");
					} else {
						excelRow.getCell(0).setCellValue(dbRow.getValue(3));
					}
					excelRow.getCell(1).setCellValue(dbRow.getValue(1));

					// Brief Follow up Actions
					followUp = "";
					firstFollowUp = false;
					if (!"".equals(dbRow.getValue(5)) && !dbRow.getValue(5).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Staff education held in " + dbRow.getValue(5);
					}
					if (!"".equals(dbRow.getValue(7)) && !dbRow.getValue(7).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Staff disciplinary action in " + dbRow.getValue(7);
					}
					if (!"".equals(dbRow.getValue(9)) && !dbRow.getValue(9).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Consultation held in " + dbRow.getValue(9);
					}
					if (!"".equals(dbRow.getValue(11)) && !dbRow.getValue(11).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + "Sharing of incident at " + dbRow.getValue(11);
					}
					if (!"".equals(dbRow.getValue(12)) && !dbRow.getValue(12).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " (meeting or occasion) in " + dbRow.getValue(12);
					}
					if (!"".equals(dbRow.getValue(13)) && !dbRow.getValue(13).isEmpty()) {
						if ("1".equals(dbRow.getValue(13))) {
							if (!firstFollowUp) {
								firstFollowUp = true;
							} else {
								followUp = followUp + ", ";
							}
							followUp = followUp + " Revision of policy ";
						}
					}
					if (!"".equals(dbRow.getValue(14)) && !dbRow.getValue(14).isEmpty()) {
						if ("1".equals(dbRow.getValue(14))) {
							if (!firstFollowUp) {
								firstFollowUp = true;
							} else {
								followUp = followUp + ", ";
							}
							followUp = followUp + " Revision of form ";
						}
					}
					if (!"".equals(dbRow.getValue(15)) && !dbRow.getValue(15).isEmpty()) {
						if ("1".equals(dbRow.getValue(15))) {
							if (!firstFollowUp) {
								firstFollowUp = true;
							} else {
								followUp = followUp + ", ";
							}
							followUp = followUp + " Creation of new form ";
						}
					}
					if (!"".equals(dbRow.getValue(17)) && !dbRow.getValue(17).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " Refer to " + dbRow.getValue(17);
					}
					if (!"".equals(dbRow.getValue(18)) && !dbRow.getValue(18).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " Department in " + dbRow.getValue(18);
					}
					if (!"".equals(dbRow.getValue(20)) && !dbRow.getValue(20).isEmpty()) {
						if (!firstFollowUp) {
							firstFollowUp = true;
						} else {
							followUp = followUp + ", ";
						}
						followUp = followUp + " Others : " + dbRow.getValue(20);
					}

					followUp = followUp + "\r\n";
					followUp = followUp + "CASE CLOSED";

					excelRow.getCell(2).setCellValue(followUp);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook piCEOReportCum(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String currDay, String currMonth, String currYear) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFRow excelRow2 = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";
		//String incident_date_from = "";
		//String incident_date_to = "";
		String rptTitle = null;
		// risk ass
		Integer red = 0;
		Integer blue = 0;
		Integer green = 0;
		Integer yellow = 0;
		String red_old_pid = "";
		String red_new_pid = "";

		try {

			if (p_sheet == null) {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("cum");

			} else {
				sheet = p_sheet;
			}

			//Sheet data
			sheet.getWorkbook().setSheetName(sheet.getWorkbook().getSheetIndex(sheet), "Cumulative Jan - " + getMonthWord(currMonth) + " " + currYear);

			// set title year
			excelRow = sheet.getRow(1);
			rptTitle = excelRow.getCell(0).getStringCellValue();
			excelRow.getCell(0).setCellValue(rptTitle + getMonthWord(currMonth) + " " + currYear);

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(3);
			if (ConstantsServerSide.isHKAH()) {
				excelRow2 = sheet.getRow(20);
			} else if (ConstantsServerSide.isTWAH()) {
				excelRow2 = sheet.getRow(22);
			}

			//ArrayList excelReport = getPIReport(userBean, "unit", incident_date_from, incident_date_to, "");
			if (Integer.valueOf(currDay) < 10) {
				currDay = "0" + currDay;
			}
			if (Integer.valueOf(currMonth) < 10) {
				currMonth = "0" + currMonth;
			}
			ArrayList excelReport = getPIReport(userBean, "ceo_cum", "0101" + currYear, currDay + currMonth + currYear, "");

			int j = 0;
			int adr = 0;
			int cnt = 0;

			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (ConstantsServerSide.isHKAH()) {
						cnt = 11;
					} else if (ConstantsServerSide.isTWAH()) {
						cnt = 13;
					}

					if (j <= 2) {
						excelRow = sheet.getRow(j + 5 - adr);
					} else if (j <= 6) {
						excelRow = sheet.getRow(j + 5 + 1 - adr);
					} else if (j <= cnt) {
						excelRow = sheet.getRow(j + 5 + 2 - adr);
					}

					if ("9 Adverse Drug Reaction".equals(dbRow.getValue(0))) {
						adr = 1;
						excelRow2.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(2)));
						excelRow2.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(3)));
						excelRow2.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(4)));
						excelRow2.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(5)));
						excelRow2.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(6)));
						excelRow2.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(7)));
						excelRow2.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(8)));
						excelRow2.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(9)));
						excelRow2.getCell(13).setCellValue(Integer.valueOf(dbRow.getValue(10)));
						excelRow2.getCell(14).setCellValue(Integer.valueOf(dbRow.getValue(11)));
						excelRow2.getCell(15).setCellValue(Integer.valueOf(dbRow.getValue(12)));
						excelRow2.getCell(16).setCellValue(Integer.valueOf(dbRow.getValue(13)));
					} else {
						excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(2)));
						excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(3)));
						excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(4)));
						excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(5)));
						excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(6)));
						excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(7)));
						excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(8)));
						excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(9)));
						excelRow.getCell(13).setCellValue(Integer.valueOf(dbRow.getValue(10)));
						excelRow.getCell(14).setCellValue(Integer.valueOf(dbRow.getValue(11)));
						excelRow.getCell(15).setCellValue(Integer.valueOf(dbRow.getValue(12)));
						excelRow.getCell(16).setCellValue(Integer.valueOf(dbRow.getValue(13)));
					}
				}
			}

			// near miss
			excelReport = getPIReport(userBean, "ceo_cum_near_miss", "0101" + currYear, currDay + currMonth + currYear, "");
			dbRow = (ReportableListObject) excelReport.get(0);
			if (ConstantsServerSide.isHKAH()) {
				excelRow = sheet.getRow(21);
			} else if (ConstantsServerSide.isTWAH()) {
				excelRow = sheet.getRow(23);
			}
			if (!dbRow.getValue(0).isEmpty()) {
				excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(2)));
				excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(3)));
				excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(4)));
				excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(5)));
				excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(6)));
				excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(7)));
				excelRow.getCell(13).setCellValue(Integer.valueOf(dbRow.getValue(8)));
				excelRow.getCell(14).setCellValue(Integer.valueOf(dbRow.getValue(9)));
				excelRow.getCell(15).setCellValue(Integer.valueOf(dbRow.getValue(10)));
				excelRow.getCell(16).setCellValue(Integer.valueOf(dbRow.getValue(11)));
			} else {
				excelRow.getCell(5).setCellValue("0");
				excelRow.getCell(6).setCellValue("0");
				excelRow.getCell(7).setCellValue("0");
				excelRow.getCell(8).setCellValue("0");
				excelRow.getCell(9).setCellValue("0");
				excelRow.getCell(10).setCellValue("0");
				excelRow.getCell(11).setCellValue("0");
				excelRow.getCell(12).setCellValue("0");
				excelRow.getCell(13).setCellValue("0");
				excelRow.getCell(14).setCellValue("0");
				excelRow.getCell(15).setCellValue("0");
				excelRow.getCell(16).setCellValue("0");
			}
			//

			//Total Fall
			sumRow = 8;
			sumRowFrom = "6";
			sumRowTo = "8";
			setCatSumCol(sheet, "type_a_ceo", sumRow, 0, sumRowFrom, "", sumRowTo);

			//Total Injury
			sumRow = 13;
			sumRowFrom = "10";
			sumRowTo = "13";
			setCatSumCol(sheet, "type_a_ceo", sumRow, 0, sumRowFrom, "", sumRowTo);

			// 08102018 - Bed Sore
			excelReport = getPIReport(userBean, "ceoreport_admin_bed_sore", currYear, "", "");
			dbRow = (ReportableListObject) excelReport.get(0);
			if (ConstantsServerSide.isHKAH()) {
				excelRow = sheet.getRow(18);
			} else if (ConstantsServerSide.isTWAH()) {
				excelRow = sheet.getRow(20);
			}

			excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(1)));
			excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(2)));
			excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(3)));
			excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(4)));
			excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(5)));
			excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(6)));
			excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(7)));
			excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(8)));
			excelRow.getCell(13).setCellValue(Integer.valueOf(dbRow.getValue(9)));
			excelRow.getCell(14).setCellValue(Integer.valueOf(dbRow.getValue(10)));
			excelRow.getCell(15).setCellValue(Integer.valueOf(dbRow.getValue(11)));
			excelRow.getCell(16).setCellValue(Integer.valueOf(dbRow.getValue(12)));
			excelRow.getCell(19).setCellValue(dbRow.getValue(13));

			//Total - bottom
			if (ConstantsServerSide.isHKAH()) {
				sumRow = 19;
			} else if (ConstantsServerSide.isTWAH()) {
				sumRow = 21;
			}
			sumRowFrom = "9";
			sumRowFrom2 = "14";
			if (ConstantsServerSide.isHKAH()) {
				sumRowTo = "18";
			} else if (ConstantsServerSide.isTWAH()) {
				sumRowTo = "20";
			}
			setCatSumCol(sheet, "type_b_ceo", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);
			//sheet.getRow(sumRow).getCell(1).setCellFormula("SUM(F" + sumRowFrom + ",F" + sumRowFrom2 + ":F" + sumRowTo + ")");

			//Total - right side
			sumRow = 0;
			sumCol = 17;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "type_c_ceo", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

			// Sheet Cum
			// total risk assessment
			excelReport = getPIReport(userBean, "ceo_cum_risk_ass", "0101" + currYear, currDay + currMonth + currYear, "");
			// old code before Apr 2017
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("1A".equals(dbRow.getValue(1)) || "1B".equals(dbRow.getValue(1)) || "1C".equals(dbRow.getValue(1)) ||
						"2A".equals(dbRow.getValue(1)) || "2B".equals(dbRow.getValue(1)) || "3A".equals(dbRow.getValue(1))) {
						red = red + 1;
						red_old_pid = red_old_pid + " " + dbRow.getValue(0);
					}
					if ("1D".equals(dbRow.getValue(1)) || "2C".equals(dbRow.getValue(1)) || "2D".equals(dbRow.getValue(1)) ||
						"3B".equals(dbRow.getValue(1)) || "3C".equals(dbRow.getValue(1))) {
						blue = blue + 1;
					}
					if ("1E".equals(dbRow.getValue(1)) || "2E".equals(dbRow.getValue(1)) || "3D".equals(dbRow.getValue(1)) ||
						"3E".equals(dbRow.getValue(1)) || "4A".equals(dbRow.getValue(1)) || "4B".equals(dbRow.getValue(1))) {
						green = green + 1;
					}
					if ("4C".equals(dbRow.getValue(1)) || "4D".equals(dbRow.getValue(1)) || "4E".equals(dbRow.getValue(1))) {
						yellow = yellow + 1;
					}
				}
			}
			if (ConstantsServerSide.isHKAH()) {
				cnt = 0;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 2;
			}
			excelRow = sheet.getRow(24 + cnt);
			excelRow.getCell(6).setCellValue(red);
			//excelRow.getCell(9).setCellValue(red_old_pid);
			excelRow = sheet.getRow(25 + cnt);
			excelRow.getCell(6).setCellValue(blue);
			excelRow = sheet.getRow(26 + cnt);
			excelRow.getCell(6).setCellValue(green);
			excelRow = sheet.getRow(27 + cnt);
			excelRow.getCell(6).setCellValue(yellow);
			//set sum total
			excelRow = sheet.getRow(28 + cnt);
			if (ConstantsServerSide.isHKAH()) {
				cnt = 25;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 27;
			}
			if (ConstantsServerSide.isHKAH()) {
				excelRow.getCell(6).setCellFormula("SUM(G25:G28)");
			} else if (ConstantsServerSide.isTWAH()) {
				excelRow.getCell(6).setCellFormula("SUM(G27:G30)");
			}

			// new code after Apr 2017
			red = 0;
			blue = 0;
			green = 0;
			yellow = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("E".equals(dbRow.getValue(1))) {
						red = red + 1;
						red_new_pid = red_new_pid + " " + dbRow.getValue(0);
					}
					if ("H".equals(dbRow.getValue(1))) {
						green = green + 1;
					}
					if ("M".equals(dbRow.getValue(1))) {
						yellow = yellow + 1;
					}
					if ("L".equals(dbRow.getValue(1))) {
						blue = blue + 1;
					}
				}
			}
			if (ConstantsServerSide.isHKAH()) {
				cnt = 0;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 2;
			}
			excelRow = sheet.getRow(32 + cnt);
			excelRow.getCell(6).setCellValue(red);
			//excelRow.getCell(9).setCellValue(red_new_pid);
			excelRow = sheet.getRow(33 + cnt);
			excelRow.getCell(6).setCellValue(green);
			excelRow = sheet.getRow(34 + cnt);
			excelRow.getCell(6).setCellValue(yellow);
			excelRow = sheet.getRow(35 + cnt);
			excelRow.getCell(6).setCellValue(blue);
			//set sum total
			excelRow = sheet.getRow(36 + cnt);
			if (ConstantsServerSide.isHKAH()) {
				//cnt = 25;
			} else if (ConstantsServerSide.isTWAH()) {
				//cnt = 27;
			}
			if (ConstantsServerSide.isHKAH()) {
				excelRow.getCell(6).setCellFormula("SUM(G33:G36)");
			} else if (ConstantsServerSide.isTWAH()) {
				excelRow.getCell(6).setCellFormula("SUM(G35:G38)");
			}

			// total : Medication ADR
			if (ConstantsServerSide.isHKAH()) {
				cnt = 0;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 2;
			}
			excelRow = sheet.getRow(20 + cnt);
			if (ConstantsServerSide.isHKAH()) {
				cnt = 21;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 23;
			}

			excelRow.getCell(17).setCellFormula("SUM(F" + cnt + ":Q" + cnt + ")");
			if (ConstantsServerSide.isHKAH()) {
				cnt = 0;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 2;
			}
			// total : Near Miss
			excelRow = sheet.getRow(21 + cnt);
			if (ConstantsServerSide.isHKAH()) {
				cnt = 22;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 24;
			}
			excelRow.getCell(17).setCellFormula("SUM(F" + cnt + ":Q" + cnt + ")");

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook SaveExcel(UserBean userBean, String incident_date_from, String incident_date_to,
			String report_date_from, String report_date_to,
			String classification,
			String equip, String increlopr, String bloodtrans, String adr, String med, String patfall, String patgen,
			String bef, String stagen, String stafall, String secu, String vrofall,
			String vrogen, String oth,
			String status, String nearmiss, String ceopend, String rejected, String pirID, String DeptCode, String LoginID,
			ArrayList viewList) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		HSSFCellStyle style2 = null;
		HSSFCellStyle style3 = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		short fontColor = 0;
		String rootCasue = null;
		boolean firstRootCause = false;
		int col_pi = 0;

		try {
			if (IsPIManager(userBean.getStaffID())) {
				fileInputStream = new FileInputStream("hkahrisk_pi.xls");
			} else {
				fileInputStream = new FileInputStream("hkahrisk.xls");
			}

			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("HKAH");
			//excelRow = sheet.getRow(0);

			if (IsPIManager(userBean.getStaffID())) {
				col_pi = 2;
			} else {
				col_pi = 0;
			};

			if (!IsPIManager(userBean.getStaffID())) {
				style3 = workbook.createCellStyle();

				// clear PI coloumn
				excelRow = sheet.getRow(1);
				style3 = excelRow.getCell(0).getCellStyle();

				excelRow = sheet.getRow(2);

				excelRow.getCell(12).setCellValue("");
				excelRow.getCell(13).setCellValue("");
				excelRow.getCell(14).setCellValue("");
				excelRow.getCell(15).setCellValue("");

				//style2.setFillForegroundColor(HSSFColor.GREY_50_PERCENT.index);
				//style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

				excelRow.getCell(12).setCellStyle(style3);
				excelRow.getCell(13).setCellStyle(style3);
				excelRow.getCell(14).setCellStyle(style3);
				excelRow.getCell(15).setCellStyle(style3);

				//excelRow.getCell(13).getCellStyle().setFillForegroundColor(new HSSFColor.WHITE().getIndex());
			}
			rptDate = Calendar.getInstance().get(Calendar.MONTH);
			//excelRow.createCell(5).setCellValue("May-14");

			ArrayList excelReport = getPIReportList(userBean, "excel", incident_date_from, incident_date_to,
					report_date_from, report_date_to, classification,
					equip, increlopr, bloodtrans, adr, med, patfall, patgen,
					bef, stagen, stafall, secu, vrofall,
					vrogen, null, oth,
					status, nearmiss, "", ceopend, rejected, "N", pirID, userBean.getDeptCode(), userBean.getStaffID());

			int j = 0;
				for (j = 0; j < excelReport.size(); j++) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if (excelReport.size() > 0) {
					excelRow = sheet.getRow(j + 3);
					excelRow.getCell(0).setCellValue(dbRow.getValue(0));
					excelRow.getCell(1).setCellValue(dbRow.getValue(4).substring(0,10));
					excelRow.getCell(2).setCellValue(dbRow.getValue(21));
					excelRow.getCell(3).setCellValue(dbRow.getValue(9));
					// Descrption
					//excelRow.getCell(4).setCellValue(dbRow.getValue(10)); // get narrative from reporter
					// get narrative from um/dm, oshicn, px
					String narr = "";
					String secondLevelType = "";
					String crLf = Character.toString((char)13) + Character.toString((char)10);
					if (!"".equals(dbRow.getValue(29)) && dbRow.getValue(29) != null) {
						narr = "UM/DM : " + crLf + dbRow.getValue(29);
					}
					if (IsMedicationIncident(dbRow.getValue(31))) {
						secondLevelType = crLf + "Pharmacy : ";
					} else if ("2".equals(dbRow.getValue(31)) || "5".equals(dbRow.getValue(31)) || "7".equals(dbRow.getValue(31))) {
						secondLevelType = crLf + "OSH/ICN : ";
					}

					// for pharcay case, if dept head hasnt comment, show the reporter narrative description
					if (IsMedicationIncident(dbRow.getValue(31))) {
						if ("".equals(dbRow.getValue(29)) || dbRow.getValue(29) == null) {
							narr = "Reporter Narrative Desc : " + crLf + dbRow.getValue(10);
						}
					}
					//
					if (!"".equals(dbRow.getValue(30)) && dbRow.getValue(30) != null) {
						narr = narr + crLf + secondLevelType + crLf + dbRow.getValue(30);
					}
					excelRow.getCell(4).setCellValue(narr);
					//
					excelRow.getCell(5 + col_pi).setCellValue(dbRow.getValue(5));

					// related staff from
					excelRow.getCell(6 + col_pi).setCellValue(getReportRelatedStaffFrom(dbRow.getValue(0)));
					//excelRow.getCell(6).setCellValue(dbRow.getValue(26));

					// assess of injury
					// notify Dr ?
					if (!"0".equals(dbRow.getValue(16))) {
						excelRow.getCell(7 + col_pi).setCellValue(dbRow.getValue(16));
					} else if (!"0".equals(dbRow.getValue(17))) {
						excelRow.getCell(7 + col_pi).setCellValue(dbRow.getValue(17));
					} else if (!"0".equals(dbRow.getValue(18))) {
						excelRow.getCell(7 + col_pi).setCellValue(dbRow.getValue(18));
					} else if (!"0".equals(dbRow.getValue(19))) {
						excelRow.getCell(7 + col_pi).setCellValue(dbRow.getValue(19));
					} else if (!"0".equals(dbRow.getValue(20))) {
						excelRow.getCell(7 + col_pi).setCellValue(dbRow.getValue(20));
					} else {
						excelRow.getCell(7 + col_pi).setCellValue(dbRow.getValue(28));
					}

					// notify Dr ?
					if (ConstantsServerSide.isHKAH()) {
						if ("2".equals(dbRow.getValue(14)) || "5".equals(dbRow.getValue(14)) || "7".equals(dbRow.getValue(14))) {
							excelRow.getCell(8 + col_pi).setCellValue("Y");
						} else {
							if ("checked".equals(dbRow.getValue(12))) {
								excelRow.getCell(8 + col_pi).setCellValue("Y");
							} else if ("checked".equals(dbRow.getValue(23))) {
								excelRow.getCell(8 + col_pi).setCellValue("Y");
							} else if ("checked".equals(dbRow.getValue(27))) {
								excelRow.getCell(8 + col_pi).setCellValue("Y");
							} else if ("checked".equals(dbRow.getValue(13))) {
								excelRow.getCell(8 + col_pi).setCellValue("N");
							}
						}
					} else if (ConstantsServerSide.isTWAH()) {
						if ("2".equals(dbRow.getValue(14)) || "5".equals(dbRow.getValue(14)) || "7".equals(dbRow.getValue(14))) {
							excelRow.getCell(8 + col_pi).setCellValue("Y");
						} else if ("1".equals(dbRow.getValue(14)) || "4".equals(dbRow.getValue(14)) || "6".equals(dbRow.getValue(14)) || "10".equals(dbRow.getValue(14)) ||
									"2092".equals(dbRow.getValue(14)) || "2172".equals(dbRow.getValue(14))) {
							if ("".equals(dbRow.getValue(57))) {
								excelRow.getCell(8 + col_pi).setCellValue("N");
							} else if (dbRow.getValue(57) == null) {
								excelRow.getCell(8 + col_pi).setCellValue("N");
							} else {
								excelRow.getCell(8 + col_pi).setCellValue("Y");
							}
						} else {
							if ("checked".equals(dbRow.getValue(12))) {
								excelRow.getCell(8 + col_pi).setCellValue("Y");
							} else if ("checked".equals(dbRow.getValue(23))) {
								excelRow.getCell(8 + col_pi).setCellValue("Y");
							} else if ("checked".equals(dbRow.getValue(27))) {
								excelRow.getCell(8 + col_pi).setCellValue("Y");
							} else if ("checked".equals(dbRow.getValue(13))) {
								excelRow.getCell(8 + col_pi).setCellValue("N");
							}
						}
					}

					//
					excelRow.getCell(9 + col_pi).setCellValue(dbRow.getValue(15));

					// phar risk rating
					excelRow.getCell(10 + col_pi).setCellValue(dbRow.getValue(32));

					// root casue
					rootCasue = "";
					firstRootCause = false;
					if ("1".equals(dbRow.getValue(33))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Human - Personal lapse of staff";
					}
					if ("1".equals(dbRow.getValue(34))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Human - Inadequate staff training";
					}
					if ("1".equals(dbRow.getValue(35))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Machine/Equipment - No preventive maintenance";
					}
					if ("1".equals(dbRow.getValue(36))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Machine/Equipment - Machine/Equipment faulty";
					}
					if ("1".equals(dbRow.getValue(37))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Machine/Equipment - being misused";
					}
					if ("1".equals(dbRow.getValue(38))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Machine/Equipment - Inadequate instructions";
					}
					if ("1".equals(dbRow.getValue(39))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Machine/Equipment - Inadequate machine/equipment";
					}
					if ("1".equals(dbRow.getValue(40))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Material - Poor quality";
					}
					if ("1".equals(dbRow.getValue(41))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Material - Quality defect";
					}
					if ("1".equals(dbRow.getValue(42))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Material - Expired item";
					}
					if ("1".equals(dbRow.getValue(43))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Material - Inadequate material";
					}
					if ("1".equals(dbRow.getValue(44))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Method - Instructions not followed";
					}
					if ("1".equals(dbRow.getValue(45))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Environment - Mother Nature";
					}
					if ("1".equals(dbRow.getValue(46))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Environment - Noisy";
					}
					if ("1".equals(dbRow.getValue(47))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Environment - Distracting Environment";
					}
					if ("1".equals(dbRow.getValue(48))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Environment - Uneven floor";
					}
					if ("1".equals(dbRow.getValue(49))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Environment - Slippery";
					}
					if ("1".equals(dbRow.getValue(50))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Information Management";
					}
					if ("1".equals(dbRow.getValue(51))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Culture";
					}
					if ("1".equals(dbRow.getValue(52))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Leadership";
					}
					if ("1".equals(dbRow.getValue(53))) {
						if (!firstRootCause) {
							firstRootCause = true;
						} else {
							rootCasue = rootCasue + ", ";
						}
						rootCasue = rootCasue + "Other : " + dbRow.getValue(54);
					}

					excelRow.getCell(11 + col_pi).setCellValue(rootCasue);
					//

					if (IsPIManager(userBean.getStaffID())) {
						excelRow.getCell(12 + col_pi).setCellValue(dbRow.getValue(11));
						excelRow.getCell(5).setCellValue(dbRow.getValue(22));
						excelRow.getCell(14 + 1).setCellValue(dbRow.getValue(24));
						excelRow.getCell(6).setCellValue(dbRow.getValue(25));
					} else {
						excelRow.getCell(12).setCellStyle(style3);
						excelRow.getCell(13).setCellStyle(style3);
						excelRow.getCell(14).setCellStyle(style3);
						excelRow.getCell(15).setCellStyle(style3);
					}
				}
			}

			// output Total : xx
			HSSFPalette palette = workbook.getCustomPalette();
			HSSFColor myColor = palette.findSimilarColor(255, 255, 0);
			style = workbook.createCellStyle();

			excelRow = sheet.getRow(j + 3);

			HSSFFont font = workbook.createFont();
			font.setFontHeight(( short ) (400 ));
			fontColor = font.getColor();
			font.setColor(HSSFColor.RED.index);
			style.setFont(font);

			excelRow.getCell(0).setCellStyle(style);
			excelRow.getCell(1).setCellStyle(style);
			excelRow.getCell(0).setCellValue("Total : ");
			excelRow.getCell(1).setCellValue(excelReport.size());

			if (IsPIManager(LoginID)) {
				// Display summary
				HSSFFont font2 = workbook.createFont();
				style2 = workbook.createCellStyle();
				font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
				font2.setFontHeight(( short ) (300 ));
				style2.setFont(font2);
				//style2.setFillBackgroundColor(HSSFColor.GREY_50_PERCENT.index);
				style2.setFillForegroundColor(HSSFColor.GREY_50_PERCENT.index);
				style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

				j = j + 6;
				//ArrayList summary = fetchSummary(incident_date_from, incident_date_to);
				ArrayList summary = getPIReportList(userBean, "excelSummary", incident_date_from, incident_date_to,
						report_date_from, report_date_to, classification,
						equip, "", "", adr, med, patfall, patgen,
							bef, stagen, stafall, secu, vrofall,
							vrogen, null, oth,
						status, nearmiss, "", ceopend, rejected, "N", pirID, userBean.getDeptCode(), userBean.getStaffID());
				int k = 0;
				int sum = 0;
				for (k = 0; k < summary.size(); k++) {
					dbRow = (ReportableListObject) summary.get(k);
					excelRow = sheet.getRow(j + k);
					excelRow.getCell(3).setCellValue(dbRow.getValue(0));
					excelRow.getCell(3).setCellStyle(style2);
					excelRow.getCell(4).setCellValue(dbRow.getValue(1));
					excelRow.getCell(4).setCellStyle(style2);
					sum = sum + Integer.parseInt(dbRow.getValue(1));
				}
				excelRow = sheet.getRow(j + k);
				excelRow.getCell(3).setCellStyle(style);
				excelRow.getCell(3).setCellValue("Total : ");
				excelRow.getCell(4).setCellStyle(style);
				excelRow.getCell(4).setCellValue(sum);
				//
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static ArrayList fetchSummary(String incident_date_from, String incident_date_to) {
		//
		ReportableListObject row = null;
		StringBuffer sqlStr = new StringBuffer();
		String sql = null;

		sqlStr.setLength(0);
		sqlStr.append("select substr(inc_cat, 1,1), substr(inc_cat, 2,50), sum(cnt) ");
		sqlStr.append("from ( ");
		sqlStr.append("select inc_cat, jan + feb + mar + apr + may + june + july + aug + oct + nov + dece cnt from pi_rpt_type where 1=1 ");

		if (incident_date_from != null && incident_date_from.length() > 0) {
			sqlStr.append("AND inc_date >= TO_DATE('" + incident_date_from + " 00:00:00', 'DD/MM/YYYY HH24:MI:SS') ");
		}
		if (incident_date_to != null && incident_date_to.length() > 0) {
			sqlStr.append("AND inc_date <= TO_DATE('" + incident_date_to + " 23:59:59', 'DD/MM/YYYY HH24:MI:SS') ");
		}
		//sqlStr.append("where inc_date >= to_date('01112014 000000', 'ddmmyyyy hh24miss') ");
		//sqlStr.append("and inc_date <= to_date('30112014 235959', 'ddmmyyyy hh24miss') ");
		sqlStr.append(") ");
		sqlStr.append("group by substr(inc_cat, 1,1), substr(inc_cat, 2,50) ");
		sqlStr.append("order by 1 ");
		sql = sqlStr.toString();

		return UtilDBWeb.getReportableList(sql);
	}

	// ************************************************  incident Report **********************************************************

	public static ArrayList getPIReport(UserBean userBean, String mode, String incident_date_from, String incident_date_to, String pi_option_id) {
		String sql = null;
		String dbLinkHK = "";
		String dbLinkTW = "";

		if (ConstantsServerSide.isHKAH()) {
			dbLinkHK = "@TWAH";
		} else if (ConstantsServerSide.isTWAH()) {
			dbLinkTW = "@HKAH";
		}

		if ("type".equals(mode)) {
			sql = "SELECT inc_cat, inc_type, ";
			sql += "SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece ";
			sql += "from ( ";
			sql += "	SELECT p.inc_cat, p.inc_type, ";
			sql += "			SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "			SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece ";
			sql += "	FROM pi_rpt_type p ";
			sql += "	JOIN pi_report_option_group pg ON pg.pi_enabled = 1 AND pg.pi_grp_type = 'incident_type' AND pg.pi_grpid <> 32 ";
			sql += " 											AND pg.pi_grpid = p.inc_type ";
			sql += "	where p.inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "	AND p.inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "	GROUP BY p.inc_cat, p.inc_type ";
			sql += "union all ";
			if (ConstantsServerSide.isHKAH()) {
			sql += "select DECODE(pi_grpid, '33', '5 Staff Injury', DECODE(pi_grpid, '44', '1 Patient Fall', DECODE(pi_grpid, '46', '3 Visitor Fall', DECODE(pi_grpid, '48', '4 Patient Injury', DECODE(pi_grpid, '50', '6 Visitor Injury', DECODE(pi_grpid, '52', '8 Medication Incident', DECODE(pi_grpid, '54', 'b Equipment', DECODE(pi_grpid, '56', 'c Other', DECODE(pi_grpid, '58', 'a Security', DECODE(pi_grpid, '62', '9 Adverse Drug Reaction', DECODE(pi_grpid, '64', '2 Staff Fall', DECODE(pi_grpid, '65', '7 Sharp Injury(BBF)', '' ))) ))) ))) ))) inc_cat, ";
			sql += "        to_char(pi_grpid) inc_type, ";
			sql += "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
			sql += "from pi_report_option_group ";
			sql += "where pi_grp_type = 'incident_type' and pi_grpid <> 32 and pi_grpid <> 62";
			sql += ") ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "select inc_cat, inc_type, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
				sql += "from pi_report_inc_cat ";
				sql += ") ";
			}
			sql += "group by inc_cat, inc_type ";
			sql += "ORDER BY inc_cat ";
		} else if ("ceo_cum".equals(mode)) {
			sql = "SELECT inc_cat, inc_type, ";
			sql += "SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece ";
			sql += "from ( ";
			sql += "	SELECT p.inc_cat, p.inc_type, ";
			sql += "			SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "			SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece ";
			sql += "	FROM pi_rpt_type p ";
			sql += "	JOIN pi_report_option_group pg ON pg.pi_enabled = 1 AND pg.pi_grp_type = 'incident_type' AND pg.pi_grpid <> 32 ";
			sql += " 											AND pg.pi_grpid = p.inc_type ";
			sql += "	where p.inc_date >= to_date('" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
			sql += "	AND p.inc_date <= to_date('" + incident_date_to + " 125959', 'ddmmyyyy hh24miss') ";
			sql += "	GROUP BY p.inc_cat, p.inc_type ";
			sql += "union all ";
			if (ConstantsServerSide.isHKAH()) {
			sql += "select DECODE(pi_grpid, '33', '5 Staff Injury', DECODE(pi_grpid, '44', '1 Patient Fall', DECODE(pi_grpid, '46', '3 Visitor Fall', DECODE(pi_grpid, '48', '4 Patient Injury', DECODE(pi_grpid, '50', '6 Visitor Injury', DECODE(pi_grpid, '52', '8 Medication Incident', DECODE(pi_grpid, '54', 'b Equipment', DECODE(pi_grpid, '56', 'c Other', DECODE(pi_grpid, '58', 'a Security', DECODE(pi_grpid, '62', '9 Adverse Drug Reaction', DECODE(pi_grpid, '64', '2 Staff Fall', DECODE(pi_grpid, '65', '7 Sharp Injury(BBF)', '' ))) ))) ))) ))) inc_cat, ";
			sql += "        to_char(pi_grpid) inc_type, ";
			sql += "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
			sql += "from pi_report_option_group ";
			sql += "where pi_grp_type = 'incident_type' and pi_grpid <> 32 ";
			sql += ") ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "select inc_cat, inc_type, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
				sql += "from pi_report_inc_cat ";
				sql += ") ";
			}
			sql += "group by inc_cat, inc_type ";
			sql += "ORDER BY inc_cat ";
		} else if ("ceo_cum_near_miss".equals(mode)) {
			sql = "SELECT ";
			sql += "SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece ";
			sql += "FROM pi_rpt_type_near_miss p ";
			sql += "JOIN pi_report_option_group pg ON pg.pi_enabled = 1 AND pg.pi_grp_type = 'incident_type' AND pg.pi_grpid <> 32 ";
			sql += "AND pg.pi_grpid = p.inc_type ";
			sql += "	where p.inc_date >= to_date('" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
			sql += "	AND p.inc_date <= to_date('" + incident_date_to + " 125959', 'ddmmyyyy hh24miss') ";
		} else if ("ceo_cum_risk_ass".equals(mode)) {
			sql = "select dh.pirid, dh.pir_risk_ass ";
			sql += "from pi_report p ";
			sql += "join pi_report_dhead_comment dh on p.pirid = dh.pirid and dh.enable = 1 ";
			sql += "where p.PIR_INCIDENT_DATE >= to_date('" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
			sql += "	AND p.PIR_INCIDENT_DATE <= to_date('" + incident_date_to + " 125959', 'ddmmyyyy hh24miss') and p.enable = 1 ";
			sql += "	and p.pir_near_miss_pi = 0";
		} else if ("type2".equals(mode)) {
			sql = "select inc_cat, sum(tot) ";
			sql += "from ( ";
			sql += "select inc_cat, sum(tot) tot from pi_rpt_type2 ";
			sql += "where inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') and ";
			sql += "inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') group by inc_cat ";
			sql += "union all ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "select SUBSTR(inc_cat, 3, LENGTH(inc_cat)) inccat, 0 from ";
				sql += "( ";
				sql += "select DECODE(pi_grpid, '33', '5 Staff Injury', DECODE(pi_grpid, '44', '1 Patient Fall', DECODE(pi_grpid, '46', '3 Visitor Fall', DECODE(pi_grpid, '48', '4 Patient Injury', DECODE(pi_grpid, '50', '6 Visitor Injury', DECODE(pi_grpid, '52', '8 Medication Incident', DECODE(pi_grpid, '54', 'b Equipment', DECODE(pi_grpid, '56', 'c Other', DECODE(pi_grpid, '58', 'a Security', DECODE(pi_grpid, '62', '9 Adverse Drug Reaction', DECODE(pi_grpid, '64', '2 Staff Fall', DECODE(pi_grpid, '65', '7 Sharp Injury(BBF)', '' ))) ))) ))) ))) inc_cat, ";
				sql += "to_char(pi_grpid) inc_type, ";
				sql += "0 ";
				sql += "from pi_report_option_group ";
				sql += "where pi_grp_type = 'incident_type' and pi_grpid <> 32 and pi_grpid <> 62";
				sql += ") ";
				sql += "WHERE SUBSTR(inc_cat, 3, LENGTH(inc_cat)) NOT IN ('Staff Injury', 'Sharp Injury(BBF)', 'Staff Fall') ";
				sql += "union all ";
				sql += "select 'Staff Inj/BBF/Fall', 0 from dual ";
				sql += ") group by inc_cat order by sum(tot)";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "select SUBSTR(inc_cat, 3, LENGTH(inc_cat)) inccat, 0 ";
				sql += "from pi_report_inc_cat ";
				sql += "WHERE SUBSTR(inc_cat, 3, LENGTH(inc_cat)) NOT IN ('Staff Injury', 'Staff Injury(BBF)', 'Staff Fall') ";
				sql += "union all ";
				sql += "select 'Staff Inj/BBF/Fall', 0 from dual ";
				sql += ") group by inc_cat order by sum(tot)";
			}
		} else if ("type2_compare_top3_hk".equals(mode)) {
			sql = "select inc_cat, sum(tot) ";
			sql += "from ( ";
			sql += "select inc_cat, sum(tot) tot from pi_rpt_type2";
			if (ConstantsServerSide.isHKAH()) {
				sql += " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += dbLinkTW + " ";
			}
			sql += "where inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') and ";
			sql += "inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') group by inc_cat ";
			sql += "union all ";
			sql += "select SUBSTR(inc_cat, 3, LENGTH(inc_cat)) inccat, 0 from ";
			sql += "( ";
			sql += "select DECODE(pi_grpid, '33', '5 Staff Injury', DECODE(pi_grpid, '44', '1 Patient Fall', DECODE(pi_grpid, '46', '3 Visitor Fall', DECODE(pi_grpid, '48', '4 Patient Injury', DECODE(pi_grpid, '50', '6 Visitor Injury', DECODE(pi_grpid, '52', '8 Medication Incident', DECODE(pi_grpid, '54', 'b Equipment', DECODE(pi_grpid, '56', 'c Other', DECODE(pi_grpid, '58', 'a Security', DECODE(pi_grpid, '62', '9 Adverse Drug Reaction', DECODE(pi_grpid, '64', '2 Staff Fall', DECODE(pi_grpid, '65', '7 Sharp Injury(BBF)', '' ))) ))) ))) ))) inc_cat, ";
			sql += "to_char(pi_grpid) inc_type, ";
			sql += "0 ";
			sql += "from pi_report_option_group";;
			if (ConstantsServerSide.isHKAH()) {
				sql += " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += dbLinkTW + " ";
			}
			sql += "where pi_grp_type = 'incident_type' and pi_grpid <> 32 ";
			sql += ") ";
			sql += "WHERE SUBSTR(inc_cat, 3, LENGTH(inc_cat)) NOT IN ('Staff Injury', 'Sharp Injury(BBF)', 'Staff Fall') ";
			sql += "union all ";
			sql += "select 'Staff Inj/BBF/Fall', 0 from dual ";
			sql += ") group by inc_cat order by sum(tot) desc";
		} else if ("type2_compare_top3_tw".equals(mode)) {
			sql = "select inc_cat, sum(tot) ";
			sql += "from ( ";
			sql += "select inc_cat, sum(tot) tot from pi_rpt_type2";
			if (ConstantsServerSide.isHKAH()) {
				sql += dbLinkHK + " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += " ";
			}
			sql += "where inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') and ";
			sql += "inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') group by inc_cat ";
			sql += "union all ";
			sql += "select SUBSTR(inc_cat, 3, LENGTH(inc_cat)) inccat, 0 ";
			sql += "from pi_report_inc_cat";
			if (ConstantsServerSide.isHKAH()) {
				sql += dbLinkHK + " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += " ";
			}
			sql += "WHERE SUBSTR(inc_cat, 3, LENGTH(inc_cat)) NOT IN ('Staff Injury', 'Staff Injury(BBF)', 'Staff Fall') ";
			sql += "union all ";
			sql += "select 'Staff Inj/BBF/Fall', 0 from dual ";
			sql += ") group by inc_cat order by sum(tot) desc";
		} else if ("unit".equals(mode)) {
			sql = "select inc_place, ";
			sql += "	sum(jan) jan, sum(feb) feb, sum(mar) mar, sum(apr) apr, sum(may) may, sum(june) june, ";
			sql += "	sum(july) july, sum(aug) aug, sum(sep) sep, sum(oct) oct, sum(nov) nov, sum(dece) dece ";
			sql += "from ( ";
			sql += "	select inc_place inc_place, p.pi_order, ";
			sql += "			jan, feb, mar, apr, may, june, ";
			sql += "			july, aug, sep, oct, nov, dece ";
			sql += "	from (";
			sql += "		select inc_date, inc_place, ";
			sql += "			   jan, feb, mar, apr, may, june, ";
			sql += "			   july, aug, sep, oct, nov, dece ";
			sql += "		from pi_rpt_unit ";
			sql += "	    union all ";
			sql += "		select null, pi_prop_value, ";
			sql += "				0, 0, 0, 0, 0, 0, ";
			sql += "				0, 0, 0, 0, 0, 0 ";
			sql += " 		from pi_report_properties ";
			sql += "		where pi_enabled = 1 ";
			sql += "	) ";
			sql += "	join pi_report_properties p on p.pi_prop_value = inc_place and p.pi_enabled = 1 ";
			sql += "	where ";
			sql += " 		(inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') and ";
			sql += "  		inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss')) ";
			sql += " 		or inc_date is null ";
			sql += ") ";
			sql += "group by pi_order, inc_place ";
			sql += "order by pi_order ";
		} else if ("type_unit".equals(mode)) {
			if (ConstantsServerSide.isHKAH()) {
				sql = "select inc_place, ";
				sql += "	sum(patient_fall), sum(patient_injury), sum(visitor_fall), ";
				sql += "	sum(visitor_injury), sum(staff_fall), sum(staff_injury), sum(sharp_injury_bbf), ";
				sql += "	sum(medication), sum(adr), sum(secu), sum(equipment), sum(other) ";
				sql += "from ( ";
				sql += "		select inc_place inc_place, pi_order, ";
				sql += "				patient_fall, patient_injury, visitor_fall, visitor_injury, staff_fall, staff_injury, ";
				sql += "				sharp_injury_bbf, medication, adr, secu, equipment, other ";
				sql += "		from ( ";
				sql += "			 select inc_date, inc_place, ";
				sql += "				decode(p.patient_fall, null, 0, p.patient_fall) patient_fall, ";
				sql += "				decode(p.patient_injury, null, 0, p.patient_injury) patient_injury, ";
				sql += "				decode(p.visitor_fall, null, 0, p.visitor_fall) visitor_fall, ";
				sql += "				decode(p.visitor_injury, null, 0, p.visitor_injury) visitor_injury, ";
				sql += "				decode(p.staff_fall, null, 0, p.staff_fall) staff_fall, ";
				sql += "				decode(p.staff_injury, null, 0, p.staff_injury) staff_injury, ";
				sql += "				decode(p.sharp_injury_bbf, null, 0, p.sharp_injury_bbf) sharp_injury_bbf, ";
				sql += "				decode(p.medication, null, 0, p.medication) medication, ";
				sql += "				decode(p.adr, null, 0, p.adr) adr, decode(p.secu, null, 0, p.secu) secu, ";
				sql += "				decode(p.equipment, null, 0, p.equipment) equipment, ";
				sql += "				decode(p.other, null, 0, p.other) other ";
				sql += "			from pi_rpt_unit_type p ";
				sql += " 			union all ";
				sql += " 			select null, pi_prop_value, ";
				sql += "					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
				sql += " 			from pi_report_properties ";
				sql += "			where pi_enabled = 1 ";
				sql += "		) ";
				sql += "		join pi_report_properties p on p.pi_prop_value = inc_place and p.pi_enabled = 1 ";
				sql += "		where (inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "		AND inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss')) ";
				sql += "		or inc_date is null ";
				sql += ") ";
				sql += "group by pi_order, inc_place ";
				sql += "order by pi_order ";
			} else {
				sql = "select inc_place, ";
				sql += "	sum(staff_fall), sum(visitor_fall), sum(patient_fall), ";
				sql += "	sum(staff_injury), sum(visitor_injury), sum(patient_injury), ";
				sql += "	sum(sharp_injury_bbf), ";
				sql += "	sum(medication), sum(adr), ";
				sql += "	sum(secu), sum(equipment), sum(inc_rel_opr), sum(blo_prod_tran), ";
				sql += "	sum(other) ";
				sql += "	from ( ";
				sql += "		select inc_place inc_place, pi_order, ";
				sql += "			staff_fall, patient_fall, visitor_fall, ";
				sql += "			staff_injury, visitor_injury, patient_injury, ";
				sql += "			sharp_injury_bbf, ";
				sql += "			medication, adr, ";
				sql += "			secu, equipment, inc_rel_opr, blo_prod_tran, ";
				sql += "			other ";
				sql += "		from ( ";
				sql += "				select inc_date, inc_place, ";
				sql += "						decode(p.staff_fall, null, 0, p.staff_fall) staff_fall, ";
				sql += "						decode(p.visitor_fall, null, 0, p.visitor_fall) visitor_fall, ";
				sql += "						decode(p.patient_fall, null, 0, p.patient_fall) patient_fall, ";
				sql += "						decode(p.staff_injury, null, 0, p.staff_injury) staff_injury, ";
				sql += "						decode(p.visitor_injury, null, 0, p.visitor_injury) visitor_injury, ";
				sql += "						decode(p.patient_injury, null, 0, p.patient_injury) patient_injury, ";
				sql += "						decode(p.sharp_injury_bbf, null, 0, p.sharp_injury_bbf) sharp_injury_bbf, ";
				sql += "						decode(p.medication, null, 0, p.medication) medication, ";
				sql += "						decode(p.adr, null, 0, p.adr) adr, ";
				sql += "						decode(p.secu, null, 0, p.secu) secu, ";
				sql += "						decode(p.equipment, null, 0, p.equipment) equipment, ";
				sql += "						decode(p.inc_rel_opr, null, 0, p.inc_rel_opr) inc_rel_opr, ";
				sql += "						decode(p.blo_prod_tran, null, 0, p.blo_prod_tran) blo_prod_tran, ";
				sql += "						decode(p.other, null, 0, p.other) other ";
				sql += "				from pi_rpt_unit_type p ";
				sql += "				union all ";
				sql += "				select null, pi_prop_value, ";
				sql += "					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
				sql += "				from pi_report_properties ";
				sql += "				where pi_enabled = 1 ";
				sql += "			) ";
				sql += "		join pi_report_properties p on p.pi_prop_value = inc_place and p.pi_enabled = 1 ";
				sql += "		where (inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "		AND inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss')) ";
				sql += "				or inc_date is null ";
				sql += "	) ";
				sql += "	group by pi_order, inc_place ";
				sql += "	order by pi_order ";
			}
		} else if ("comparison_top3_part1".equals(mode)) {
		/*
			if (ConstantsServerSide.isHKAH()) {
				sql = "select DECODE(p.pir_incident_type, '33', 'Staff Injury', DECODE(p.pir_incident_type, '44', 'Patient Fall', DECODE(p.pir_incident_type, '46', 'Visitor Fall', DECODE(p.pir_incident_type, '48', 'Patient Injury', DECODE(p.pir_incident_type, '50', 'Visitor Injury', DECODE(p.pir_incident_type, '52', 'Medication Incident', DECODE(p.pir_incident_type, '54', 'Equipment', DECODE(p.pir_incident_type, '56', 'Other', DECODE(p.pir_incident_type, '58', 'Security', DECODE(p.pir_incident_type, '62', 'Adverse Drug Reaction', DECODE(p.pir_incident_type, '64', 'Staff Fall', DECODE(p.pir_incident_type, '65', 'Sharp Injury(BBF)', '' ))) ))) ))) ))) inc_cat, count(1), 0 ";
				sql += "from pi_report p ";
				sql += "where p.enable = 1 AND p.pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "				 AND p.pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				sql += "GROUP BY DECODE(p.pir_incident_type, '33', 'Staff Injury', DECODE(p.pir_incident_type, '44', 'Patient Fall', DECODE(p.pir_incident_type, '46', 'Visitor Fall', DECODE(p.pir_incident_type, '48', 'Patient Injury', DECODE(p.pir_incident_type, '50', 'Visitor Injury', DECODE(p.pir_incident_type, '52', 'Medication Incident', DECODE(p.pir_incident_type, '54', 'Equipment', DECODE(p.pir_incident_type, '56', 'Other', DECODE(p.pir_incident_type, '58', 'Security', DECODE(p.pir_incident_type, '62', 'Adverse Drug Reaction', DECODE(p.pir_incident_type, '64', 'Staff Fall', DECODE(p.pir_incident_type, '65', 'Sharp Injury(BBF)', '' ))) ))) ))) ))) " ;
				sql += "union all ";
				sql += "select 'TOTAL_STAFF', 0, count(1) ";
				sql += "from co_staffs where co_enabled = 1 and co_mark_deleted = 'N' and co_staff_id not like 'V%' and co_site_code = 'hkah' ";
				sql += "and co_hire_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				sql += "ORDER BY 2 DESC";
			} else {

			}
		*/
		} else if ("comparison_top3_part2".equals(mode)) {
			sql = "select inc_cat, sum(col1), sum(col2) ";
			sql += "from ( ";
			sql += "  select inc_cat, count(1) * 100 col1, 0 col2 ";
			sql += "  from ( ";
			sql += "	select DECODE(p.pir_incident_type_pi, '44', 'Patient Fall', DECODE(p.pir_incident_type_pi, '89', 'Patient Fall', '')) inc_cat ";
			sql += "	from pi_report p ";
			//sql += "	JOIN pi_report_involve_person pp ON p.pirid = pp.pirid AND pp.is_patient = 1 AND pp.enable = 1 ";
			//sql += "	join reg@iweb r on r.patno = pp.patno and r.regtype = 'I' ";
			//sql += "	join inpat@iweb i on r.inpid = i.inpid ";
			sql += "	where p.enable = 1 and pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "			AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "			AND p.pir_incident_type_pi = '44' ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "			AND p.pir_incident_type_pi = '89' ";
			}
			sql += " AND P.pir_inout_pat = 'I' ";
			//sql += "			and to_char(regdate, 'yyyymmdd') <= to_char(pir_incident_date, 'yyyymmdd') and ";
			//sql += "			(to_char(i.inpddate, 'yyyymmdd') >= to_char(pir_incident_date, 'yyyymmdd') or i.inpid is null or i.inpddate is null)";
			sql += "   ) group by inc_cat, 0 " ;
			sql += "   union all ";
			sql += "   select 'Patient Fall', 0, 0 from dual ";
			sql += ") group by inc_cat ";
			sql += "union all ";
			sql += "select to_char(cnt_date,'yyyy'), 0, sum(CNT_MIDNIGHT) ";
			sql += "from mis_bedcnt@cis ";
			sql += "where to_char(cnt_date,'yyyy') = '" + incident_date_from.substring(4, 8) + "' ";
			sql += "group by to_char(cnt_date,'yyyy') ";
		} else if ("comparison_med_err_dose".equals(mode)) {
			sql = "select 'Error', count(1) adm_err_miss_dose, 0 ";
			sql += "from pi_report p ";
			sql += "join pi_report_content pc on p.pirid = pc.pirid and pc.pi_option_id = " + pi_option_id;
			sql += "join pi_report_option po on pc.pi_option_id = po.pi_option_id ";
			sql += "where p.enable = 1 and pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "				   and pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "				   AND p.pir_incident_type_pi = '52' ";
			sql += "GROUP BY 'Error', 0 ";
			sql += "union all ";
			sql += "select 'totoal med error', 0, count(1) ";
			sql += "from pi_report p ";
			sql += "where p.enable = 1 and pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "AND p.pir_incident_type_pi = '52' ";
			sql += "GROUP BY 'totoal med error', 0 ";
		} else if ("comparison_others".equals(mode)) {
			sql = "select p.pi_grpid, pg.pi_grp_desc, substr(pg.pi_grp_desc,1,1) odr, count(1) ";
			sql += "from ( ";
			sql += "	select p.pirid, pc.pi_grpid, count(1) ";
			sql += "	from pi_report p ";
			sql += "	join pi_report_content pc on pc.pirid = p.pirid and pc.pi_grpid in (13, 19, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 26 ) ";
			sql += "				   where p.enable = 1 and p.pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "				   AND p.pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "				   and p.pir_incident_type = 56 ";
			sql += "				   group by p.pirid, pc.pi_grpid ";
			sql += ") p ";
			sql += "join pi_report_option_group pg on p.pi_grpid = pg.pi_grpid ";
			sql += "group by p.pi_grpid, pg.pi_grp_desc, substr(pg.pi_grp_desc,1,1) ";
			sql += "order by pg.pi_grp_desc";
		} else if (("summary_1a".equals(mode)) || ("summary_2a".equals(mode)) || ("summary_3a".equals(mode)) || ("summary_4a".equals(mode))) {
			//incident_date_from = "01012014 000001";
			//incident_date_to = "31122014 235959";
			if (ConstantsServerSide.isHKAH()) {
				sql = "select mth, sum(cnt) from ( ";
				sql += "	SELECT TO_CHAR(pir_incident_date, 'mm') mth, count(1) cnt ";
				sql += "	FROM pi_report p ";
				sql += "	WHERE pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "	AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				sql += "	AND enable = 1 AND p.PIR_NEAR_MISS_PI = 0 ";
				if ("summary_2a".equals(mode)) {
					sql += "and p.pir_incident_type_pi in ('48', '50', '33', '65') ";
				} else if ("summary_3a".equals(mode)) {
					sql += "and p.pir_incident_type_pi in ('52') ";
				} else if ("summary_4a".equals(mode)) {
					sql += "and p.pir_incident_type_pi in ('44', '46', '64') ";
				}
				sql += "group by TO_CHAR(pir_incident_date, 'mm') ";
				sql += "union all ";
				sql += "SELECT substr('0'||ROWNUM,-2,2) AS mth, 0 cnt from dual CONNECT BY LEVEL <= 12 ";
				sql += ") ";
				sql += "group by mth ";
				sql += "order by mth ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql = "select mth, count(1) ";
				sql += "from ( ";
				sql += "	select pir_incident_type_pi, pir_incident_date, mth ";
				sql += "	from ( ";
				sql += "		select pir_incident_type_pi, pir_incident_date, TO_CHAR(pir_incident_date, 'mm') mth ";
				sql += "		from pi_report_staff where pir_near_miss_pi = '0' ";
				sql += "		union all ";
				sql += "		select pir_incident_type_pi, pir_incident_date, TO_CHAR(pir_incident_date, 'mm') mth ";
				sql += "		from pi_report_visitor where pir_near_miss_pi = '0' ";
				sql += "		union all ";
				sql += "		select pir_incident_type_pi, pir_incident_date, TO_CHAR(pir_incident_date, 'mm') mth ";
				sql += "		from pi_report_general where pir_near_miss_pi = '0' ";
				sql += ") ";
				sql += "WHERE pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				if ("summary_2a".equals(mode)) {
					sql += "AND pir_incident_type_pi in ('33', '90', '65', '50') ";
				} else if ("summary_3a".equals(mode)) {
					sql += "AND pir_incident_type_pi in ('52') ";
				} else if ("summary_4a".equals(mode)) {
					sql += "AND pir_incident_type_pi in ('46', '64', '89') ";
				}
				sql += ") group by mth order by mth ";
			}
		} else if (("summary_1b".equals(mode)) || ("summary_2b".equals(mode)) || ("summary_3b".equals(mode)) || ("summary_4b".equals(mode))) {
			if (ConstantsServerSide.isHKAH()) {
				sql = "select quater, count(1) ";
				sql += "from ( ";
				sql += "SELECT decode(TO_CHAR(pir_incident_date, 'mm'), '01', 'Q1', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '02', 'Q1', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '03', 'Q1', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '04', 'Q2', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '05', 'Q2', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '06', 'Q2', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '07', 'Q3', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '08', 'Q3', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '09', 'Q3', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '10', 'Q4', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '11', 'Q4', ";
				sql += "decode(TO_CHAR(pir_incident_date, 'mm'), '12', 'Q4', ";
				sql += "'')))))))))))) quater      ";
				sql += "FROM pi_report p ";
				sql += "WHERE pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				sql += "AND enable                                    = 1  ";
				sql += "AND PIR_NEAR_MISS_PI = 0  ";
				if ("summary_2b".equals(mode)) {
					sql += "and p.pir_incident_type_pi in ('48', '50', '33', '65') ";
				} else if ("summary_3b".equals(mode)) {
					sql += "and p.pir_incident_type_pi in ('52', '62') ";
				} else if ("summary_4b".equals(mode)) {
					sql += "and p.pir_incident_type_pi in ('44', '46', '64') ";
				}
				sql += ") GROUP BY quater ";
				sql += "order by quater ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql = "select quater, count(1) ";
				sql += "from ( ";
				sql += "	SELECT decode(TO_CHAR(pir_incident_date, 'mm'), '01', 'Q1', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '02', 'Q1', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '03', 'Q1', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '04', 'Q2', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '05', 'Q2', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '06', 'Q2', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '07', 'Q3', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '08', 'Q3', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '09', 'Q3', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '10', 'Q4', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '11', 'Q4', ";
				sql += "		decode(TO_CHAR(pir_incident_date, 'mm'), '12', 'Q4', '')))))))))))) quater ";
				sql += "		from ( ";
				sql += "				select pir_incident_date, pir_incident_type_pi ";
				sql += "				FROM pi_report_general ";
				sql += "				union all ";
				sql += "				select pir_incident_date, pir_incident_type_pi ";
				sql += "				FROM pi_report_staff ";
				sql += "				union all ";
				sql += "				select pir_incident_date, pir_incident_type_pi ";
				sql += "				FROM pi_report_visitor ";
				sql += "			) ";
				sql += "	WHERE pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "	AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				if ("summary_2b".equals(mode)) {
					sql += "	and pir_incident_type_pi in ('33', '90', '65', '50') ";
				} else if ("summary_3b".equals(mode)) {
					sql += "and pir_incident_type_pi in ('52', '62') ";
				} else if ("summary_4b".equals(mode)) {
					sql += "and pir_incident_type_pi in ('46', '64', '89') ";
				}
				sql += "	) ";
				sql += "group by quater ";
				sql += "order by quater ";
			}
		} else if ("summary_1_byyear".equals(mode) || "summary_2b_byyear".equals(mode) || "summary_3b_byyear".equals(mode) || "summary_4b_byyear".equals(mode)
					|| "summary_6b_byyear".equals(mode) || "summary_7b_byyear".equals(mode)  || "summary_8b_byyear".equals(mode) || "summary_9b_byyear".equals(mode)) {
			if (ConstantsServerSide.isHKAH()) {
				sql = "select year, sum(cnt) from ";
				sql += "( ";
				sql += "	SELECT to_char(pir_incident_date, 'yyyy') year, TO_CHAR(pir_incident_date, 'mm') mth, count(1) cnt ";
				sql += "	FROM pi_report p ";
				sql += "	WHERE pir_incident_date >= to_date('0101" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "	AND pir_incident_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "	AND enable = 1 AND p.PIR_NEAR_MISS_PI = 0 ";
				if ("summary_2b_byyear".equals(mode)) {
					sql += "	and p.pir_incident_type_pi in ('33', '64', '65') ";
				} else if ("summary_3b_byyear".equals(mode)) {
					sql += "	and p.pir_incident_type_pi in ('52') ";
				} else if ("summary_4b_byyear".equals(mode)) {
					//sql += "	and p.pir_incident_type_pi in ('56', '54') "; // others, equipment
					sql += "	and p.pir_incident_type_pi in ('56') "; // others
				} else if ("summary_6b_byyear".equals(mode)) {
					sql += "	and p.pir_incident_type_pi in ('46') ";
				} else if ("summary_7b_byyear".equals(mode)) {
					sql += "	and p.pir_incident_type_pi in ('48') ";
				} else if ("summary_8b_byyear".equals(mode)) {
					sql += "	and p.pir_incident_type_pi in ('58') ";
				} else if ("summary_9b_byyear".equals(mode)) {
					sql += "	and p.pir_incident_type_pi in ('50') ";
				}
				sql += "	group by to_char(pir_incident_date, 'yyyy'), TO_CHAR(pir_incident_date, 'mm') order by mth ";
				sql += ") ";
				sql += "group by year order by year ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql = "select to_char(inc_date, 'yyyy') year, count(1) from PI_RPT_TYPE ";
				if ("summary_1_byyear".equals(mode)) {
					sql += "where 1 = 1 ";
				}
				else if ("summary_2b_byyear".equals(mode)) {
					sql += "where inc_type in ('33', '65', '64') ";
				} else if ("summary_3b_byyear".equals(mode)) {
					sql += "where inc_type in ('52') ";
				} else if ("summary_4b_byyear".equals(mode)) {
					sql += "	where inc_type in ('56', '120') "; // others
				} else if ("summary_6b_byyear".equals(mode)) {
					sql += "	where inc_type in ('46') ";
				} else if ("summary_7b_byyear".equals(mode)) {
					sql += "	where inc_type in ('90') ";
				} else if ("summary_8b_byyear".equals(mode)) {
					sql += "	where inc_type in ('58') ";
				} else if ("summary_9b_byyear".equals(mode)) {
					sql += "	where inc_type in ('50') ";
				}
				sql += "and inc_date >= to_date('0101" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "and inc_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "group by to_char(inc_date, 'yyyy') ";
				sql += "order by year ";
			}
		} else if ("summary_5b_byyear".equals(mode)) {
			sql = "select inc_cat, sum(col1), sum(col2) from ";
			sql += "(   select inc_cat, count(1) * 1000 col1, 0 col2 from ";
			sql += "		( ";
			sql += "		 select DECODE(p.pir_incident_type_pi, '44', 'I Patient Fall', DECODE(p.pir_incident_type_pi, '89', 'I Patient Fall', '')) inc_cat ";
			sql += "		 from pi_report p ";
			//sql += "		 JOIN pi_report_involve_person pp ON p.pirid = pp.pirid AND pp.is_patient = 1 AND pp.enable = 1 ";
			//sql += "		 join reg@iweb r on r.patno = pp.patno and r.regtype = 'I' ";
			//sql += "		 join inpat@iweb i on r.inpid = i.inpid ";
			sql += "		 where p.enable = 1 and p.pir_near_miss_pi = 0 and pir_incident_date >= to_date('0101" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
			sql += "		 AND pir_incident_date <= to_date('3112" + incident_date_from + " 235959', 'ddmmyyyy hh24miss') ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "		 AND p.pir_incident_type_pi = '44' ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "		 AND p.pir_incident_type_pi = '89' ";
			}
			sql += " AND P.pir_inout_pat = 'I' ";
			//sql += "		 and to_char(regdate, 'yyyymmdd') <= to_char(pir_incident_date, 'yyyymmdd') ";
			//sql += "		 and  (to_char(i.inpddate, 'yyyymmdd') >= to_char(pir_incident_date, 'yyyymmdd') or i.inpid is null  or i.inpddate is null) ";
			sql += "		 ) ";
			sql += "	group by inc_cat, 0 ";
			sql += "	union all ";
			sql += "	select 'I Patient Fall', 0, 0 from dual ";
			sql += "	) ";
			sql += "	group by inc_cat ";
			sql += "union all ";
			sql += "select inc_cat, sum(col1), sum(col2) from ";
			sql += "	(   select inc_cat, count(1) * 1000 col1, 0 col2 from ";
			sql += " 		( ";
			sql += "			select distinct 'O Patient Fall' inc_cat, p.pirid, to_char(pir_incident_date, 'yyyymmdd') ";
			sql += "			from pi_report p ";
			//sql += "			JOIN pi_report_involve_person pp ON p.pirid = pp.pirid AND pp.is_patient = 1 AND pp.enable = 1 ";
			//sql += "			join reg@iweb r on r.patno = pp.patno and r.regtype = 'O' ";
			sql += "			where p.enable = 1 and p.pir_near_miss = 0 and pir_incident_date >= to_date('0101" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
			sql += "			AND pir_incident_date <= to_date('3112" + incident_date_from + " 235959', 'ddmmyyyy hh24miss') ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "		 AND p.pir_incident_type_pi = '44' ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "		 AND p.pir_incident_type_pi = '89' ";
			}
			//sql += "			and to_char(regdate, 'yyyymmdd') >= to_char(pir_incident_date, 'yyyymmdd') ";
			//sql += "			and to_char(regdate, 'yyyymmdd') <= to_char(pir_incident_date, 'yyyymmdd') ";
			sql += "			and p.pirid not in (";
			sql += "					select p.pirid from pi_report p";
			//sql += "					JOIN pi_report_involve_person pp ON p.pirid = pp.pirid AND pp.is_patient = 1 AND pp.enable = 1";
			//sql += "					join reg@iweb r on r.patno = pp.patno and r.regtype = 'I'";
			//sql += "					join inpat@iweb i on r.inpid = i.inpid";
			//
			sql += "		 			where p.enable = 1 and p.pir_near_miss = 0 and pir_incident_date >= to_date('0101" + incident_date_from + " 000001', 'ddmmyyyy hh24miss') ";
			sql += "		 			AND pir_incident_date <= to_date('3112" + incident_date_from + " 235959', 'ddmmyyyy hh24miss') ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "		 AND p.pir_incident_type_pi = '44' ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "		 AND p.pir_incident_type_pi = '89' ";
			}
			sql += " AND P.pir_inout_pat = 'I' ";
			//sql += "					and to_char(regdate, 'yyyymmdd') <= to_char(pir_incident_date, 'yyyymmdd') ";
			//sql += "				 	and  (to_char(i.inpddate, 'yyyymmdd') >= to_char(pir_incident_date, 'yyyymmdd') or i.inpid is null  or i.inpddate is null) ";
			sql += "			)";
			sql += "		) ";
			sql += "		group by inc_cat, 0 ";
			sql += "		union all ";
			sql += "		select 'O Patient Fall', 0, 0 from dual ";
			sql += "	) ";
			sql += "group by inc_cat ";
			sql += "union all ";
			//sql += "select to_char(cnt_date,'yyyy'), 0, sum(CNT_MIDNIGHT) ";
			//sql += "from mis_bedcnt@cis ";
			//sql += "where to_char(cnt_date,'yyyy') = '" + incident_date_from + "' ";
			//sql += "group by to_char(cnt_date,'yyyy') ";
			sql += "select report_year, 0, sum(FEB) FROM pi_report_data WHERE REPORT_ID = 'achs_bednum' and report_year  = '" + incident_date_from + "' ";
			sql += "group by report_year ";
			sql += "order by inc_cat ";
		} else if ("summary_2a_byyear".equals(mode)) {
			//incident_date_to = "2015";
			if (ConstantsServerSide.isHKAH()) {
				sql = "select inctype, year, cnt from (";
				sql += " 	select 'stainj' inctype, year, sum(cnt) cnt from (";
				sql += "    		SELECT to_char(pir_incident_date, 'yyyy') year, TO_CHAR(pir_incident_date, 'mm') mth, count(1) cnt ";
				sql += "			FROM pi_report p ";
				sql += "			WHERE pir_incident_date >= to_date('0101" + incident_date_to + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "			AND pir_incident_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "			AND enable = 1 AND p.PIR_NEAR_MISS_PI = 0 ";
				sql += "			and p.pir_incident_type_pi in ('33') ";
				sql += "			group by to_char(pir_incident_date, 'yyyy'), TO_CHAR(pir_incident_date, 'mm') order by mth ";
				sql += "	) group by 'stainj', year ";
				sql += "	union all ";
				sql += " 	select 'stafall' inctype, year, sum(cnt) cnt from (";
				sql += "    		SELECT to_char(pir_incident_date, 'yyyy') year, TO_CHAR(pir_incident_date, 'mm') mth, count(1) cnt ";
				sql += "			FROM pi_report p ";
				sql += "			WHERE pir_incident_date >= to_date('0101" + incident_date_to + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "			AND pir_incident_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "			AND enable = 1 AND p.PIR_NEAR_MISS_PI = 0 ";
				sql += "			and p.pir_incident_type_pi in ('64') ";
				sql += "			group by to_char(pir_incident_date, 'yyyy'), TO_CHAR(pir_incident_date, 'mm') order by mth ";
				sql += "	) group by 'stafall', year ";
				sql += "	union all ";
				sql += " 	select 'bbf' inctype, year, sum(cnt) cnt from (";
				sql += "    		SELECT to_char(pir_incident_date, 'yyyy') year, TO_CHAR(pir_incident_date, 'mm') mth, count(1) cnt ";
				sql += "			FROM pi_report p ";
				sql += "			WHERE pir_incident_date >= to_date('0101" + incident_date_to + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "			AND pir_incident_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "			AND enable = 1 AND p.PIR_NEAR_MISS_PI = 0 ";
				sql += "			and p.pir_incident_type_pi in ('65') ";
				sql += "			group by to_char(pir_incident_date, 'yyyy'), TO_CHAR(pir_incident_date, 'mm') order by mth ";
				sql += "	) group by 'bbf', year ";
				sql += ") order by inctype ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql = "select decode(inc_type, '65', 'bbf', '64', 'stafall', '33', 'stainj'), to_char(inc_date, 'yyyy') year, count(1) from PI_RPT_TYPE ";
				sql += "where inc_type in ('33', '65', '64') ";
				sql += "and inc_date >= to_date('0101" + incident_date_to + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "and inc_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "group by to_char(inc_date, 'yyyy'), decode(inc_type, '65', 'bbf', '64', 'stafall', '33', 'stainj') ";
				sql += "order by year ";
			}
		} else if ("summary_3a_byyear".equals(mode)) {
			//incident_date_to = "2015";
			if (ConstantsServerSide.isHKAH()) {
				sql = "select 'med' inctype, year, sum(cnt) cnt from ( ";
				sql += "	SELECT to_char(pir_incident_date, 'yyyy') year, TO_CHAR(pir_incident_date, 'mm') mth, count(1) cnt ";
				sql += "	FROM pi_report p ";
				sql += "			    WHERE pir_incident_date >= to_date('0101" + incident_date_to + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "	    AND pir_incident_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "						    AND enable = 1 AND p.PIR_NEAR_MISS_PI = 0 ";
				sql += "						    and p.pir_incident_type_pi in ('52') ";
				sql += "		    group by to_char(pir_incident_date, 'yyyy'), TO_CHAR(pir_incident_date, 'mm') order by mth ";
				sql += "		  ) group by 'med', year ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql = "select decode(inc_type, '52', 'med'), to_char(inc_date, 'yyyy') year, count(1) from PI_RPT_TYPE ";
				sql += "where inc_type in ('52') ";
				sql += "and inc_date >= to_date('0101" + incident_date_to + " 000001', 'ddmmyyyy hh24miss') ";
				sql += "and inc_date <= to_date('3112" + incident_date_to + " 235959', 'ddmmyyyy hh24miss') ";
				sql += "group by decode(inc_type, '52', 'med'), to_char(inc_date, 'yyyy') ";
				sql += "order by year ";
			}
		} else if (("summary_2title".equals(mode)) || ("summary_3title".equals(mode)) || ("summary_4title".equals(mode))) {
			if (ConstantsServerSide.isHKAH()) {
				//sql = "select sum(cnt1), sum(cnt2), sum(cnt3) from ";
				sql = "select decode(sum(cnt1), null, 0, sum(cnt1)), decode(sum(cnt2), null, 0, sum(cnt2)), decode(sum(cnt1), null, 0, sum(cnt3)) from ";
				sql += "	( ";
				sql += "	select pat_inj, count(1) cnt1, 0 cnt2, 0 cnt3 ";
				sql += "	from ( ";
				sql += "		select DECODE(p.pir_incident_type_pi, '48', 'Patient Injury', '') pat_inj ";
				sql += "		FROM pi_report p ";
				sql += "    	WHERE pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "		AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				sql += "		AND enable                                    = 1 ";
				sql += "		AND PIR_NEAR_MISS_PI = 0 ";
				if ("summary_2title".equals(mode)) {
					sql += "		and p.pir_incident_type_pi ='48' ";
				} else if ("summary_3title".equals(mode)) {
					sql += "		and p.pir_incident_type_pi ='52' ";
				} else if ("summary_4title".equals(mode)) {
					sql += "		and p.pir_incident_type_pi ='44' ";
				}
				sql += "		) GROUP BY pat_inj ";
				sql += "union all ";
				sql += "	select vis_inj, 0, count(1), 0 ";
				sql += "	from ( ";
				sql += "	select DECODE(p.pir_incident_type_pi, '50', 'Visitor Injury', '') vis_inj ";
				sql += "	FROM pi_report p ";
				sql += "	WHERE pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql += "	AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
				sql += "	AND enable                                    = 1 ";
				sql += "	AND PIR_NEAR_MISS_PI = 0 ";
				if ("summary_2title".equals(mode)) {
					sql += "		and p.pir_incident_type_pi ='50' ";
				} else if ("summary_3title".equals(mode)) {
					sql += "		and p.pir_incident_type_pi ='62temp' ";  // for not include ADR
				} else if ("summary_4title".equals(mode)) {
					sql += "		and p.pir_incident_type_pi ='46' ";
				}
				sql += "  	) GROUP BY vis_inj ";
				if (("summary_2title".equals(mode)) || ("summary_4title".equals(mode))) {
					sql += "union all ";
					sql += "	select 'Staff Injure with bbf', 0, 0, count(1) ";
					sql += "	from ( ";
					sql += "	select p.pir_incident_type_pi ";
					sql += "	FROM pi_report p ";
					sql += "	WHERE pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
					sql += "		  AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss')";
					sql += "	AND enable                                    = 1 ";
					sql += "	AND PIR_NEAR_MISS_PI = 0 ";
					if ("summary_2title".equals(mode)) {
						sql += "	and p.pir_incident_type_pi in ('33', '65') ";
					} else if ("summary_4title".equals(mode)) {
						sql += "	and p.pir_incident_type_pi in ('64') ";
					}
					sql += " 	) GROUP BY 'Staff Injure with bbf' ";
				}
				sql += ")";
			} if (ConstantsServerSide.isTWAH()) {
				sql = "select sum(pat_cnt), sum(vis_cnt), sum(sta_cnt) ";
				sql += "from ( ";
				sql += "		select pir_incident_type_pi, pir_incident_date, pat_inj, pat_cnt, sta_inj, sta_cnt, vis_inj, vis_cnt ";
				sql += "		from ( ";
				sql += "			select pir_incident_type_pi, pir_incident_date, 'pat_inj' pat_inj, 1 pat_cnt, 'sta_inj' sta_inj, 0 sta_cnt, 'vis_inj' vis_inj,  0 vis_cnt ";
				sql += "			from pi_report_general ";
				sql += "			union all ";
				sql += "			select pir_incident_type_pi, pir_incident_date, 'pat_inj' pat_inj, 0 pat_cnt, 'sta_inj' sta_inj, 1 sta_cnt, 'vis_inj' vis_inj,  0 vis_cnt ";
				sql += "			from pi_report_staff ";
				sql += "			union all ";
				sql += "			select pir_incident_type_pi, pir_incident_date, 'pat_inj' pat_inj, 0 pat_cnt, 'sta_inj' sta_inj, 0 sta_cnt, 'vis_inj' vis_inj,  1 vis_cnt ";
				sql += "			from pi_report_visitor ";
				sql += "		) ";
				if ("summary_2title".equals(mode)) {
					sql += "	WHERE pir_incident_type_pi in ('33', '90', '65', '50') ";
				} else if ("summary_3title".equals(mode)) {
					sql += "	WHERE pir_incident_type_pi in ('52') ";
				} else if ("summary_4title".equals(mode)) {
					sql += "	WHERE pir_incident_type_pi in ('46', '64', '89') ";
				}
				sql +="				AND pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
				sql +="		  		AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss')";
				sql +=") ";
			}
		} else if ("fall_age".equals(mode)) {
			sql = "select END, COUNT(1) ";
			sql += "from pi_rpt_fall_age ";
			sql += "	where pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "	AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "GROUP BY end ";
			sql += "order by end ";
		} else if ("fall_time".equals(mode)) {
			sql = "select END, COUNT(1) ";
			sql += "from pi_rpt_fall_time ";
			sql += "	where pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "	AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "GROUP BY end ";
			sql += "order by end ";
		} else if ("fall_loc".equals(mode)) {
			sql = "SELECT pir_incident_place, count(1) ";
			sql += "FROM pi_report p ";
			//sql += "JOIN pi_report_involve_person pp ";
			//sql += "ON p.pirid        = pp.pirid AND pp.is_patient = 1 AND pp.enable     = 1 ";
			//sql += "join reg@iweb r on r.patno = pp.patno and r.regtype = 'I' ";
			//sql += "join inpat@iweb i on r.inpid = i.inpid ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "WHERE p.pir_incident_type_pi = '44' and p.enable     = 1 ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "WHERE p.pir_incident_type_pi = '89' and p.enable     = 1 ";
			}
			//sql += "		and to_char(regdate, 'yyyymmdd') <= to_char(p.pir_incident_date, 'yyyymmdd') and ";
			//sql += "		(to_char(i.inpddate, 'yyyymmdd') >= to_char(p.pir_incident_date, 'yyyymmdd') or i.inpid is null or i.inpddate is null) ";
			sql += "	  AND pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "	  AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "	  AND P.pir_inout_pat        = 'I' ";
			sql += "GROUP BY pir_incident_place ";
			sql += "union all ";
			sql += "select '', 0 from dual ";
		} else if ("fall_factor".equals(mode)) {
			sql = "select pi_order, pi_option_desc, sum(tot) from ( ";
			sql += "	SELECT po.pi_order, po.pi_option_desc, count(1) tot ";
			sql += "	FROM pi_report_option po, ";
			sql += "		pi_report_content pc, ";
			sql += "		pi_report p ";
			//sql += "	JOIN pi_report_involve_person pp ON p.pirid = pp.pirid AND pp.is_patient = 1 AND pp.enable = 1 ";
			//sql += "	join reg@iweb r on r.patno = pp.patno and r.regtype = 'I' ";
			//sql += "	join inpat@iweb i on r.inpid = i.inpid  ";
			sql += "		WHERE p.pirid = pc.pirid and ";
			sql += "		pc.pi_option_id = po.pi_option_id and ";
			sql += "		(pc.pi_option_id = 615 or pc.pi_option_id = 94 or pc.pi_option_id = 95 or pc.pi_option_id = 96 or pc.pi_option_id = 97 or ";
			sql += "			pc.pi_option_id = 98 or pc.pi_option_id = 99 or pc.pi_option_id = 100 or pc.pi_option_id = 101 or pc.pi_option_id = 105) ";
			sql += " and (pc.pi_value = 'Y' or pc.pi_value = 'checked' or (pc.pi_value is not null and pc.pi_value <> 'N')) ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "			AND p.pir_incident_type_pi = '44' ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "			AND p.pir_incident_type_pi = '89' ";
			}
			sql += "and p.enable     = 1 ";
			sql += "and pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += " AND P.pir_inout_pat = 'I' ";
			//sql += "and to_char(regdate, 'yyyymmdd') <= to_char(p.pir_incident_date, 'yyyymmdd') and ";
			//sql += "(to_char(i.inpddate, 'yyyymmdd') >= to_char(p.pir_incident_date, 'yyyymmdd') or i.inpid is null or i.inpddate is null) ";
			sql += "GROUP BY po.pi_order, po.pi_option_desc ";
			sql += "union all ";
			sql += "select pi_order, pi_option_desc, 0 tot ";
			sql += "from ( ";
			sql += "	select pi_order, pi_option_id, pi_option_desc from pi_report_option pc ";
			sql += "	where (pc.pi_option_id = 615 or pc.pi_option_id = 94 or pc.pi_option_id = 95 or pc.pi_option_id = 96 or ";
			sql += "	pc.pi_option_id = 97 or pc.pi_option_id = 98 or pc.pi_option_id = 99 or pc.pi_option_id = 100 or ";
			sql += "	pc.pi_option_id = 101 or pc.pi_option_id = 105) ";
			sql += "	order by pi_order ";
			sql += "  	) ";
			sql += ") ";
			sql += "GROUP BY pi_order, pi_option_desc ";
			sql += "order by pi_order ";
		} else if (("nurse_type".equals(mode)) || ("nurse_type_2".equals(mode))) {
			sql = "select 	substr(inc_cat, 1, 1), substr(inc_cat, 3, 20), ";
			 if ("nurse_type".equals(mode)) {
				 sql += "	  	sum(p.jan) jan, sum(p.feb) feb, sum(p.mar) mar, sum(p.apr) apr, sum(p.may) may, sum(p.june) june, ";
				 sql += " 		sum(p.july) july, sum(p.aug) aug, sum(p.sep) sep, sum(p.oct) oct, sum(p.nov) nov, sum(p.dece) dece ";
			 } else if ("nurse_type_2".equals(mode)) {
			     sql += "sum(p.jan) + sum(p.feb) + sum(p.mar) Q1, sum(p.apr) + sum(p.may) + sum(p.june) Q2, ";
			     sql += "sum(p.july) + sum(p.aug) + sum(p.sep) Q3, sum(p.oct) + sum(p.nov) + sum(p.dece) Q4 ";
			 }
			sql += "from ( ";
			sql += " 	select '0 In-Patient Fall' inc_cat,   p.inc_date, ";
			sql += " 			jan, feb, mar, apr, may, june, ";
			sql += " 			july, aug, sep, oct, nov, dece ";
			sql += " 	from PI_RPT_TYPE p ";
			sql += " 	join co_departments cd on cd.co_department_code = dept_code and cd.co_department_supervisor = '" + getNurseAdmin() + "' ";
			sql += " 	JOIN pi_report_involve_person pp ON p.pirid = pp.pirid AND pp.is_patient = 1 AND pp.enable = 1 ";
			sql += " 	join reg@iweb r on r.patno = pp.patno and r.regtype = 'I' ";
			sql += " 	join inpat@iweb i on r.inpid = i.inpid ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "	where inc_type = '44'  ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "	where inc_type = '89' ";
			}
			sql += "and to_char(regdate, 'yyyymmdd') <= to_char(p.inc_date, 'yyyymmdd') and      ";
			sql += " 		  (to_char(i.inpddate, 'yyyymmdd') >= to_char(p.inc_date, 'yyyymmdd') or i.inpid is null or i.inpddate is null) ";
			sql += " 	union all ";
			sql += " 	select p.inc_cat,   p.inc_date, ";
			sql += " 		   jan, feb, mar, apr, may, june, ";
			sql += " 		   july, aug, sep, oct, nov, dece ";
			sql += " 	from PI_RPT_TYPE p ";
			sql += " 	join co_departments cd on cd.co_department_code = dept_code and cd.co_department_supervisor = '" + getNurseAdmin() + "' ";
			sql += "	union all ";
			sql += " 	select ";
			sql += " 			DECODE(pi_grpid, '33', '5 Staff Injury', DECODE(pi_grpid, '44', '1 Patient Fall', DECODE(pi_grpid, '46', '3 Visitor Fall', DECODE(pi_grpid, '48', '4 Patient Injury', DECODE(pi_grpid, '50', '6 Visitor Injury', DECODE(pi_grpid, '52', '8 Medication Incident', DECODE(pi_grpid, '54', 'b Equipment', DECODE(pi_grpid, '56', 'c Other', DECODE(pi_grpid, '58', 'a Security', DECODE(pi_grpid, '62', '9 Adverse Drug Reaction', DECODE(pi_grpid, '64', '2 Staff Fall', DECODE(pi_grpid, '65', '7 Sharp Injury(BBF)', '' ))) ))) ))) ))) inc_cat, ";
			sql += " 			null inc_date, ";
			sql += " 			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
			sql += " 	from pi_report_option_group ";
			sql += " 	where pi_grp_type = 'incident_type' and pi_grpid <> 32 and pi_grpid <> 44 ";
			sql += ") p ";
			sql += "where ";
			sql += " 	inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') AND ";
			sql += " 	inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') or inc_date is null ";
			sql += "group by substr(inc_cat, 1, 1), substr(inc_cat, 3, 20) ";
			sql += "order by substr(inc_cat, 1, 1) ";
		} else if ("FallControlChart".equals(mode)) {
			sql = "select inc_date, sum(inpatfall) from ( ";
			sql += "select to_char(pir_incident_date, 'mm') inc_date, count('Inpat Fall') inpatfall ";
			sql += "from pi_report p ";
			//sql += "JOIN pi_report_involve_person pp ON p.pirid = pp.pirid AND pp.is_patient = 1 AND pp.enable = 1 ";
			//sql += "join reg@iweb r on r.patno = pp.patno and r.regtype = 'I' ";
			//sql += "join inpat@iweb i on r.inpid = i.inpid  ";
			sql += "where pir_inout_pat = 'I' and p.enable = 1 and pir_incident_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "		AND pir_incident_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "			AND p.pir_incident_type_pi = '44' ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "			AND p.pir_incident_type_pi = '89' ";
			}
			sql += "		and p.pir_near_miss_pi = 0 and p.enable = 1";
			//sql += "		and to_char(regdate, 'yyyymmdd') <= to_char(pir_incident_date, 'yyyymmdd') and ";
			//sql += "	  (to_char(i.inpddate, 'yyyymmdd') >= to_char(pir_incident_date, 'yyyymmdd') or i.inpid is null or i.inpddate is null) ";
			sql += "	  group by to_char(pir_incident_date, 'mm') ";
			sql += "UNION ALL ";
			sql += "select pir_type, pir_num from pi_report_general_month ";
			sql += ") group by inc_date ";
			sql += "order by inc_date ";
		} else if ("doh".equals(mode)) {
			sql = "select p.pirid, p.PIR_PI_REMARK, ";
			sql += "case when to_date('01' || to_char(p.create_Date, 'mmyyyy'), 'ddmmyyyy') > to_date(to_char(P.PIR_INCIDENT_DATE, 'ddmmyyyy'), 'ddmmyyyy') then 'Y' else 'N' end late_report, to_char(P.PIR_INCIDENT_DATE, 'dd/mm/yyyy'), ";
			sql += "pd.PIR_STAFF_EDU, pd.PIR_STAFF_EDU_TEXT, ";
			sql += "pd.PIR_STAFF_DISC, pd.PIR_STAFF_DISC_TEXT, ";
			sql += "pd.PIR_CONS, pd.PIR_CONS_TEXT, ";
			sql += "pd.PIR_SHAR, pd.PIR_SHAR_TEXT1, pd.PIR_SHAR_TEXT2, ";
			sql += "pd.PIR_REV_POL, pd.PIR_REV_FORM, pd.PIR_CRE_FORM, ";
			sql += "pd.PIR_REFER, pd.PIR_REFER_TEXT, pd.PIR_REFER_DEPT, ";
			sql += "pd.PIR_OTHERS, pd.pir_action_taken ";
			sql += "from pi_report p ";
			sql += "join pi_report_dhead_comment pd on p.pirid = pd.pirid ";
			sql += "where p.enable = 1 ";
			sql += "and p.create_Date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "and p.create_Date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "order by p.pirid";
		} else if ("irs_data_root_cause".equals(mode)) {
			sql = "select ";
			sql += "	SUM(PIR_PERSON_FAULT), SUM(PIR_INADE_TRAIN), SUM(PIR_NO_PREVENT), SUM(PIR_MACH_FAULT), SUM(PIR_MISUSE), ";
			sql += "	SUM(PIR_INADE_INSTRU), SUM(PIR_INADE_EQUIP), SUM(PIR_POOR_QUAL), SUM(PIR_QUAL_DETECT), SUM(PIR_EXP_ITEM), ";
			sql += "	SUM(PIR_INADE_MAT), SUM(PIR_INST_NOT_FOLLOW), SUM(PIR_MOT_NATURE), SUM(PIR_NOISE), SUM(PIR_DIST_ENV), ";
			sql += "	SUM(PIR_UNV_FLOOR), SUM(PIR_SLIP), SUM(PIR_IM), SUM(PIR_CULTURE), SUM(PIR_LEADER), ";
			sql += "	SUM(PIR_OTHER) ";
			sql += "	from pi_report p, pi_report_dhead_comment pc ";
			sql += "	where p.pirid = pc.pirid and p.enable = 1 ";
			sql += "	and to_char(PIR_incident_date, 'yyyy') = '" + incident_date_from + "' and PIR_near_miss_pi = 0 ";
		} else if ("irs_data_sevindex_pat_inj".equals(mode)) {
			sql = "select count(1), '1 - mon' ";
			sql += "from pi_report p, pi_report_dhead_comment pd ";
			sql += "where ";
			sql += "p.pirid = pd.pirid ";
			sql += "and p.enable = 1 and p.pir_near_miss_pi = 0 ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and pd.pir_mon_spec is not null group by '1 - mon' ";
			sql += "union all ";
			sql += "select count(1), '2 - inv' ";
			sql += "from pi_report p, pi_report_dhead_comment pd ";
			sql += "where ";
			sql += "p.pirid = pd.pirid ";
			sql += "and p.enable = 1 and p.pir_near_miss_pi = 0 ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and pd.pir_inv_spec is not null group by '2 - inv' ";
			sql += "union all ";
			sql += "select count(1), '3 - treat' ";
			sql += "from pi_report p, pi_report_dhead_comment pd ";
			sql += "where ";
			sql += "p.pirid = pd.pirid ";
			sql += "and p.enable = 1 and p.pir_near_miss_pi = 0 ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and pd.pir_treat_spec is not null group by '3 - treat' ";
			sql += "union all ";
			sql += "select count(1), '4 - high care' ";
			sql += "from pi_report p, pi_report_dhead_comment pd ";
			sql += "where ";
			sql += "p.pirid = pd.pirid ";
			sql += "and p.enable = 1 and p.pir_near_miss_pi = '0' ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and pd.pir_high_care_sepc is not null group by '4 - high care' ";
		} else if ("irs_data_pi_ass_inj".equals(mode)) {
			sql = "select pi_ass, substr(pi_ass,0,1), count(1) ";
			sql += "from ( ";
			sql += "select decode(p.pir_pi_ass_injury, '0', '0- no affect', '1', '1- caused no harm', '2', '2- caused temporary harm', '3', '3- caused permanent harm', '4', '4- caused death')	pi_ass ";
			sql += "from pi_report p ";
			sql += "where p.enable = 1 and p.pir_near_miss_pi = 0 ";
			//sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and p.pir_pi_ass_injury <> '5' and p.pir_pi_ass_injury is not null ";
			sql += ") group by pi_ass order by pi_ass ";
		} else if ("irs_data_pi_ass_inj_all_pat".equals(mode)) {
			sql = "select pi_ass, substr(pi_ass,0,1), count(1) ";
			sql += "from ( ";
			sql += "select decode(p.pir_pi_ass_injury, '0', '0- no affect', '1', '1- caused no harm', '2', '2- caused temporary harm', '3', '3- caused permanent harm', '4', '4- caused death')	pi_ass ";
			sql += "from pi_report p ";
			sql += "where p.enable = 1 and p.pir_near_miss_pi = 0 ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and p.pir_pi_ass_injury <> '5' and p.pir_pi_ass_injury is not null ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "and p.pir_incident_type_pi in ('52', '44', '48') ";
			} else {
				sql += "and p.pir_incident_type_pi in ('52', '89', '90') ";
			}
			sql += ") group by pi_ass order by pi_ass ";
		} else if ("irs_data_pi_ass_inj_all_staff".equals(mode)) {
			sql = "select pi_ass, substr(pi_ass,0,1), count(1) ";
			sql += "from ( ";
			sql += "select decode(p.pir_pi_ass_injury, '0', '0- no affect', '1', '1- caused no harm', '2', '2- caused temporary harm', '3', '3- caused permanent harm', '4', '4- caused death')	pi_ass ";
			sql += "from pi_report p ";
			sql += "where p.enable = 1 and p.pir_near_miss_pi = 0 ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and p.pir_pi_ass_injury <> '5' and p.pir_pi_ass_injury is not null ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "and p.pir_incident_type_pi in ('33', '64', '65') ";
			} else {
				sql += "and p.pir_incident_type_pi in ('33', '54') ";
			}
			sql += ") group by pi_ass order by pi_ass ";
		} else if ("irs_data_sevindex_med".equals(mode)) {
			sql = "select px.PIR_RISK_ASS, count(1) ";
			sql += "from pi_report p, pi_report_px_comment px ";
			sql += "where p.pirid = px.pirid ";
			sql += "and p.pir_incident_type_pi in ('52', '62') ";
			sql += "and p.enable = 1 and p.pir_near_miss_pi = 0 ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "group by px.PIR_RISK_ASS ";
		} else if ("irs_data_sevindex_med_pxrpt".equals(mode)) {
			sql = "select risk_ass, ";
			sql += "    SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "	SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece 	";
			sql += "from ( ";
			sql += "select decode(px.PIR_RISK_ASS, null, 'unclass' , px.PIR_RISK_ASS) risk_ass, ";
			sql += "		SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "		SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece 	 ";
			sql += "from pi_rpt_type p, pi_report_px_comment px ";
			sql += "where p.pirid = px.pirid and p.inc_type in ('52', '62') and to_char(p.inc_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "group by decode(px.PIR_RISK_ASS, null, 'unclass' , px.PIR_RISK_ASS) ";
			sql += "union all ";
			sql += "select 'unclass', ";
			sql += "		SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "		SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece 	 ";
			sql += "from pi_rpt_type p ";
			sql += "where p.inc_type in ('52', '62') and to_char(p.inc_date, 'yyyy') = '" + incident_date_from + "' ";
			sql += "and p.pirid not in (select pirid from pi_report_px_comment) ";
			sql += "group by null ";
			sql += ") group by risk_ass ";
		} else if ("irs_data_phar_sect".equals(mode)) {
			sql = "select sum(pir_before_ward), sum(pir_before_outpat), sum(pir_after_ward_inv), sum(pir_after_ward_given), sum(pir_after_outpat_nottaken),sum(pir_after_outpat_taken), ";
			sql += "sum(pir_before_discharge), sum(pir_after_discharge), sum(pir_before_admin), sum(pir_after_admin), sum(pir_before_admin_unit), sum(pir_after_admin_unit) ";
			sql += "from pi_report p, pi_report_px_comment px ";
			sql += "where p.pirid = px.pirid ";
			sql += "and p.enable = 1 and p.pir_near_miss_pi = 0 ";
			sql += "and p.pir_incident_type_pi in ('52', '62') ";
			sql += "and p.enable = 1 and p.pir_near_miss_pi = 0  ";
			sql += "and to_char(p.pir_incident_date, 'yyyy') = '" +  incident_date_from + "' ";
		} else if ("root_cause".equals(mode)) {
			sql = "select p.pirid, pc.pir_other_spec, pc.PIR_OTHER, PO.PI_OPTION_DESC ";
			sql += "from pi_report p, pi_report_dhead_comment pc, PI_REPORT_OPTION PO ";
			sql += "where p.pirid = pc.pirid and p.enable = 1 and PO.PI_OPTION_ID = P.PIR_INCIDENT_CLASS_PI ";
			sql += "and to_char(PIR_incident_date, 'yyyy') = '" + incident_date_from  + "' and PIR_near_miss_pi = 0 and pc.PIR_OTHER = 1 ";
			sql += "order by p.pirid desc";
		} else if ("compare_staff_inj_hk".equals(mode)) {
			sql = "SELECT ";
			sql += "SUM(jan) + SUM(feb) + SUM(mar) + SUM(apr) + SUM(may) + SUM(june) + ";
			sql += "SUM(july) + SUM(aug) + SUM(sep) + SUM(oct) + SUM(nov) + SUM(dece) tot_staff_inj ";
			sql += "from ( ";
			sql += "SELECT p.inc_type, ";
			sql += "	SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "	SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece ";
			sql += "FROM pi_rpt_type";
			if (ConstantsServerSide.isHKAH()) {
				sql += " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += dbLinkTW + " ";
			}
			sql += "p ";
			sql += "JOIN pi_report_option_group pg  ON pg.pi_enabled   = 1  AND pg.pi_grp_type = 'incident_type'  AND pg.pi_grpid   <> 32 ";
			sql += "														AND pg.pi_grpid    = p.inc_type ";
			sql += "where p.inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "		AND p.inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "		AND p.inc_type in ('64', '33', '65') ";
			sql += "GROUP BY p.inc_cat, p.inc_type ";
			sql += "union all ";
			sql += "select ";
			sql += "to_char(pi_grpid) inc_type, ";
			sql += "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
			sql += "from pi_report_option_group";
			if (ConstantsServerSide.isHKAH()) {
				sql += " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += dbLinkTW + " ";
			}
			sql += "where pi_grp_type = 'incident_type' and pi_grpid <> 32 ";
			sql += ") ";
		} else if ("compare_staff_inj_tw".equals(mode)) {
			sql = "SELECT ";
			sql += "SUM(jan) + SUM(feb) + SUM(mar) + SUM(apr) + SUM(may) + SUM(june) + ";
			sql += "SUM(july) + SUM(aug) + SUM(sep) + SUM(oct) + SUM(nov) + SUM(dece) tot_staff_inj ";
			sql += "from ( ";
			sql += "SELECT p.inc_cat,  p.inc_type, ";
			sql += "		SUM(jan) jan, SUM(feb) feb, SUM(mar) mar, SUM(apr) apr, SUM(may) may, SUM(june) june, ";
			sql += "		SUM(july) july, SUM(aug) aug, SUM(sep) sep, SUM(oct) oct, SUM(nov) nov, SUM(dece) dece ";
			sql += "FROM pi_rpt_type";
			if (ConstantsServerSide.isHKAH()) {
				sql += dbLinkHK + " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += " ";
			}
			sql += "p ";
			sql += "JOIN pi_report_option_group pg  ON pg.pi_enabled   = 1  AND pg.pi_grp_type = 'incident_type'  AND pg.pi_grpid   <> 32 ";
			sql += "AND pg.pi_grpid    = p.inc_type ";
			sql += "where p.inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "		AND p.inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "		AND p.inc_type in ('64', '33', '65') ";
			sql += "GROUP BY p.inc_cat, p.inc_type ";
			sql += "union all ";
			sql += "select inc_cat, inc_type, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ";
			sql += "from pi_report_inc_cat";
			if (ConstantsServerSide.isHKAH()) {
				sql += dbLinkHK + " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += " ";
			}
			sql += "where inc_type in ('64', '33', '65') ";
			sql += ") ";
			sql += "ORDER BY inc_cat ";
		} else if ("compare_med_hk".equals(mode)) {
			sql = "select to_char(inc_date, 'yyyy') year, count(1) ";
			sql += "from PI_RPT_TYPE";
			if (ConstantsServerSide.isHKAH()) {
				sql += " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += dbLinkTW + " ";
			}
			sql += "where inc_type in ('52') and inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "						 and inc_date <= to_date('" + incident_date_to +"', 'ddmmyyyy hh24miss') ";
			sql += "group by to_char(inc_date, 'yyyy') order by year ";
		} else if ("compare_med_tw".equals(mode)) {
			sql = "select to_char(inc_date, 'yyyy') year, count(1) ";
			sql += "from PI_RPT_TYPE";
			if (ConstantsServerSide.isHKAH()) {
				sql += dbLinkHK + " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += " ";
			}
			sql += "where inc_type in ('52') and inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "						 and inc_date <= to_date('" + incident_date_to +"', 'ddmmyyyy hh24miss') ";
			sql += "group by to_char(inc_date, 'yyyy') order by year ";
		} else if ("compare_inpat_fall_hk".equals(mode)) {
			sql = "select inc_cat, sum(col1) from ( ";
			sql += "select inc_cat, count(1) col1 ";
			sql += "from 	hkinpatfall";
			if (ConstantsServerSide.isHKAH()) {
				sql += " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += dbLinkTW + " ";
			}
			sql += "where inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "and inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "group by inc_cat, 0 ";
			sql += "union all ";
			sql += "select 'I Patient Fall', 0 from dual ";
			sql += ") group by inc_cat ";
		} else if ("compare_inpat_fall_tw".equals(mode)) {
			sql = "select inc_cat, sum(col1) from ( ";
			sql += "select inc_cat, count(1) col1 ";
			sql += "from 	twinpatfall";
			if (ConstantsServerSide.isHKAH()) {
				sql += dbLinkHK + " ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += " ";
			}
			sql += "where inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "and inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
			sql += "group by inc_cat, 0 ";
			sql += "union all ";
			sql += "select 'I Patient Fall', 0 from dual ";
			sql += ") group by inc_cat ";
		} else if ("all_inpat_inc".equals(mode)) {
			sql = "select sum(1) ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "from allhkinpatcase p ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "from alltwinpatcase p ";
			}
			sql += "where p.inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "and p.inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
		} else if ("all_outpat_inc".equals(mode)) {
			sql = "select sum(1) ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "from allhkoutpatcase p ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "from alltwoutpatcase p ";
			}
			sql += "where p.inc_date >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "and p.inc_date <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
		} else if ("all_inpat_adm".equals(mode)) {
			sql = "select count(1) cnt ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "from allhkinpatadm ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "from alltwinpatadm ";
			}
			sql += "where ";
			sql += "regdate >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "and regdate <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
		} else if ("all_outpat_adm".equals(mode)) {
			sql = "select count(1) cnt ";
			if (ConstantsServerSide.isHKAH()) {
				sql += "from allhkoutpatadm ";
			} else if (ConstantsServerSide.isTWAH()) {
				sql += "from alltwoutpatadm ";
			}
			sql += "where ";
			sql += "regdate >= to_date('" + incident_date_from + "', 'ddmmyyyy hh24miss') ";
			sql += "and regdate <= to_date('" + incident_date_to + "', 'ddmmyyyy hh24miss') ";
		} else if ("ceoreport_admin_bed_sore".equals(mode)) {
			sql = "select REPORT_ID, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, REMARK FROM pi_report_data WHERE REPORT_ID = 'ceoreport_admin' and report_year = '" + incident_date_from + "'";
		}

		return UtilDBWeb.getReportableList(sql);
	}

	public static HSSFWorkbook piYearEndReportFallNurse(UserBean userBean, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";
		int totalPatientFall = 0;
		int totalOvernightBed = 0;
		int j = 0;
		double up = 0;
		double down = 0;
		double pec_pat_fall_overnight_bed = 0;

		try {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("KPI");

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(2);
			excelRow.getCell(3).setCellValue("For the Year " + rptDate);

			//Incident Rate of ALL nurse
			ArrayList excelReport = getPIReport(userBean, "nurse_type", incident_date_from, incident_date_to, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					excelRow = sheet.getRow(j + 1);
					excelRow.getCell(0).setCellValue(dbRow.getValue(1));
					excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(2)));
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(3)));
					excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(4)));
					excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(5)));
					excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(6)));
					excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(7)));
					excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(8)));
					excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(9)));
					excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(10)));
					excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(11)));
					excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(12)));
					excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(13)));
					if (j == 0 ) {
						excelRow = sheet.getRow(46);
						excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(2)));
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(3)));
						excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(4)));
						excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(5)));
						excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(6)));
						excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(7)));
						excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(8)));
						excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(9)));
						excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(10)));
						excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(11)));
						excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(12)));
						excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(13)));
					}
				}
			}

			//Total - bottom
			sumRow = 25;
			sumRowFrom = "4";
			sumRowFrom2 = "";
			sumRowTo = "25";
			//setCatSumCol(sheet, "nurse_type_1", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - right side
				//=SUM(B4:B21)
			sumRow = 0;
			sumCol = 13;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "nurse_type", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

			//Incident Rate of ALL nurse
			excelReport = getPIReport(userBean, "nurse_type_2", incident_date_from, incident_date_to, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					excelRow = sheet.getRow(j + 16);
					excelRow.getCell(0).setCellValue(dbRow.getValue(1));
					excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(2)));
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(3)));
					excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(4)));
					excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(5)));
					if (j == 0) {
						excelRow = sheet.getRow(50);
						excelRow.getCell(0).setCellValue(rptDate);
						excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(2)));
						excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(3)));
						excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(4)));
						excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(5)));
					}
				}
			}

			//Total - bottom
			sumRow = 25;
			sumRowFrom = "4";
			sumRowFrom2 = "";
			sumRowTo = "25";
			//setCatSumCol(sheet, "nurse_type_1", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - right side
				//=SUM(B4:B21)
			sumRow = 0;
			sumCol = 5;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "nurse_type_2", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

			// Total KPI - FALL
			setCatSumCol(sheet, "nurse_type_kpi_fall", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
				    fileInputStream.close();
				} catch (IOException e) {
				    e.printStackTrace();
				}
		    }
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportFall(UserBean userBean, String xlsFileName, String CurrYear, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";
		int totalPatientFall = 0;
		int totalOvernightBed = 0;
		int j = 0;
		double up = 0;
		double down = 0;
		double pec_pat_fall_overnight_bed = 0;
		String sup = "";
		String sdown = "";
		//String CurrYear = "";
		String Last1Year = "";
		String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		String Last1YearFrom = "";
		String Last1YearTo = "";
		String Last2YearFrom = "";
		String Last2YearTo = "";

		try {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("Fall_Report");

		    if (ConstantsServerSide.isHKAH()) {
			excelRow = sheet.getRow(0);
			excelRow.getCell(3).setCellValue("Hong Kong Adventist Hospital");
		    } else {
			excelRow = sheet.getRow(0);
			excelRow.getCell(3).setCellValue("Hong Kong Adventist Hospital - Tsuen Wan");
		    }

		    rptDate = Calendar.getInstance().get(Calendar.YEAR);
		    excelRow = sheet.getRow(2);
		    excelRow.getCell(3).setCellValue("For the Year " + CurrYear);

		    //incident_date_from = "01012015 000001";
		    //incident_date_to = "31122015 235959";

		    incident_date_from = "0101" + CurrYear + " 000001";
		    incident_date_to = "3112" + CurrYear + " 235959";

		    CurrYear = incident_date_from.substring(4, 8);
		    Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
		    Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);

		    CurrYearFrom = "0101" + CurrYear + " 000001";
		    CurrYearTo = "3112" + CurrYear + " 235959";
		    Last1YearFrom = "0101" + Last1Year + " 000001";
		    Last1YearTo = "3112" + Last1Year + " 235959";
		    Last2YearFrom = "0101" + Last2Year + " 000001";
		    Last2YearTo = "3112" + Last2Year + " 235959";

		    //Current Year
		    //Incident Rate of Inpatient Fall*
		    ArrayList excelReport = getPIReport(userBean, "comparison_top3_part2", CurrYearFrom, CurrYearTo, "");
			if (excelReport.size() > 0) {
				dbRow = (ReportableListObject) excelReport.get(0);
				totalPatientFall = Integer.valueOf(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				//totalOvernightBed = Integer.valueOf(dbRow.getValue(2));
				totalOvernightBed = getACHSBedNum(CurrYear);
			}

			up = totalPatientFall;
			down = totalOvernightBed;
			sup = Integer.toString(totalPatientFall);
			sdown = Integer.toString(totalOvernightBed);
			excelRow = sheet.getRow(14);
			pec_pat_fall_overnight_bed =  up / down;
			excelRow.getCell(1).setCellValue(CurrYear);
			excelRow.getCell(2).setCellValue(Float.valueOf(String.format("%.2f", pec_pat_fall_overnight_bed)) + " (" + sup + " / " + sdown + ")");
			excelRow = sheet.getRow(14);
			excelRow.getCell(4).setCellValue(Float.valueOf(String.format("%.2f", pec_pat_fall_overnight_bed)));

			//Last 1 Year
		    excelReport = getPIReport(userBean, "comparison_top3_part2", Last1YearFrom, Last1YearTo, "");
			if (excelReport.size() > 0) {
				dbRow = (ReportableListObject) excelReport.get(0);
				totalPatientFall = Integer.valueOf(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				//totalOvernightBed = Integer.valueOf(dbRow.getValue(2));
				totalOvernightBed = getACHSBedNum(Last1Year);
			}

			up = totalPatientFall;
			down = totalOvernightBed;
			sup = Integer.toString(totalPatientFall);
			sdown = Integer.toString(totalOvernightBed);
			excelRow = sheet.getRow(13);
			pec_pat_fall_overnight_bed =  up / down;
			excelRow.getCell(1).setCellValue(Last1Year);
			excelRow.getCell(2).setCellValue(Float.valueOf(String.format("%.2f", pec_pat_fall_overnight_bed)) + " (" + sup + " / " + sdown + ")");
			excelRow = sheet.getRow(13);
			excelRow.getCell(4).setCellValue(Float.valueOf(String.format("%.2f", pec_pat_fall_overnight_bed)));

			//Last 2 Year
		    excelReport = getPIReport(userBean, "comparison_top3_part2", Last2YearFrom, Last2YearTo, "");
			if (excelReport.size() > 0) {
				dbRow = (ReportableListObject) excelReport.get(0);
				totalPatientFall = Integer.valueOf(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				//totalOvernightBed = Integer.valueOf(dbRow.getValue(2));
				totalOvernightBed = getACHSBedNum(Last2Year);
			}

			up = totalPatientFall;
			down = totalOvernightBed;
			sup = Integer.toString(totalPatientFall);
			sdown = Integer.toString(totalOvernightBed);
			excelRow = sheet.getRow(12);
			pec_pat_fall_overnight_bed =  up / down;
			excelRow.getCell(1).setCellValue(Last2Year);
			excelRow.getCell(2).setCellValue(Float.valueOf(String.format("%.2f", pec_pat_fall_overnight_bed)) + " (" + sup + " / " + sdown + ")");
			excelRow = sheet.getRow(12);
			excelRow.getCell(4).setCellValue(Float.valueOf(String.format("%.2f", pec_pat_fall_overnight_bed)));

			//Incident Rate of Inpatient Fall by age
		    excelReport = getPIReport(userBean, "fall_age", CurrYearFrom, CurrYearTo, "");
		    for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if ("a elderly".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(25);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if ("b adult".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(26);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if ("c pedi".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(27);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
		    }
		    //Incident Rate of Inpatient Fall by Time
		    excelReport = getPIReport(userBean, "fall_time", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if ("a AM".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(34);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if ("b PM".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(35);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if ("c Night".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(36);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

		    //Incident Rate of Inpatient Fall by Location
		    excelReport = getPIReport(userBean, "fall_loc", CurrYearFrom, CurrYearTo, "");
		    for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (!dbRow.getValue(0).isEmpty()) {;
						excelRow = sheet.getRow(j + 43);
						excelRow.getCell(1).setCellValue(dbRow.getValue(0));
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

		    if (ConstantsServerSide.isHKAH()) {
			    //Incident Rate of Inpatient Fall by Factor
			    excelReport = getPIReport(userBean, "fall_factor", CurrYearFrom, CurrYearTo, "");
			    for (j = 0; j < excelReport.size(); j++) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if (excelReport.size() > 0) {
						excelRow = sheet.getRow(j + 57);
					    //excelRow.getCell(1).setCellValue(dbRow.getValue(0));
					    excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(2)));
					}
				}
		    } else if (ConstantsServerSide.isTWAH()) {
				excelRow = sheet.getRow(55);
				excelRow.getCell(0).setCellValue("");
				excelRow = sheet.getRow(56);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(57);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(58);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(59);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(60);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(61);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(62);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(63);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(64);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(65);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
				excelRow = sheet.getRow(66);
				excelRow.getCell(1).setCellValue("");
				excelRow.getCell(2).setCellValue("");
		    }
		} catch (IOException e) {
		    e.printStackTrace();
		} finally {
		    if (fileInputStream != null) {
			try {
			    fileInputStream.close();
			} catch (IOException e) {
			    e.printStackTrace();
			}
		    }
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportBoard(UserBean userBean, String xlsFileName, String currYear, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		int type_cnt = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";
		String reportTitle = "";
		int col1 = 0;
		int col2 = 0;
		int row1 = 0;
		int row2 = 0;
		String CurrYear = "";
		//String Last1Year = "";
		//String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		//String Last1YearFrom = "";
		//String Last1YearTo = "";
		//String Last2YearFrom = "";
		//String Last2YearTo = "";
		float totInpatIncident = 0;
		float totOutpatIncident = 0;
		float totInAdmission = 0;
		float totOutAdmission = 0;

		try {
			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			if (ConstantsServerSide.isHKAH()) {
				reportTitle = "HKAH-SR ";
			} else {
				reportTitle = "HKAH-TW ";
			}

			sheet = workbook.getSheet("incident_indicator");

			//rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(5);
			excelRow.getCell(0).setCellValue(reportTitle + "Incident Report Graph " + currYear);

			incident_date_from = "0101" + currYear + " 000001";
			incident_date_to = "3112" + currYear + " 235959";

			ArrayList excelReport = getPIReport(userBean, "type", incident_date_from, incident_date_to, "");
			int j = 0;
			if (ConstantsServerSide.isHKAH()) {
				type_cnt = 11;
			} else {
				type_cnt = 13;
			}
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {

					if (j <= 2) {
						excelRow = sheet.getRow(j + 7);
					} else if (j <= 6) {
						excelRow = sheet.getRow(j + 7 + 1);
					//} else if (j <= 11) {
					} else if (j <= type_cnt) {
						excelRow = sheet.getRow(j + 7 + 2);
					}

					excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(2)));
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(3)));
					excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(4)));
					excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(5)));
					excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(6)));
					excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(7)));
					excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(8)));
					excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(9)));
					excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(10)));
					excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(11)));
					excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(12)));
					excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(13)));
				}
			}

			// all incident rate / no. of admission
			CurrYear = incident_date_from.substring(4, 8);
			//Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
			//Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);
			CurrYearFrom = "0101" + CurrYear + " 000001";
			CurrYearTo = "3112" + CurrYear + " 235959";
			//Last1YearFrom = "0101" + Last1Year + " 000001";
			//Last1YearTo = "3112" + Last1Year + " 235959";
			//Last2YearFrom = "0101" + Last2Year + " 000001";
			//Last2YearTo = "3112" + Last2Year + " 235959";

			j = 0;
			col1 = 9;
			//col2 = 14;
			row1 = 26;
			row2 = 31;

			excelReport = getPIReport(userBean, "all_inpat_adm", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totInAdmission  = Integer.valueOf(dbRow.getValue(0));
				}
			}
			excelReport = getPIReport(userBean, "all_inpat_inc", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totInpatIncident  = Integer.valueOf(dbRow.getValue(0));
				}
			}

			excelReport = getPIReport(userBean, "all_outpat_adm", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totOutAdmission = Integer.valueOf(dbRow.getValue(0));
				}
			}
			excelReport = getPIReport(userBean, "all_outpat_inc", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totOutpatIncident  = Integer.valueOf(dbRow.getValue(0));
				}
			}

			excelRow = sheet.getRow(row1);
			excelRow.getCell(col1).setCellValue((totInpatIncident * 1000) / totInAdmission);
			excelRow.getCell(col1 + 2).setCellValue(totInpatIncident);
			excelRow.getCell(col1 + 3).setCellValue(totInAdmission);
			excelRow = sheet.getRow(row2);
			excelRow.getCell(col1).setCellValue((totOutpatIncident * 1000) / totOutAdmission);
			excelRow.getCell(col1 + 2).setCellValue(totOutpatIncident);
			excelRow.getCell(col1 + 3).setCellValue(totOutAdmission);

			/////////////////////////////////

			/* 14122017
			excelReport = getPIReport(userBean, "type2", incident_date_from, incident_date_to, "");
			if (ConstantsServerSide.isHKAH()) {
				type_cnt = 70;
			} else {
				type_cnt = 72;
			}
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					//excelRow = sheet.getRow(j + 70);
					excelRow = sheet.getRow(j + type_cnt);
					excelRow.getCell(1).setCellValue(dbRow.getValue(0));
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}
			*/
			//Total Fall
			sumRow = 10;
			sumRowFrom = "8";
			sumRowTo = "10";
			setCatSumCol(sheet, "type_a", sumRow, 0, sumRowFrom, "", sumRowTo);

			//Total Injury
			sumRow = 15;
			sumRowFrom = "12";
			sumRowTo = "15";
			setCatSumCol(sheet, "type_a", sumRow, 0, sumRowFrom, "", sumRowTo);

			//Total - bottom
			if (ConstantsServerSide.isHKAH()) {
				sumRow = 20;
			} else if (ConstantsServerSide.isTWAH()) {
				sumRow = 22;
			}
			sumRowFrom = "11";
			sumRowFrom2 = "16";
			if (ConstantsServerSide.isHKAH()) {
				sumRowTo = "20";
			} else if (ConstantsServerSide.isTWAH()) {
				sumRowTo = "22";
			}
			setCatSumCol(sheet, "type_b", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - right side
			sumRow = 0;
			sumCol = 13;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "type_c", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - for bar chart
			sumRow = 0;
			sumCol = 2;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			//setCatSumCol(sheet, "type_d", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

			// set value to Unit_Incident worksheet
			sheet = workbook.getSheet("Unit_Incident");
			piYearEndReportUnit(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
			// set value to Unit_incident_breakdown worksheet
			sheet = workbook.getSheet("Unit_incident_breakdown");
			piYearEndReportTypeUnit(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
			// set value to Summary worksheet
			//sheet = workbook.getSheet("Summary");
			//piYearEndReportSummary(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);

			if (ConstantsServerSide.isHKAH()) {
				if (IsPIManager(userBean.getStaffID())) { // temp code for pi available only
					workbook.removeSheetAt(workbook.getSheetIndex("Comparison old"));
					// 	set value to Summary by year worksheet
					sheet = workbook.getSheet("Summary_by_Year");
					piYearEndReportSummaryByYear(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
					sheet = workbook.getSheet("IRS_Data");
					piYearEndReportIRSData(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
					//14122007  Root Casue Others pirID list
					sheet = workbook.getSheet("Root_Casue_Others");
					piYearEndReportRootCauseOthers(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
				} else {
					workbook.removeSheetAt(workbook.getSheetIndex("Summary_by_Year"));
					workbook.removeSheetAt(workbook.getSheetIndex("IRS_Data"));
					workbook.removeSheetAt(workbook.getSheetIndex("Comparison old"));
					workbook.removeSheetAt(workbook.getSheetIndex("Root_Casue_Others"));
				}
				workbook.removeSheetAt(workbook.getSheetIndex("Summary"));
			} else {
				if (IsPIManager(userBean.getStaffID())) { // temp code for pi available only
					sheet = workbook.getSheet("Summary_by_Year");
					piYearEndReportSummaryByYear(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
					sheet = workbook.getSheet("IRS_Data");
					piYearEndReportIRSData(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
					//14122007  Root Casue Others pirID list
					sheet = workbook.getSheet("Root_Casue_Others");
					piYearEndReportRootCauseOthers(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
				} else {
					workbook.removeSheetAt(workbook.getSheetIndex("Summary_by_Year"));
					workbook.removeSheetAt(workbook.getSheetIndex("IRS_Data"));
					workbook.removeSheetAt(workbook.getSheetIndex("Root_Casue_Others"));
				}
				workbook.removeSheetAt(workbook.getSheetIndex("Summary"));
			}

			//
			if (IsPIManager(userBean.getStaffID())) { // temp code for pi available only
				// set value to Summary worksheet
				sheet = workbook.getSheet("Comparison");
				piYearEndReportCompariosn(userBean, sheet, xlsFileName, incident_date_from, incident_date_to);
			} else {
			    // delete comparison worksheet
				workbook.removeSheetAt(workbook.getSheetIndex("Comparison"));
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportType(UserBean userBean, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";

		try {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("incident_indicator");

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(5);
			excelRow.getCell(0).setCellValue("Incident Report Graph " + rptDate);

			ArrayList excelReport = getPIReport(userBean, "type", incident_date_from, incident_date_to, "");
			int j = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {

				    if (j <= 2) {
					excelRow = sheet.getRow(j + 7);
				    } else if (j <= 6) {
					excelRow = sheet.getRow(j + 7 + 1);
				    } else if (j <= 11) {
					excelRow = sheet.getRow(j + 7 + 2);
				    }

				    excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(2)));
				    excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(3)));
				    excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(4)));
				    excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(5)));
				    excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(6)));
				    excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(7)));
				    excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(8)));
				    excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(9)));
				    excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(10)));
				    excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(11)));
				    excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(12)));
				    excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(13)));
				}
			}

		    excelReport = getPIReport(userBean, "type2", incident_date_from, incident_date_to, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
				excelRow = sheet.getRow(j + 70);
				excelRow.getCell(1).setCellValue(dbRow.getValue(0));
				    excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}

			//Total Fall
			sumRow = 10;
			sumRowFrom = "8";
			sumRowTo = "10";
			setCatSumCol(sheet, "type_a", sumRow, 0, sumRowFrom, "", sumRowTo);

			//Total Injury
			sumRow = 15;
			sumRowFrom = "12";
			sumRowTo = "15";
			setCatSumCol(sheet, "type_a", sumRow, 0, sumRowFrom, "", sumRowTo);

			//Total - bottom
			sumRow = 21;
			sumRowFrom = "11";
			sumRowFrom2 = "16";
			sumRowTo = "21";
			setCatSumCol(sheet, "type_b", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - right side
			sumRow = 0;
			sumCol = 13;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "type_c", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - for bar chart
			sumRow = 0;
			sumCol = 2;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			//setCatSumCol(sheet, "type_d", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

		} catch (IOException e) {
		    e.printStackTrace();
		} finally {
		    if (fileInputStream != null) {
				try {
				    fileInputStream.close();
				} catch (IOException e) {
				    e.printStackTrace();
				}
		    }
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportUnit(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";

		try {

			if (p_sheet == null) {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("Unit_Incident");

			} else {
				sheet = p_sheet;
			}

			//rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(1);
			excelRow.getCell(0).setCellValue("Unit Incident Report (Location / Month) " + incident_date_from.substring(4, 8));

			ArrayList excelReport = getPIReport(userBean, "unit", incident_date_from, incident_date_to, "");
			int j = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
				// for excel row seq
//				if (j < 3) {
//					excelRow = sheet.getRow(j + 3);
//					} else {
//					excelRow = sheet.getRow(j + 7);
//				}
				//
				excelRow = sheet.getRow(j + 3);
				excelRow.getCell(0).setCellValue(dbRow.getValue(0));
				excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(2)));
				excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(3)));
				excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(4)));
				excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(5)));
				excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(6)));
				excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(7)));
				excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(8)));
				excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(9)));
				excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(10)));
				excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(11)));
				excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(12)));
				}
			}

			//Total - bottom
			//sumRow = 25;
			if (ConstantsServerSide.isHKAH()) {
				sumRow = 28;
				sumRowTo = "28";
			} else if (ConstantsServerSide.isTWAH()) {
				sumRow = 35;
				sumRowTo = "35	";
			}
			//sumRow = 28;
			sumRowFrom = "4";
			sumRowFrom2 = "";
			//sumRowTo = "28";
			setCatSumCol(sheet, "unit_b", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - right side
			sumRow = 0;
			sumCol = 13;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "unit_c", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportTypeUnit(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";

		try {

			if (p_sheet == null) {

				fileInputStream = new FileInputStream(xlsFileName);
				workbook = new HSSFWorkbook(fileInputStream);

				sheet = workbook.getSheet("Unit_incident_breakdown");

			} else {
				sheet = p_sheet;
			}

			excelRow = sheet.getRow(1);
			excelRow.getCell(0).setCellValue("Unit Incident Report (Location / Incident Type) " + incident_date_from.substring(4, 8));

			ArrayList excelReport = getPIReport(userBean, "type_unit", incident_date_from, incident_date_to, "");
			int j = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {

					if (ConstantsServerSide.isHKAH()) {
						excelRow = sheet.getRow(j + 3);
						excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(2)));
						excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(3)));
						excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(4)));
						excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(5)));
						excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(6)));
						excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(7)));
						excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(8)));
						excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(9)));
						excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(10)));
						excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(11)));
						excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(12)));
					} else {
						excelRow = sheet.getRow(j + 3);
						//excelRow.getCell(0).setCellValue(dbRow.getValue(0));
						excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(3)));
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
						excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(2)));
						excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(6)));
						excelRow.getCell(5).setCellValue(Integer.valueOf(dbRow.getValue(4)));
						excelRow.getCell(6).setCellValue(Integer.valueOf(dbRow.getValue(5)));
						excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(7)));
						excelRow.getCell(8).setCellValue(Integer.valueOf(dbRow.getValue(8)));
						excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(9)));
						excelRow.getCell(10).setCellValue(Integer.valueOf(dbRow.getValue(10)));
						excelRow.getCell(11).setCellValue(Integer.valueOf(dbRow.getValue(11)));
						excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(12)));
						excelRow.getCell(13).setCellValue(Integer.valueOf(dbRow.getValue(13)));
						excelRow.getCell(14).setCellValue(Integer.valueOf(dbRow.getValue(14)));
					}
				}
			}

			//Total - bottom
			//sumRow = 25;
			if (ConstantsServerSide.isHKAH()) {
				sumRow = 28;
			} else if (ConstantsServerSide.isTWAH()) {
				sumRow = 35;
			}
			sumRowFrom = "4";
			sumRowFrom2 = "";
			if (ConstantsServerSide.isHKAH()) {
				sumRowTo = "28";
			} else if (ConstantsServerSide.isTWAH()) {
				sumRowTo = "35";
			}
			setCatSumCol(sheet, "type_unit_b", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - right side
			sumRow = 0;
			if (ConstantsServerSide.isHKAH()) {
				sumCol = 13;
			} else if (ConstantsServerSide.isTWAH()) {
				sumCol = 15;
			}
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "type_unit_c", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportCompariosn(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int col1 = 0;
		int col2 = 0;
		int row1 = 0;
		int row2 = 0;
		int sumRow = 0;
		int sumCol = 0;
		int startRow = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";
		String CurrYear = "";
		String Last1Year = "";
		String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		String Last1YearFrom = "";
		String Last1YearTo = "";
		String Last2YearFrom = "";
		String Last2YearTo = "";

		try {

			if (p_sheet == null) {

				fileInputStream = new FileInputStream(xlsFileName);
				workbook = new HSSFWorkbook(fileInputStream);

				sheet = workbook.getSheet("Comparison");

			} else {
				sheet = p_sheet;
			}

			CurrYear = incident_date_from.substring(4, 8);
			Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
			Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);

			CurrYearFrom = "0101" + CurrYear + " 000001";
			CurrYearTo = "3112" + CurrYear + " 235959";
			Last1YearFrom = "0101" + Last1Year + " 000001";
			Last1YearTo = "3112" + Last1Year + " 235959";
			Last2YearFrom = "0101" + Last2Year + " 000001";
			Last2YearTo = "3112" + Last2Year + " 235959";

			//if (ConstantsServerSide.isHKAH()) {
			//	col = 1;
			//} else if (ConstantsServerSide.isTWAH()) {
			//	col = 2;
			//}

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(3);

			//Top 3 incident
			ArrayList excelReport = getPIReport(userBean, "type2_compare_top3_hk", incident_date_from, incident_date_to, "");
			col1 = 1;
			int j = 0;
			for (j = 0; j < 3; j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(j + 5);
					excelRow.getCell(col1).setCellValue(dbRow.getValue(0));
				}
			}
			excelReport = getPIReport(userBean, "type2_compare_top3_tw", incident_date_from, incident_date_to, "");
			col1 = 2;
			j = 0;
			for (j = 0; j < 3; j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(j + 5);
					excelRow.getCell(col1).setCellValue(dbRow.getValue(0));
				}
			}

			// Precentage of Staff Injury
			float totalStaffInj = 0;
			float totalACHSBedNum = 0;
			float up = 0;
			float down = 0;
			float pecTotalStaffInj = 0;

			col1 = 4;
			col2 = 5;
			// last 2 year
			excelRow = sheet.getRow(14);
			excelRow.getCell(0).setCellValue(Last2Year);
			excelReport = getPIReport(userBean, "compare_staff_inj_hk", Last2YearFrom, Last2YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totalStaffInj = Integer.valueOf(dbRow.getValue(0));
				}
			}
			pecTotalStaffInj = totalStaffInj;
			excelRow.getCell(col1).setCellValue(pecTotalStaffInj);
			excelReport = getPIReport(userBean, "compare_staff_inj_tw", Last2YearFrom, Last2YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totalStaffInj = Integer.valueOf(dbRow.getValue(0));
				}
			}
			pecTotalStaffInj = totalStaffInj;
			excelRow.getCell(col2).setCellValue(pecTotalStaffInj);

			//last 1 year
			excelRow = sheet.getRow(15);
			excelRow.getCell(0).setCellValue(Last1Year);
			excelReport = getPIReport(userBean, "compare_staff_inj_hk", Last1YearFrom, Last1YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totalStaffInj = Integer.valueOf(dbRow.getValue(0));
				}
			}
			pecTotalStaffInj = totalStaffInj;
			excelRow.getCell(col1).setCellValue(pecTotalStaffInj);
			excelReport = getPIReport(userBean, "compare_staff_inj_tw", Last1YearFrom, Last1YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totalStaffInj = Integer.valueOf(dbRow.getValue(0));
				}
			}
			pecTotalStaffInj = totalStaffInj;
			excelRow.getCell(col2).setCellValue(pecTotalStaffInj);

			//Curr Year
			excelRow = sheet.getRow(16);
			excelRow.getCell(0).setCellValue(CurrYear);
			excelReport = getPIReport(userBean, "compare_staff_inj_hk", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totalStaffInj = Integer.valueOf(dbRow.getValue(0));
				}
			}
			pecTotalStaffInj = totalStaffInj;
			excelRow.getCell(col1).setCellValue(pecTotalStaffInj);
			excelReport = getPIReport(userBean, "compare_staff_inj_tw", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					totalStaffInj = Integer.valueOf(dbRow.getValue(0));
				}
			}
			pecTotalStaffInj = totalStaffInj;
			excelRow.getCell(col2).setCellValue(pecTotalStaffInj);

			//Medication comp Error
			float totalMed = 0;
			String medErrHKAH = null;
			String tot_adm_err = null;
			String tot_dep_err = null;
			String tot_pat_comp_err = null;
			String tot_dep_err2 = null;

			col1 = 4;
			col2 = 5;
			// last 2 year

			excelRow = sheet.getRow(40);
				excelRow.getCell(0).setCellValue(Last2Year);
				excelRow = sheet.getRow(41);
				excelRow.getCell(0).setCellValue(Last1Year);
				excelRow = sheet.getRow(42);
				excelRow.getCell(0).setCellValue(CurrYear);

			excelReport = getPIReport(userBean, "compare_med_hk", Last2YearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(40 + j);
					//excelRow.getCell(0).setCellValue(dbRow.getValue(0));
					totalMed = Integer.valueOf(dbRow.getValue(1));
					excelRow.getCell(col1).setCellValue(totalMed);
				}
			}
			excelReport = getPIReport(userBean, "compare_med_tw", Last2YearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(40 + j);
					totalMed = Integer.valueOf(dbRow.getValue(1));
					excelRow.getCell(col2).setCellValue(totalMed);
				}
			}

			/*
			excelReport = getPIReport(userBean, "comparison_med_err_dose", incident_date_from, incident_date_to, "151");
			//A40 ~ For HKAH:  missed dose (21.2%) and wrong dosage (18.2%)
			medErrHKAH = "~ For HKAH: ";
			if (excelReport.size() == 2) { // has this option tick
				dbRow = (ReportableListObject) excelReport.get(0);
				up = Integer.valueOf(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				down = Integer.valueOf(dbRow.getValue(2));
				tot_adm_err = String.valueOf(Math.round((up / down) * 100));
			} else if (excelReport.size() == 1) { // has not this option tick
				tot_adm_err = String.valueOf(0);
			}
			excelReport = getPIReport(userBean, "comparison_med_err_dose", incident_date_from, incident_date_to, "131");
			if (excelReport.size() == 2) { // has this option tick
				dbRow = (ReportableListObject) excelReport.get(0);
				up = Integer.valueOf(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				down = Integer.valueOf(dbRow.getValue(2));
				tot_dep_err = String.valueOf(Math.round((up / down) * 100));
			} else if (excelReport.size() == 1) { // has not this option tick
				tot_dep_err = String.valueOf(0);
			}
			excelReport = getPIReport(userBean, "comparison_med_err_dose", incident_date_from, incident_date_to, "142");
			if (excelReport.size() == 2) { // has this option tick
				dbRow = (ReportableListObject) excelReport.get(0);
				up = Integer.valueOf(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				down = Integer.valueOf(dbRow.getValue(2));
				tot_pat_comp_err = String.valueOf(Math.round((up / down) * 100));
			} else if (excelReport.size() == 1) { // has not this option tick
				tot_pat_comp_err = String.valueOf(0);
			}
			excelReport = getPIReport(userBean, "comparison_med_err_dose", incident_date_from, incident_date_to, "136");
			if (excelReport.size() == 2) { // has this option tick
				dbRow = (ReportableListObject) excelReport.get(0);
				up = Integer.valueOf(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				down = Integer.valueOf(dbRow.getValue(2));
				tot_dep_err2 = String.valueOf(Math.round((up / down) * 100));
			} else if (excelReport.size() == 1) { // has not this option tick
				tot_dep_err2 = String.valueOf(0);
			}

			excelRow = sheet.getRow(39); // row of year 2014
			excelRow.getCell(2).setCellValue(tot_adm_err + "%");
			excelRow = sheet.getRow(40); // row of year 2014
			excelRow.getCell(2).setCellValue(tot_dep_err + "%");
			excelRow = sheet.getRow(41); // row of year 2014
			excelRow.getCell(2).setCellValue(tot_pat_comp_err + "%");
			excelRow = sheet.getRow(42); // row of year 2014
			excelRow.getCell(2).setCellValue(tot_dep_err + "%");
			*/

		    //Incident Rate of Inpatient Fall comparison
			float inpatFall = 0;
			float achsBed = 0;
			float pec_pat_fall_overnight_bed = 0;
			String formula = null;

			col1 = 1;
			col2 = 4;

			excelRow = sheet.getRow(71);
				excelRow.getCell(0).setCellValue(Last2Year);
				excelRow = sheet.getRow(72);
				excelRow.getCell(0).setCellValue(Last1Year);
				excelRow = sheet.getRow(73);
				excelRow.getCell(0).setCellValue(CurrYear);

			// last 2 year
			startRow = 71;
			//excelRow.getCell(0).setCellValue(Last2Year);
			excelReport = getPIReport(userBean, "compare_inpat_fall_hk", Last2YearFrom, Last2YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				excelRow = sheet.getRow(startRow);
				if (excelReport.size() > 0) {
					inpatFall = Integer.valueOf(dbRow.getValue(1));
					achsBed = getACHSBedNumHKAH(Last2Year);
					excelRow.getCell(col1).setCellValue((inpatFall * 100) / achsBed);
					formula = inpatFall + " * 100 / " + achsBed;
					excelRow.getCell(col2).setCellValue(formula);
				}
			}
			// last 1 year
			startRow = 71 + 1;
			//excelRow.getCell(0).setCellValue(Last1Year);
			excelReport = getPIReport(userBean, "compare_inpat_fall_hk", Last1YearFrom, Last1YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				excelRow = sheet.getRow(startRow);
				if (excelReport.size() > 0) {
					inpatFall = Integer.valueOf(dbRow.getValue(1));
					achsBed = getACHSBedNumHKAH(Last1Year);
					excelRow.getCell(col1).setCellValue((inpatFall * 100) / achsBed);
					formula = inpatFall + " * 100 / " + achsBed;
					excelRow.getCell(col2).setCellValue(formula);
				}
			}
			// Curr Year
			startRow = 71 + 2;
			//excelRow.getCell(0).setCellValue(CurrYear);
			excelReport = getPIReport(userBean, "compare_inpat_fall_hk", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				excelRow = sheet.getRow(startRow);
				if (excelReport.size() > 0) {
					inpatFall = Integer.valueOf(dbRow.getValue(1));
					achsBed = getACHSBedNumHKAH(CurrYear);
					excelRow.getCell(col1).setCellValue((inpatFall * 100) / achsBed);
					formula = inpatFall + " * 100 / " + achsBed;
					excelRow.getCell(col2).setCellValue(formula);
				}
			}

			col1 = 2;
			col2 = 5;
			// last 2 year
			startRow = 71;
			//excelRow.getCell(0).setCellValue(Last2Year);
			excelReport = getPIReport(userBean, "compare_inpat_fall_tw", Last2YearFrom, Last2YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				excelRow = sheet.getRow(startRow);
				if (excelReport.size() > 0) {
					inpatFall = Integer.valueOf(dbRow.getValue(1));
					achsBed = getACHSBedNumTWAH(Last2Year);
					excelRow.getCell(col1).setCellValue((inpatFall * 100) / achsBed);
					formula = inpatFall + " * 100 / " + achsBed;
					excelRow.getCell(col2).setCellValue(formula);
				}
			}
			// last 1 year
			startRow = 71 + 1;
			//excelRow.getCell(0).setCellValue(Last2Year);
			excelReport = getPIReport(userBean, "compare_inpat_fall_tw", Last1YearFrom, Last1YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				excelRow = sheet.getRow(startRow);
				if (excelReport.size() > 0) {
					inpatFall = Integer.valueOf(dbRow.getValue(1));
					achsBed = getACHSBedNumTWAH(Last1Year);
					excelRow.getCell(col1).setCellValue((inpatFall * 100) / achsBed);
					formula = inpatFall + " * 100 / " + achsBed;
					excelRow.getCell(col2).setCellValue(formula);
				}
			}
			// Curr Year
			startRow = 71 + 2;
			//excelRow.getCell(0).setCellValue(Last2Year);
			excelReport = getPIReport(userBean, "compare_inpat_fall_tw", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				excelRow = sheet.getRow(startRow);
				if (excelReport.size() > 0) {
					inpatFall = Integer.valueOf(dbRow.getValue(1));
					achsBed = getACHSBedNumTWAH(CurrYear);
					excelRow.getCell(col1).setCellValue((inpatFall * 100) / achsBed);
					formula = inpatFall + " * 100 / " + achsBed;
					excelRow.getCell(col2).setCellValue(formula);
				}
			}
		    /*
			excelReport = getPIReport(userBean, "comparison_top3_part2", incident_date_from, incident_date_to, "");
			if (excelReport.size() > 0) {
				dbRow = (ReportableListObject) excelReport.get(0);
				totalPatientFall = Integer.valueOf(dbRow.getValue(1));
				//excelRow = sheet.getRow(59);
				//excelRow.getCell(2).setCellValue(dbRow.getValue(1));
				dbRow = (ReportableListObject) excelReport.get(1);
				//excelRow = sheet.getRow(60);
				//excelRow.getCell(2).setCellValue(dbRow.getValue(2));
				totalOvernightBed = Integer.valueOf(dbRow.getValue(2));
			}

			up = totalPatientFall;
			down = totalOvernightBed;
			//down = 22047;
			excelRow = sheet.getRow(78); // row of year 2014
			pec_pat_fall_overnight_bed =  up / down;
			excelRow.getCell(1).setCellValue(Float.valueOf(String.format("%.2f", pec_pat_fall_overnight_bed)));
			excelRow.getCell(3).setCellValue(totalPatientFall + "/" + totalOvernightBed);
				*/

			//Others
			/*
			excelReport = getPIReport(userBean, "comparison_others", incident_date_from, incident_date_to, "");
			int excelcol = 0;
		    for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(j + 51);
					if (j < 6) {
						excelcol = 1;
					} else {
						excelcol = 2;
					}
					excelRow.getCell(excelcol).setCellValue(dbRow.getValue(1).substring(2, dbRow.getValue(1).length()));
			    excelRow.getCell(excelcol + 1).setCellValue(Integer.valueOf(dbRow.getValue(3)));
				}
			}
			*/

		} catch (IOException e) {
		    e.printStackTrace();
		} finally {
		    if (fileInputStream != null) {
				try {
				    fileInputStream.close();
				} catch (IOException e) {
				    e.printStackTrace();
				}
		    }
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportSummary(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		int mth = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";

		String SumTitle = "";
		String CurrYear = "";
		String Last1Year = "";
		String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		String Last1YearFrom = "";
		String Last1YearTo = "";
		String Last2YearFrom = "";
		String Last2YearTo = "";
		int ColSumMonthCurrYear1 = 12;
		int ColSumMonthCurrYear2 = 14;
		int ColSumMonthLast1Year1 = 7;
		int ColSumMonthLast1Year2 = 9;
		int ColSumMonthLast2Year1 = 2;
		int ColSumMonthLast2Year2 = 4;
		int ColSumCurrYear = 13;
		int ColSumLast1Year = 8;
		int ColSumLast2Year = 3;
		String Q1 = "1st Quarter ";
		String Q2 = "2st Quarter ";
		String Q3 = "3st Quarter ";
		String Q4 = "4st Quarter ";

		try {

			if (p_sheet == null) {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("Summary");

			} else {
				sheet = p_sheet;
			}

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(3);

			CurrYear = incident_date_from.substring(4, 8);
			Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
			Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);

			CurrYearFrom = "0101" + CurrYear + " 000001";
			CurrYearTo = "3112" + CurrYear + " 235959";
			Last1YearFrom = "0101" + Last1Year + " 000001";
			Last1YearTo = "3112" + Last1Year + " 235959";
			Last2YearFrom = "0101" + Last2Year + " 000001";
			Last2YearTo = "3112" + Last2Year + " 235959";

			//*************************** Incidents over the past 3 years
			SumTitle = "Incident Summary ";
			//  ==========  Current Year
			excelRow = sheet.getRow(2);
			excelRow.getCell(11).setCellValue(SumTitle + CurrYear);
			ArrayList excelReport = getPIReport(userBean, "summary_1a", CurrYearFrom, CurrYearTo, "");
			int j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
					excelRow = sheet.getRow(mth + 3);
					excelRow.getCell(ColSumMonthCurrYear1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth - 3);
				excelRow.getCell(ColSumMonthCurrYear2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col  SUM(M5:M10)+SUM(O5:O10)
			excelRow = sheet.getRow(10);
			excelRow.getCell(ColSumCurrYear).setCellFormula("SUM(M5:M10)+SUM(O5:O10)");

			//  ==========  Last 1 Year
			excelRow = sheet.getRow(2);
			excelRow.getCell(6).setCellValue(SumTitle + Last1Year);
			excelReport = getPIReport(userBean, "summary_1a", Last1YearFrom, Last1YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 3);
						excelRow.getCell(ColSumMonthLast1Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth - 3);
						excelRow.getCell(ColSumMonthLast1Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col  SUM(M5:M10)+SUM(O5:O10)
			excelRow = sheet.getRow(10);
			excelRow.getCell(ColSumLast1Year).setCellFormula("SUM(H5:H10)+SUM(J5:J10)");

			//  ==========  Last 2 Year
			excelRow = sheet.getRow(2);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year);
			excelReport = getPIReport(userBean, "summary_1a", Last2YearFrom, Last2YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
					excelRow = sheet.getRow(mth + 3);
					excelRow.getCell(ColSumMonthLast2Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth - 3);
				excelRow.getCell(ColSumMonthLast2Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col  SUM(M5:M10)+SUM(O5:O10)
			excelRow = sheet.getRow(10);
			excelRow.getCell(ColSumLast2Year).setCellFormula("SUM(C5:C10)+SUM(E5:E10)");

			excelRow = sheet.getRow(13);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year + " to " + CurrYear);
			/*
			// old method use sql
			//  ==========  Current Year
			excelReport = getPIReport(userBean, "summary_1b", incident_date_from, incident_date_to, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("Q1".equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(23);
					} else if ("Q2".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(24);
					} else if ("Q3".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(25);
					} else if ("Q4".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(26);
					}
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}
				*/
			// new method use excel sum
			//  ==========  Last 2 Year
			excelRow = sheet.getRow(15);
			excelRow.getCell(1).setCellValue(Q1 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C5:C7)");
			excelRow = sheet.getRow(16);
			excelRow.getCell(1).setCellValue(Q2 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C8:C10)");
			excelRow = sheet.getRow(17);
			excelRow.getCell(1).setCellValue(Q3 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E5:E7)");
			excelRow = sheet.getRow(18);
			excelRow.getCell(1).setCellValue(Q4 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E8:E10)");
			//  ==========  Last 1 Year
			excelRow = sheet.getRow(19);
			excelRow.getCell(1).setCellValue(Q1 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H5:H7)");
			excelRow = sheet.getRow(20);
			excelRow.getCell(1).setCellValue(Q2 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H8:H10)");
			excelRow = sheet.getRow(21);
			excelRow.getCell(1).setCellValue(Q3 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J5:J7)");
			excelRow = sheet.getRow(22);
			excelRow.getCell(1).setCellValue(Q4 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J8:J10)");

			//  ==========  Current Year
			excelRow = sheet.getRow(23);
			excelRow.getCell(1).setCellValue(Q1 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M5:M7)");
			excelRow = sheet.getRow(24);
			excelRow.getCell(1).setCellValue(Q2 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M8:M10)");
			excelRow = sheet.getRow(25);
			excelRow.getCell(1).setCellValue(Q3 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O5:O7)");
			excelRow = sheet.getRow(26);
			excelRow.getCell(1).setCellValue(Q4 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O8:O10)");

			//*************************** Discussion and Follow Up
			SumTitle = "Injury Summary ";
			//  ==========  Current Year
			excelRow = sheet.getRow(37);
			excelRow.getCell(11).setCellValue(SumTitle + CurrYear);
			// All Injury
			excelReport = getPIReport(userBean, "summary_2title", CurrYearFrom, CurrYearTo, "");
			dbRow = (ReportableListObject) excelReport.get(0);
			excelRow = sheet.getRow(36);
			//Injury Incident (5 patient injury, 2 vistor injury, 70 staff injury/ with or without blood and bodily fluid involvement)
			excelRow.getCell(1).setCellValue("Injury Incident (" + dbRow.getValue(0) + ", patient injury, " + dbRow.getValue(1) + " vistor injury, " + dbRow.getValue(2) + " staff injury/ with or without blood and bodily fluid involvement)");

			excelReport = getPIReport(userBean, "summary_2a", CurrYearFrom, CurrYearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 38);
						excelRow.getCell(ColSumMonthCurrYear1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 32);
						excelRow.getCell(ColSumMonthCurrYear2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col  SUM(M40:M45)+SUM(O40:O45)
			excelRow = sheet.getRow(45);
			excelRow.getCell(ColSumCurrYear).setCellFormula("SUM(M40:M45)+SUM(O40:O45)");

			//  ==========  Last 1 Year
			excelRow = sheet.getRow(37);
			excelRow.getCell(6).setCellValue(SumTitle + Last1Year);
			excelReport = getPIReport(userBean, "summary_2a", Last1YearFrom, Last1YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 38);
						excelRow.getCell(ColSumMonthLast1Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 32);
						excelRow.getCell(ColSumMonthLast1Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col  SUM(M5:M10)+SUM(O5:O10)
			excelRow = sheet.getRow(45);
			excelRow.getCell(ColSumLast1Year).setCellFormula("SUM(H40:H45)+SUM(J40:J45)");

			//  ==========  Last 2 Year
			excelRow = sheet.getRow(37);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year);
			excelReport = getPIReport(userBean, "summary_2a", Last2YearFrom, Last2YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 38);
						excelRow.getCell(ColSumMonthLast2Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 32);
						excelRow.getCell(ColSumMonthLast2Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col  SUM(M5:M10)+SUM(O5:O10)
			excelRow = sheet.getRow(45);
			excelRow.getCell(ColSumLast2Year).setCellFormula("SUM(C40:C45)+SUM(E40:E45)");

			excelRow = sheet.getRow(48);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year + " to " + CurrYear);

			/*
			// old Method use sql
			//excelRow = sheet.getRow(13);
			//excelRow.getCell(1).setCellValue("Incident Summary 2010 to 2014");
			excelReport = getPIReport(userBean, "summary_2b", incident_date_from, incident_date_to, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("Q1".equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(58);
					} else if ("Q2".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(59);
					} else if ("Q3".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(60);
					} else if ("Q4".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(61);
					}
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					//excelRow = sheet.getRow(j + 58);
				    //excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}
				*/
			// new method use excel sum
			//  ==========  Last 2 Year
			excelRow = sheet.getRow(50);
			excelRow.getCell(1).setCellValue(Q1 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C40:C42)");
			excelRow = sheet.getRow(51);
			excelRow.getCell(1).setCellValue(Q2 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C43:C45)");
			excelRow = sheet.getRow(52);
			excelRow.getCell(1).setCellValue(Q3 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E40:E42)");
			excelRow = sheet.getRow(53);
			excelRow.getCell(1).setCellValue(Q4 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E43:E45)");
			//  ==========  Last 1 Year
			excelRow = sheet.getRow(54);
			excelRow.getCell(1).setCellValue(Q1 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H40:H42)");
			excelRow = sheet.getRow(55);
			excelRow.getCell(1).setCellValue(Q2 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H43:H45)");
			excelRow = sheet.getRow(56);
			excelRow.getCell(1).setCellValue(Q3 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J40:J42)");
			excelRow = sheet.getRow(57);
			excelRow.getCell(1).setCellValue(Q4 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J43:J45)");
			//  ==========  Current Year
			excelRow = sheet.getRow(58);
			excelRow.getCell(1).setCellValue(Q1 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M40:M42)");
			excelRow = sheet.getRow(59);
			excelRow.getCell(1).setCellValue(Q2 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M43:M45)");
			excelRow = sheet.getRow(60);
			excelRow.getCell(1).setCellValue(Q3 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O40:O42)");
			excelRow = sheet.getRow(61);
			excelRow.getCell(1).setCellValue(Q4 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O43:O45)");

			//*************************** Medication Error
			SumTitle = "Medication Error Summary ";
			// ========== Current Year
			excelRow = sheet.getRow(69);
			excelRow.getCell(11).setCellValue(SumTitle + CurrYear);

			excelReport = getPIReport(userBean, "summary_3title", CurrYearFrom, CurrYearTo, "");
			dbRow = (ReportableListObject) excelReport.get(0);
			excelRow = sheet.getRow(68);
			int tot_med = 0;
			tot_med = Integer.parseInt(dbRow.getValue(0)) + Integer.parseInt(dbRow.getValue(1));
			//Medication Error (Total 33 with majority are missing dose and wrong dosage)
			excelRow.getCell(1).setCellValue("Medication Incident (Total " + Integer.toString(tot_med) + ")"); //+ " with majority are missing dose and wrong dosage)");

			excelReport = getPIReport(userBean, "summary_3a", CurrYearFrom, CurrYearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 70);
						excelRow.getCell(ColSumMonthCurrYear1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 64);
						excelRow.getCell(ColSumMonthCurrYear2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

			// ========== Last 1 Year
			excelRow = sheet.getRow(69);
			excelRow.getCell(6).setCellValue(SumTitle + Last1Year);
			excelReport = getPIReport(userBean, "summary_3a", Last1YearFrom, Last1YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 70);
						excelRow.getCell(ColSumMonthLast1Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 64);
						excelRow.getCell(ColSumMonthLast1Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col SUM(M72:M77)+SUM(O72:O77)
			excelRow = sheet.getRow(77);
			excelRow.getCell(ColSumLast1Year).setCellFormula("SUM(H72:H77)+SUM(J72:J77)");

			// ========== Last 2 Year
			excelRow = sheet.getRow(69);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year);
			excelReport = getPIReport(userBean, "summary_3a", Last2YearFrom, Last2YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 70);
						excelRow.getCell(ColSumMonthLast2Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 64);
						excelRow.getCell(ColSumMonthLast2Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col SUM(M72:M77)+SUM(O72:O77)
			excelRow = sheet.getRow(77);
			excelRow.getCell(ColSumLast2Year).setCellFormula("SUM(C72:C77)+SUM(E72:E77)");

			excelRow = sheet.getRow(80);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year + " to " + CurrYear);

			/*
			// old Method use sql
			//excelRow = sheet.getRow(13);
			//excelRow.getCell(1).setCellValue("Incident Summary 2010 to 2014");
			excelReport = getPIReport(userBean, "summary_3b", incident_date_from, incident_date_to, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("Q1".equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(90);
					} else if ("Q2".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(91);
					} else if ("Q3".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(92);
					} else if ("Q4".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(93);
					}
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					//excelRow = sheet.getRow(j + 90);
					//excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}
				*/
			// new method use excel sum
			//  ==========  Last 2 Year
			excelRow = sheet.getRow(82);
			excelRow.getCell(1).setCellValue(Q1 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C72:C74)");
			excelRow = sheet.getRow(83);
			excelRow.getCell(1).setCellValue(Q2 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C75:C77)");
			excelRow = sheet.getRow(84);
			excelRow.getCell(1).setCellValue(Q3 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E72:E74)");
			excelRow = sheet.getRow(85);
			excelRow.getCell(1).setCellValue(Q4 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E75:E77)");
			//  ==========  Last 1 Year
			excelRow = sheet.getRow(86);
			excelRow.getCell(1).setCellValue(Q1 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H72:H74)");
			excelRow = sheet.getRow(87);
			excelRow.getCell(1).setCellValue(Q2 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H75:H77)");
			excelRow = sheet.getRow(88);
			excelRow.getCell(1).setCellValue(Q3 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J72:J74)");
			excelRow = sheet.getRow(89);
			excelRow.getCell(1).setCellValue(Q4 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J75:J77)");
			// ========== Current Year
			excelRow = sheet.getRow(90);
			excelRow.getCell(1).setCellValue(Q1 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M72:M74)");
			excelRow = sheet.getRow(91);
			excelRow.getCell(1).setCellValue(Q2 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M75:M77)");
			excelRow = sheet.getRow(92);
			excelRow.getCell(1).setCellValue(Q3 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O72:O74)");
			excelRow = sheet.getRow(93);
			excelRow.getCell(1).setCellValue(Q4 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O75:O77)");

			//**************** Fall Incident
			SumTitle = "Fall Summary ";
			// ========== Current Year
			excelRow = sheet.getRow(101);
			excelRow.getCell(11).setCellValue(SumTitle + CurrYear);

			excelReport = getPIReport(userBean, "summary_4title", CurrYearFrom, CurrYearTo, "");
			dbRow = (ReportableListObject) excelReport.get(0);
			excelRow = sheet.getRow(100);
			//Fall Incident (including 13 patient fall, 5 vistor fall and 5 staff falls)
			excelRow.getCell(1).setCellValue("Fall Incident (including " + dbRow.getValue(0) + " patient fall, " + dbRow.getValue(1) + " vistor fall and " + dbRow.getValue(2) + " staff falls)");

			excelReport = getPIReport(userBean, "summary_4a", CurrYearFrom, CurrYearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 102);
						excelRow.getCell(ColSumMonthCurrYear1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 96);
						excelRow.getCell(ColSumMonthCurrYear2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

			// set sum col SUM(M104:M109)+SUM(O104:O109)
			excelRow = sheet.getRow(109);
			excelRow.getCell(13).setCellFormula("SUM(M104:M109)+SUM(O104:O109)");

			// ========== Last 1 Year
			excelRow = sheet.getRow(101);
			excelRow.getCell(6).setCellValue(SumTitle + Last1Year);
			excelReport = getPIReport(userBean, "summary_4a", Last1YearFrom, Last1YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 102);
						excelRow.getCell(ColSumMonthLast1Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 96);
						excelRow.getCell(ColSumMonthLast1Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col SUM(M72:M77)+SUM(O72:O77)
			excelRow = sheet.getRow(109);
			excelRow.getCell(ColSumLast1Year).setCellFormula("SUM(H104:H109)+SUM(J104:J109)");

			// ========== Last 2 Year
			excelRow = sheet.getRow(101);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year);
			excelReport = getPIReport(userBean, "summary_4a", Last2YearFrom, Last2YearTo, "");
			j = 0;
			mth = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					mth = Integer.valueOf(dbRow.getValue(0));
					if (mth < 7) {
						excelRow = sheet.getRow(mth + 102);
						excelRow.getCell(ColSumMonthLast2Year1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else {
						excelRow = sheet.getRow(mth + 96);
						excelRow.getCell(ColSumMonthLast2Year2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}
			// set sum col SUM(M72:M77)+SUM(O72:O77)
			excelRow = sheet.getRow(109);
			excelRow.getCell(ColSumLast2Year).setCellFormula("SUM(C104:C109)+SUM(E104:E109)");

			excelRow = sheet.getRow(112);
			excelRow.getCell(1).setCellValue(SumTitle + Last2Year + " to " + CurrYear);

			/*
			// old Method use sql
			//excelRow = sheet.getRow(13);
			//excelRow.getCell(1).setCellValue("Incident Summary 2010 to 2014");
			excelReport = getPIReport(userBean, "summary_4b", incident_date_from, incident_date_to, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("Q1".equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(122);
					} else if ("Q2".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(123);
					} else if ("Q3".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(124);
					} else if ("Q4".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(125);
					}
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					//excelRow = sheet.getRow(j + 122);
					//excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}
			*/

			// new method use excel sum
			// ========== Last 2 Year
			excelRow = sheet.getRow(114);
			excelRow.getCell(1).setCellValue(Q1 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C104:C106)");
			excelRow = sheet.getRow(115);
			excelRow.getCell(1).setCellValue(Q2 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(C107:C109)");
			excelRow = sheet.getRow(116);
			excelRow.getCell(1).setCellValue(Q3 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E104:E106)");
			excelRow = sheet.getRow(117);
			excelRow.getCell(1).setCellValue(Q4 + Last2Year);
			excelRow.getCell(2).setCellFormula("SUM(E107:E109)");
			// ========== Last 1 Year
			excelRow = sheet.getRow(118);
			excelRow.getCell(1).setCellValue(Q1 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H104:H106)");
			excelRow = sheet.getRow(119);
			excelRow.getCell(1).setCellValue(Q2 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(H107:H109)");
			excelRow = sheet.getRow(120);
			excelRow.getCell(1).setCellValue(Q3 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J104:J106)");
			excelRow = sheet.getRow(121);
			excelRow.getCell(1).setCellValue(Q4 + Last1Year);
			excelRow.getCell(2).setCellFormula("SUM(J107:J109)");
			// ========== Current Year
			excelRow = sheet.getRow(122);
			excelRow.getCell(1).setCellValue(Q1 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M104:M106)");
			excelRow = sheet.getRow(123);
			excelRow.getCell(1).setCellValue(Q2 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(M107:M109)");
			excelRow = sheet.getRow(124);
			excelRow.getCell(1).setCellValue(Q3 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O104:O106)");
			excelRow = sheet.getRow(125);
			excelRow.getCell(1).setCellValue(Q4 + CurrYear);
			excelRow.getCell(2).setCellFormula("SUM(O107:O109)");

			// remark 18/12/2015 seem no use
			/*
			//Total - bottom
			sumRow = 25;
			sumRowFrom = "4";
			sumRowFrom2 = "";
			sumRowTo = "25";
			setCatSumCol(sheet, "type_unit_b", sumRow, 0, sumRowFrom, sumRowFrom2, sumRowTo);

			//Total - right side
			sumRow = 0;
			sumCol = 13;
			sumRowFrom = "";
			sumRowFrom2 = "";
			sumRowTo = "";
			setCatSumCol(sheet, "type_unit_c", sumRow, sumCol, sumRowFrom, sumRowFrom2, sumRowTo);
			*/
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportSummaryByYear(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		int mth = 0;
		int j = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";

		String SumTitle = "";
		String CurrYear = "";
		String Last1Year = "";
		String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		String Last1YearFrom = "";
		String Last1YearTo = "";
		String Last2YearFrom = "";
		String Last2YearTo = "";
		int ColSumMonthCurrYear1 = 12;
		int ColSumMonthCurrYear2 = 14;
		int ColSumMonthLast1Year1 = 7;
		int ColSumMonthLast1Year2 = 9;
		int ColSumMonthLast2Year1 = 2;
		int ColSumMonthLast2Year2 = 4;
		int ColSumCurrYear = 13;
		int ColSumLast1Year = 8;
		int ColSumLast2Year = 3;
		String Q1 = "1st Quarter ";
		String Q2 = "2st Quarter ";
		String Q3 = "3st Quarter ";
		String Q4 = "4st Quarter ";
		//HSSFChart Chart1 = null;
		float achsBed = 0;
		float inPat = 0;
		float inPatachsBed = 0;
		int col1 = 0;
		int col2 = 0;

		try {

			if (p_sheet == null) {

				fileInputStream = new FileInputStream(xlsFileName);
				workbook = new HSSFWorkbook(fileInputStream);

				sheet = workbook.getSheet("Summary_by_Year");
			} else {
				sheet = p_sheet;
			}

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			excelRow = sheet.getRow(3);

			CurrYear = incident_date_from.substring(4, 8);
			Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
			Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);

			CurrYearFrom = "0101" + CurrYear + " 000001";
			CurrYearTo = "3112" + CurrYear + " 235959";
			Last1YearFrom = "0101" + Last1Year + " 000001";
			Last1YearTo = "3112" + Last1Year + " 235959";
			Last2YearFrom = "0101" + Last2Year + " 000001";
			Last2YearTo = "3112" + Last2Year + " 235959";

			// ============== Incidents over the past 3 years ==============
			SumTitle = "Incident Summary ";
			excelRow = sheet.getRow(4);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);
			j = 0;
			ArrayList excelReport = getPIReport(userBean, "summary_1_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(6);
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(7);
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(8);
					}
					excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(0)));
					excelRow.getCell(12).setCellValue(Integer.valueOf(dbRow.getValue(0)));
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));

				}
			}

			// all inpat incident and outpat incident
			excelRow = sheet.getRow(6);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow = sheet.getRow(7);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow = sheet.getRow(8);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			j = 0;
			col1 = 13;
			col2 = 14;

			// last 2 year
			excelReport = getPIReport(userBean, "all_inpat_inc", Last2YearFrom, Last2YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(6);
					excelRow.getCell(col1).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				}
			}
			excelReport = getPIReport(userBean, "all_outpat_inc", Last2YearFrom, Last2YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(6);
					excelRow.getCell(col2).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				}
			}
			// last 1 year
			excelReport = getPIReport(userBean, "all_inpat_inc", Last1YearFrom, Last1YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(7);
					excelRow.getCell(col1).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				}
			}
			excelReport = getPIReport(userBean, "all_outpat_inc", Last1YearFrom, Last1YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(7);
					excelRow.getCell(col2).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				}
			}
			// Curr year
			excelReport = getPIReport(userBean, "all_inpat_inc", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(8);
					excelRow.getCell(col1).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				}
			}
			excelReport = getPIReport(userBean, "all_outpat_inc", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(8);
					excelRow.getCell(col2).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				}
			}
			//

			// =====================
			// for the graph
			excelReport = getPIReport(userBean, "type2", incident_date_from, incident_date_to, "");
			if (ConstantsServerSide.isHKAH()) {
				sumRow = 21;
			} else {
				sumRow = 21;
			}
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					//excelRow = sheet.getRow(j + 70);
					excelRow = sheet.getRow(j + sumRow);
					excelRow.getCell(3).setCellValue(dbRow.getValue(0));
					excelRow.getCell(4).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}

			// ============== Discussion and Follow Up ==============
			// Staff Injury / BBF / Fall (24 Staff Injury; 14 BBF (Including 0 visiting doctor cases); 10 Staff Fall)
			j = 0;
			excelReport = getPIReport(userBean, "summary_2a_byyear", Last2Year, CurrYear, "");
			int staInj = 0;
			int staFall = 0;
			int bbf = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("bbf".equals(dbRow.getValue(0))) {
						bbf = Integer.valueOf(dbRow.getValue(2));
					} else if ("stafall".equals(dbRow.getValue(0))) {
						staFall = Integer.valueOf(dbRow.getValue(2));
					} else if ("stainj".equals(dbRow.getValue(0))) {
						staInj = Integer.valueOf(dbRow.getValue(2));
					}
				}
			}
			excelRow = sheet.getRow(41);
			excelRow.getCell(1).setCellValue("Staff Injury / BBF / Fall (" + staInj + " Staff Injury; " + bbf + " BBF (Including 0 visiting doctor cases); " + staFall + " Staff Fall)");

			SumTitle = "Summary ";
			excelRow = sheet.getRow(45);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(47);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow.getCell(12).setCellValue(Last2Year);
			excelRow = sheet.getRow(48);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow.getCell(12).setCellValue(Last1Year);
			excelRow = sheet.getRow(49);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			excelRow.getCell(12).setCellValue(CurrYear);
			j = 0;
			excelReport = getPIReport(userBean, "summary_2b_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(47);
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(48);
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(49);
					}
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					excelRow.getCell(13).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}

			// Medication Error (Total 59)
			j = 0;
			excelReport = getPIReport(userBean, "summary_3a_byyear", Last2Year, CurrYear, "");
			float med = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("med".equals(dbRow.getValue(0))) {
						med = Integer.valueOf(dbRow.getValue(2));
					}
				}
			}
			excelRow = sheet.getRow(60);
			excelRow.getCell(1).setCellValue("Medication Incident (Total " + (int)Math.round(med) + ")");

			SumTitle = "Summary ";
			excelRow = sheet.getRow(61);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(63);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow.getCell(12).setCellValue(Last2Year);
			excelRow = sheet.getRow(64);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow.getCell(12).setCellValue(Last1Year);
			excelRow = sheet.getRow(65);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			excelRow.getCell(12).setCellValue(CurrYear);
			j = 0;
			excelReport = getPIReport(userBean, "summary_3b_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
						achsBed = getACHSBedNum(Last2Year);
					excelRow = sheet.getRow(63);
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						achsBed = getACHSBedNum(Last1Year);
						excelRow = sheet.getRow(64);
						//excelRow.getCell(13).setCellValue(achsBed);
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						achsBed = getACHSBedNum(CurrYear);
						excelRow = sheet.getRow(65);
						//excelRow.getCell(13).setCellValue(achsBed);
					}
					med = Integer.valueOf(dbRow.getValue(1));
					//excelRow.getCell(12).setCellValue(med);
					//med = (med * 100) / achsBed;
					excelRow.getCell(2).setCellValue(med);
					excelRow.getCell(13).setCellValue(med);
				}
			}

			// Others

			String tot = null;
			String dd = "0";
			String ps = null;
			String bti = null;
			String sri = null;
			String equip = null;
			String others = null;

			excelRow = sheet.getRow(75);
			//CurrYear = "2015";

			if (ConstantsServerSide.isHKAH()) {
				tot = getReportOthersCount("56", "", CurrYear, CurrYear);
				ps = getReportOthersCount("56", "78", CurrYear, CurrYear);
				bti = getReportOthersCount("56", "13", CurrYear, CurrYear);
				sri = getReportOthersCount("56", "68", CurrYear, CurrYear);
				others = getReportOthersCount("56", "26", CurrYear, CurrYear);
				equip = getReportOthersCount("54", "", CurrYear, CurrYear);
			} else if (ConstantsServerSide.isTWAH()) {
				tot = getReportOthersCount("56", "", CurrYear, CurrYear);
				ps = getReportOthersCount("56", "78", CurrYear, CurrYear);
				bti = getReportOthersCount("120", "bti", CurrYear, CurrYear);
				sri = getReportOthersCount("56", "68", CurrYear, CurrYear);
				others = getReportOthersCount("56", "26", CurrYear, CurrYear);
				equip = getReportOthersCount("54", "", CurrYear, CurrYear);
			}

			//excelRow.getCell(1).setCellValue("Others (Total " + tot + " including " + dd + " Broken DD; " + ps + " Pressure Sore; " + bti + " Blood Transfusion Incident; " + sri + " Specimen Related Incident; " + equip + " Equipment; " + others + " Others)");
			excelRow.getCell(1).setCellValue("Others (Total " + tot + " including " + dd + " Broken DD; " + ps + " Pressure Sore; " + bti + " Blood Transfusion Incident; " + sri + " Specimen Related Incident; " + others + " Others)");

			//CurrYear = "2016";
			SumTitle = "Summary ";
			excelRow = sheet.getRow(78);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(80);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow = sheet.getRow(81);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow = sheet.getRow(82);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			j = 0;
			excelReport = getPIReport(userBean, "summary_4b_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(80);
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(81);
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(82);
					}
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}

			//Patient Injury - Fall

			SumTitle = "Summary ";
			excelRow = sheet.getRow(95);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(97);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow = sheet.getRow(98);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow = sheet.getRow(99);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			j = 0;
			// curr year
			excelReport = getPIReport(userBean, "summary_5b_byyear", Last2Year, Last2Year, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(97);
					if (j == 0) {
						achsBed = getACHSBedNum(Last2Year);
						excelRow.getCell(12).setCellValue(Last2Year);
						excelRow.getCell(15).setCellValue(achsBed);
					} else if (j == 1) {
						excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(1)) / 1000);
						inPat = Integer.valueOf(dbRow.getValue(1)) / 10;
						excelRow.getCell(13).setCellValue(inPat);
					} else if (j == 2) {
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)) / 1000);
					}
				}
			}
			excelRow.getCell(4).setCellValue(inPat / achsBed);
			// Last 1 year
			excelReport = getPIReport(userBean, "summary_5b_byyear", Last1Year, Last1Year, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(98);
					if (j == 0) {
						achsBed = getACHSBedNum(Last1Year);
						excelRow.getCell(12).setCellValue(Last1Year);
						excelRow.getCell(15).setCellValue(achsBed);
					} else if (j == 1) {
						excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(1)) / 1000);
						inPat = Integer.valueOf(dbRow.getValue(1)) / 10;
						excelRow.getCell(13).setCellValue(inPat);
					} else if (j == 2) {
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)) / 1000);
					}
				}
			}
			excelRow.getCell(4).setCellValue(inPat / achsBed);
			// Last 2 year
			excelReport = getPIReport(userBean, "summary_5b_byyear", CurrYear, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(99);
					if (j == 0) {
						achsBed = getACHSBedNum(CurrYear);
						excelRow.getCell(12).setCellValue(CurrYear);
						excelRow.getCell(15).setCellValue(achsBed);
					} else if (j == 1) {
						excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(1)) / 1000);
						inPat = Integer.valueOf(dbRow.getValue(1)) / 10;
						excelRow.getCell(13).setCellValue(inPat);
					} else if (j == 2) {
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)) / 1000);
					}
				}
			}
			excelRow.getCell(4).setCellValue(inPat / achsBed);
			//excelRow.getCell(4).setCellValue("0.12");

			//Visitor/ Relative/ Others Injury - Fall
			SumTitle = "Summary ";
			excelRow = sheet.getRow(115);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(117);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow = sheet.getRow(118);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow = sheet.getRow(119);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			j = 0;
			excelReport = getPIReport(userBean, "summary_6b_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(117);
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(118);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(119);
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

			//Patient Injury - General
			SumTitle = "Summary ";
			excelRow = sheet.getRow(127);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(129);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow = sheet.getRow(130);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow = sheet.getRow(131);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			j = 0;
			excelReport = getPIReport(userBean, "summary_7b_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(129);
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(130);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(131);
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

			//Security
			SumTitle = "Summary ";
			excelRow = sheet.getRow(142);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(144);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow = sheet.getRow(145);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow = sheet.getRow(146);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			j = 0;
			excelReport = getPIReport(userBean, "summary_8b_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(144);
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(145);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(146);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

			//Visitor/ Relative/ Others Injury - General
			SumTitle = "Summary ";
			excelRow = sheet.getRow(154);
			excelRow.getCell(1).setCellValue(SumTitle + ' ' + Last2Year + " to " + CurrYear);

			excelRow = sheet.getRow(156);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last2Year));
			excelRow = sheet.getRow(157);
			excelRow.getCell(1).setCellValue(Integer.valueOf(Last1Year));
			excelRow = sheet.getRow(158);
			excelRow.getCell(1).setCellValue(Integer.valueOf(CurrYear));
			j = 0;
			excelReport = getPIReport(userBean, "summary_9b_byyear", Last2Year, CurrYear, "");
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if (Last2Year.equals(dbRow.getValue(0))) {
					excelRow = sheet.getRow(156);
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (Last1Year.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(157);
						excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					} else if (CurrYear.equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(158);
					excelRow.getCell(2).setCellValue(Integer.valueOf(dbRow.getValue(1)));
					}
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportRootCauseOthers(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		int mth = 0;
		int j = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";

		String SumTitle = "";
		String CurrYear = "";

		int tempRow = 0;

		try {

			if (p_sheet == null) {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("Summary_by_Year");

			} else {
				sheet = p_sheet;
			}

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			//excelRow = sheet.getRow(2);

			CurrYear = incident_date_from.substring(4, 8);

			// Risk Rating for
			SumTitle = "Root Cause : Others in " + CurrYear;
			excelRow = sheet.getRow(0);
			excelRow.getCell(0).setCellValue(SumTitle);

			// Sheet Cum
			// total risk assessment
			//CurrYear = "2014";
			ArrayList excelReport = getPIReport(userBean, "root_cause", CurrYear, CurrYear, "");

			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					excelRow = sheet.getRow(j + 2);
					excelRow.getCell(0).setCellValue(dbRow.getValue(0));
					excelRow.getCell(1).setCellValue(dbRow.getValue(3));
					excelRow.getCell(2).setCellValue(dbRow.getValue(1));
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static HSSFWorkbook piYearEndReportIRSData(UserBean userBean, HSSFSheet p_sheet, String xlsFileName, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		int mth = 0;
		int j = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";

		String SumTitle = "";
		String CurrYear = "";
		String Last1Year = "";
		String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		String Last1YearFrom = "";
		String Last1YearTo = "";
		String Last2YearFrom = "";
		String Last2YearTo = "";
		int ColSumMonthCurrYear1 = 12;
		int ColSumMonthCurrYear2 = 14;
		int ColSumMonthLast1Year1 = 7;
		int ColSumMonthLast1Year2 = 9;
		int ColSumMonthLast2Year1 = 2;
		int ColSumMonthLast2Year2 = 4;
		int ColSumCurrYear = 13;
		int ColSumLast1Year = 8;
		int ColSumLast2Year = 3;
		String Q1 = "1st Quarter ";
		String Q2 = "2st Quarter ";
		String Q3 = "3st Quarter ";
		String Q4 = "4st Quarter ";
		//HSSFChart Chart1 = null;
		// risk ass
		Integer red = 0;
		Integer blue = 0;
		Integer green = 0;
		Integer yellow = 0;
		String currDay = null;
		String currMonth = null;
		int tempRow = 0;

		try {
			if (p_sheet == null) {
				fileInputStream = new FileInputStream(xlsFileName);
				workbook = new HSSFWorkbook(fileInputStream);

				sheet = workbook.getSheet("Summary_by_Year");

			} else {
				sheet = p_sheet;
			}

			rptDate = Calendar.getInstance().get(Calendar.YEAR);
			//excelRow = sheet.getRow(2);

			CurrYear = incident_date_from.substring(4, 8);
			Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
			Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);

			CurrYearFrom = "0101" + CurrYear + " 000001";
			CurrYearTo = "3112" + CurrYear + " 235959";
			Last1YearFrom = "0101" + Last1Year + " 000001";
			Last1YearTo = "3112" + Last1Year + " 235959";
			Last2YearFrom = "0101" + Last2Year + " 000001";
			Last2YearTo = "3112" + Last2Year + " 235959";

			// Risk Rating for
			SumTitle = "Risk Rating for ";
			excelRow = sheet.getRow(2);
			excelRow.getCell(0).setCellValue(SumTitle + CurrYear);

			// Sheet Cum
			// total risk assessment
			//CurrYear = "2014";
			ArrayList excelReport = getPIReport(userBean, "ceo_cum_risk_ass", "0101" + CurrYear, "3112" + CurrYear, "");

			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("1A".equals(dbRow.getValue(1)) || "1B".equals(dbRow.getValue(1)) || "1C".equals(dbRow.getValue(1)) ||
						"2A".equals(dbRow.getValue(1)) || "2B".equals(dbRow.getValue(1)) || "3A".equals(dbRow.getValue(1))) {
						red = red + 1;
					}
					if ("1D".equals(dbRow.getValue(1)) || "2C".equals(dbRow.getValue(1)) || "2D".equals(dbRow.getValue(1)) ||
						"3B".equals(dbRow.getValue(1)) || "3C".equals(dbRow.getValue(1))) {
						blue = blue + 1;
					}
					if ("1E".equals(dbRow.getValue(1)) || "2E".equals(dbRow.getValue(1)) || "3D".equals(dbRow.getValue(1)) ||
						"3E".equals(dbRow.getValue(1)) || "4A".equals(dbRow.getValue(1)) || "4B".equals(dbRow.getValue(1))) {
						green = green + 1;
					}
					if ("4C".equals(dbRow.getValue(1)) || "4D".equals(dbRow.getValue(1)) || "4E".equals(dbRow.getValue(1))) {
						yellow = yellow + 1;
					}
				}
			}

			excelRow = sheet.getRow(5);
			excelRow.getCell(6).setCellValue(red);
			excelRow.getCell(7).setCellFormula("G6/G10");
			excelRow = sheet.getRow(6);
			excelRow.getCell(6).setCellValue(blue);
			excelRow.getCell(7).setCellFormula("G7/G10");
			excelRow = sheet.getRow(7);
			excelRow.getCell(6).setCellValue(green);
			excelRow.getCell(7).setCellFormula("G8/G10");
			excelRow = sheet.getRow(8);
			excelRow.getCell(6).setCellValue(yellow);
			excelRow.getCell(7).setCellFormula("G9/G10");
			//set sum total
			excelRow = sheet.getRow(9);
			excelRow.getCell(6).setCellFormula("SUM(G6:G9)");

			//Root cause / Contributing Cause for
			SumTitle = "Root cause / Contributing Cause for ";
			excelRow = sheet.getRow(11);
			excelRow.getCell(0).setCellValue(SumTitle + CurrYear);

			//set sum total
			excelRow = sheet.getRow(34);
			excelRow.getCell(6).setCellFormula("SUM(G14:G34)");

			// new code after Apr 2017
			red = 0;
			blue = 0;
			green = 0;
			yellow = 0;
			for (j = 0; j < excelReport.size(); j++) {
				dbRow = (ReportableListObject) excelReport.get(j);
				if (excelReport.size() > 0) {
					if ("E".equals(dbRow.getValue(1))) {
						red = red + 1;
					}
					if ("H".equals(dbRow.getValue(1))) {
						green = green + 1;
					}
					if ("M".equals(dbRow.getValue(1))) {
						yellow = yellow + 1;
					}
					if ("L".equals(dbRow.getValue(1))) {
						blue = blue + 1;
					}
				}
			}
			excelRow = sheet.getRow(5);
			excelRow.getCell(15).setCellValue(red);
			excelRow.getCell(16).setCellFormula("P6/P10");
			excelRow = sheet.getRow(6);
			excelRow.getCell(15).setCellValue(green);
			excelRow.getCell(16).setCellFormula("P7/P10");
			excelRow = sheet.getRow(7);
			excelRow.getCell(15).setCellValue(yellow);
			excelRow.getCell(16).setCellFormula("P8/P10");
			excelRow = sheet.getRow(8);
			excelRow.getCell(15).setCellValue(blue);
			excelRow.getCell(16).setCellFormula("P9/P10");
			//set sum total
			excelRow = sheet.getRow(9);
			excelRow.getCell(15).setCellFormula("SUM(P6:P9)");

			String tmpvalue = "";
			excelReport = getPIReport(userBean, "irs_data_root_cause", CurrYear, Last2Year, "");
			dbRow = (ReportableListObject) excelReport.get(0);
			if (excelReport.size() > 0) {
				for (j = 0; j < 21; j++) {
					excelRow = sheet.getRow(j + 13);
					tempRow = j + 14;
					excelRow.getCell(7).setCellFormula("G" + tempRow + "/G35");
				}

				for (j = 0; j < 21; j++) {
					excelRow = sheet.getRow(j + 13);
					tmpvalue = dbRow.getValue(j);
					if ("".equals(tmpvalue)) {
						tmpvalue = "0";
					}
					excelRow.getCell(6).setCellValue(Integer.valueOf(tmpvalue));
				}
			}

			//Severity of Patient Injury for
			SumTitle = "Severity of Patient Injury for " + " ";
			excelRow = sheet.getRow(38);
			excelRow.getCell(0).setCellValue(SumTitle + CurrYear);
			String tmp = null;

			//set sum total
			excelRow = sheet.getRow(44);
			excelRow.getCell(7).setCellFormula("SUM(H41:H44)");

			//CurrYear = "2015";
			//Last2Year = "2015";
			excelReport = getPIReport(userBean, "irs_data_sevindex_pat_inj", CurrYear, Last2Year, "");
			if (excelReport.size() > 0) {
				for (j = 0; j < 4; j++) {
					excelRow = sheet.getRow(j + 40);
					tempRow = j + 40 + 1;
					excelRow.getCell(8).setCellFormula("H" + tempRow + "/H45");
				}

				for (j = 0; j < excelReport.size(); j++) {
					dbRow = (ReportableListObject) excelReport.get(j);
					excelRow = sheet.getRow(j + 40);
					tempRow = j + 40 + 1;
					excelRow.getCell(7).setCellValue(Integer.valueOf(dbRow.getValue(0)));
				}
			}

			//Assessment of Injury for
			SumTitle = "Assessment of Injury for " + " ";
			excelRow = sheet.getRow(46);
			excelRow.getCell(0).setCellValue(SumTitle + CurrYear);
			// all staff
			//excelRow = sheet.getRow(45);
			//excelRow.getCell(12).setCellValue("All Staff");
			tmp = null;

			excelRow = sheet.getRow(48);
			excelRow.getCell(4).setCellFormula("D49/D54");
			excelRow = sheet.getRow(49);
			excelRow.getCell(4).setCellFormula("D50/D54");
			excelRow = sheet.getRow(50);
			excelRow.getCell(4).setCellFormula("D51/D54");
			excelRow = sheet.getRow(51);
			excelRow.getCell(4).setCellFormula("D52/D54");
			excelRow = sheet.getRow(52);
			excelRow.getCell(4).setCellFormula("D53/D54");

			excelReport = getPIReport(userBean, "irs_data_pi_ass_inj", CurrYear, Last2Year, "");
			if (excelReport.size() > 0) {
				for (j = 0; j < excelReport.size(); j++) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if ("0".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(48);
						tempRow = 49;
					} else if ("1".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(49);
						tempRow = 50;
					} else if ("2".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(50);
						tempRow = 51;
					} else if ("3".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(51);
						tempRow = 52;
					} else if ("4".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(52);
						tempRow = 53;
					}
					excelRow.getCell(3).setCellValue(Integer.valueOf(dbRow.getValue(2)));
				}
			}
			excelRow = sheet.getRow(53);
			excelRow.getCell(3).setCellFormula("SUM(D49:D53)");

			//Assessment of Injury for all pat
			// all pateint
			excelRow = sheet.getRow(46);
			excelRow.getCell(6).setCellValue(SumTitle + CurrYear + " (All Patient)");

			excelRow = sheet.getRow(48);
			excelRow.getCell(10).setCellFormula("J49/J54");
			excelRow = sheet.getRow(49);
			excelRow.getCell(10).setCellFormula("J50/J54");
			excelRow = sheet.getRow(50);
			excelRow.getCell(10).setCellFormula("J51/J54");
			excelRow = sheet.getRow(51);
			excelRow.getCell(10).setCellFormula("J52/J54");
			excelRow = sheet.getRow(52);
			excelRow.getCell(10).setCellFormula("J53/J54");

			excelReport = getPIReport(userBean, "irs_data_pi_ass_inj_all_pat", CurrYear, Last2Year, "");
			if (excelReport.size() > 0) {
				for (j = 0; j < excelReport.size(); j++) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if ("0".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(48);
						tempRow = 49;
					} else if ("1".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(49);
						tempRow = 50;
					} else if ("2".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(50);
						tempRow = 51;
					} else if ("3".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(51);
						tempRow = 52;
					} else if ("4".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(52);
						tempRow = 53;
					}
					excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(2)));
				}
			}
			excelRow = sheet.getRow(53);
			excelRow.getCell(9).setCellFormula("SUM(J49:J53)");

			//Assessment of Injury for all staff
			// all pateint
			excelRow = sheet.getRow(46);
			excelRow.getCell(16).setCellValue(SumTitle + CurrYear + " (All Staff)");

			excelRow = sheet.getRow(48);
			excelRow.getCell(20).setCellFormula("T49/T54");
			excelRow = sheet.getRow(49);
			excelRow.getCell(20).setCellFormula("T50/T54");
			excelRow = sheet.getRow(50);
			excelRow.getCell(20).setCellFormula("T51/T54");
			excelRow = sheet.getRow(51);
			excelRow.getCell(20).setCellFormula("T52/T54");
			excelRow = sheet.getRow(52);
			excelRow.getCell(20).setCellFormula("T53/T54");

			excelReport = getPIReport(userBean, "irs_data_pi_ass_inj_all_staff", CurrYear, Last2Year, "");
			if (excelReport.size() > 0) {
				for (j = 0; j < excelReport.size(); j++) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if ("0".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(48);
						tempRow = 49;
					} else if ("1".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(49);
						tempRow = 50;
					} else if ("2".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(50);
						tempRow = 51;
					} else if ("3".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(51);
						tempRow = 52;
					} else if ("4".equals(dbRow.getValue(1))) {
						excelRow = sheet.getRow(52);
						tempRow = 53;
					}
					excelRow.getCell(19).setCellValue(Integer.valueOf(dbRow.getValue(2)));
				}
			}
			excelRow = sheet.getRow(53);
			excelRow.getCell(19).setCellFormula("SUM(T49:T53)");

			//Pharmacy Severity Index (SI) of Medication Error for
			SumTitle = "Pharmacy Severity Index (SI) of Medication Error for " + " ";
			excelRow = sheet.getRow(56);
			excelRow.getCell(0).setCellValue(SumTitle + CurrYear);
			tmp = null;

			for (j = 0; j < 11; j++) {
				excelRow = sheet.getRow(j + 58);
				tmp = Integer.toString(j + 58 + 1);
				excelRow.getCell(10).setCellFormula("J" + tmp + "/J70");
			}
			//CurrYear = "2014";
			excelReport = getPIReport(userBean, "irs_data_sevindex_med", CurrYear, Last2Year, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					if ("7".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(58);
					} else if ("6".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(59);
					} else if ("5".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(60);
					} else if ("4".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(61);
					} else if ("3".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(62);
					} else if ("2".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(63);
					} else if ("1".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(64);
					} else if ("1(ii)".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(65);
					} else if ("1(i)".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(66);
					} else if ("0".equals(dbRow.getValue(0))) {
						excelRow = sheet.getRow(67);
					} else if (dbRow.getValue(0).isEmpty()) {
						excelRow = sheet.getRow(68);
					}
					excelRow.getCell(9).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}
			excelRow = sheet.getRow(69);
			excelRow.getCell(9).setCellFormula("SUM(J59:J69)");

			//Pharmacy Section for
			SumTitle = "Pharmacy Section for " + " ";
			excelRow = sheet.getRow(74);
			excelRow.getCell(0).setCellValue(SumTitle + CurrYear);
			tmp = null;

			for (j = 0; j < 12; j++) {
				excelRow = sheet.getRow(j + 76);
				tmp = Integer.toString(j + 76 + 1);
				excelRow.getCell(10).setCellFormula("J" + tmp + "/J88");
			}
			//CurrYear = "2015";
			excelReport = getPIReport(userBean, "irs_data_phar_sect", CurrYear, Last2Year, "");
			if (excelReport.size() > 0) {
				dbRow = (ReportableListObject) excelReport.get(0);
				for (j = 0; j < 12; j++) {
					excelRow = sheet.getRow(76 + j);
					if (dbRow.getValue(0 + j).isEmpty()) {
						tmp = "0";
					} else {
						tmp = dbRow.getValue(0 + j);
					}
					excelRow.getCell(9).setCellValue(Integer.valueOf(tmp));
				}
			}
			excelRow = sheet.getRow(88);
			excelRow.getCell(9).setCellFormula("SUM(J77:J88)");

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	private static String getSumToMonth() {
		String sumRow = null;

		ArrayList result = UtilDBWeb.getReportableList(
								"select EXTRACT(month FROM sysdate) + 28 from dual ");
								//"select 2 + 28 from dual ");

		if (result.size() > 0) {
			ReportableListObject reportableListObject = (ReportableListObject) result.get(0);
			sumRow = reportableListObject.getValue(0);
		}
		return sumRow;
	}

	public static HSSFWorkbook piYearEndReportFallControlChart(UserBean userBean, String xlsFileName, String CurrYear, String incident_date_from, String incident_date_to) {

		FileInputStream fileInputStream = null;
		HSSFWorkbook workbook = null;
		HSSFSheet sheet = null;
		HSSFRow excelRow = null;
		HSSFRow excelRow2 = null;
		HSSFCell cell = null;
		HSSFCellStyle style = null;
		HSSFChart chart = null;
		HSSFSheet sheetchart = null;
		int rptDate = 0;
		ReportableListObject dbRow = null;
		// set SUM in excel
		int sumRow = 0;
		int sumCol = 0;
		String sumRowFrom = "";
		String sumRowFrom2 = "";
		String sumRowTo = "";
		int totalPatientFall = 0;
		int totalOvernightBed = 0;
		int j = 0;
		double up = 0;
		double down = 0;
		double pec_pat_fall_overnight_bed = 0;
		String Last1Year = "";
		String Last2Year = "";
		String CurrYearFrom = "";
		String CurrYearTo = "";
		String Last1YearFrom = "";
		String Last1YearTo = "";
		String Last2YearFrom = "";
		String Last2YearTo = "";
		int CurrYearGap = 28;
		int LastYear1Gap = 16;
		int LastYear2Gap = 4;
		String MonthYear = "";
		String sumRowFC = null;
		try {

			fileInputStream = new FileInputStream(xlsFileName);
			workbook = new HSSFWorkbook(fileInputStream);

			sheet = workbook.getSheet("Data");

			//CurrYear = incident_date_from.substring(4, 8);
			Last1Year = Integer.toString(Integer.parseInt(CurrYear) - 1);
			Last2Year = Integer.toString(Integer.parseInt(CurrYear) - 2);

			//HSSFChart.HSSFChartType
			sheetchart = workbook.getSheet("Control");
			HSSFChart[] charts = HSSFChart.getSheetCharts(sheetchart);
			String title = charts[0].getChartTitle();
			if (ConstantsServerSide.isHKAH()) {
				title = "Hong Kong Adventist Hospital - Stubbs Road\n" +
						"Inpatient Fall Control Chart\n";
			} else {
				title = "Hong Kong Adventist Hospital - Tsuen Wan\n" +
						"Inpatient Fall Control Chart\n";
			}
			charts[0].setChartTitle(title + Last2Year + " - " + CurrYear);

			// set ucl, avg
			excelRow = sheet.getRow(7);
			excelRow.getCell(9).setCellFormula("AVERAGE(B5:B" + getSumToMonth() + ")");
			excelRow = sheet.getRow(8);
			excelRow.getCell(9).setCellFormula("J8+(3*J10)");
			excelRow = sheet.getRow(9);
			excelRow.getCell(9).setCellFormula("STDEV(B5:B" + getSumToMonth() + ")");

			for (int i = 4; i <= 39; i++) {
				excelRow = sheet.getRow(i);
				//ucl
					excelRow2 = sheet.getRow(7);
				excelRow.getCell(4).setCellFormula("J9");
				//avg
				excelRow2 = sheet.getRow(8);
				excelRow.getCell(5).setCellFormula("J8");
			}

			CurrYearFrom = "0101" + CurrYear + " 000001";
			CurrYearTo = "3112" + CurrYear + " 235959";
			Last1YearFrom = "0101" + Last1Year + " 000001";
			Last1YearTo = "3112" + Last1Year + " 235959";
			Last2YearFrom = "0101" + Last2Year + " 000001";
			Last2YearTo = "3112" + Last2Year + " 235959";

			//Incident Rate of ALL nurse
			// Curr Year
			ArrayList excelReport = getPIReport(userBean, "FallControlChart", CurrYearFrom, CurrYearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					excelRow = sheet.getRow(j + CurrYearGap);
					MonthYear = getMonthWord(Integer.toString(j + 1)) + "-" + CurrYearFrom.substring(4, 8);
					excelRow.getCell(0).setCellValue(MonthYear);
					excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}

			// Last Year 1
			excelReport = getPIReport(userBean, "FallControlChart", Last1YearFrom, Last1YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					excelRow = sheet.getRow(j + LastYear1Gap);
					MonthYear = getMonthWord(Integer.toString(j + 1)) + "-" + Last1YearFrom.substring(4, 8);
					excelRow.getCell(0).setCellValue(MonthYear);
					excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}

			// Last Year 2
			excelReport = getPIReport(userBean, "FallControlChart", Last2YearFrom, Last2YearTo, "");
			for (j = 0; j < excelReport.size(); j++) {
				if (excelReport.size() > 0) {
					dbRow = (ReportableListObject) excelReport.get(j);
					excelRow = sheet.getRow(j + LastYear2Gap);
					MonthYear = getMonthWord(Integer.toString(j + 1)) + "-" + Last2YearFrom.substring(4, 8);
					excelRow.getCell(0).setCellValue(MonthYear);
					excelRow.getCell(1).setCellValue(Integer.valueOf(dbRow.getValue(1)));
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fileInputStream != null) {
				try {
					fileInputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return workbook;
	}

	public static void setCatSumCol(HSSFSheet sheet, String mode, int sumRow, int sumCol, String sumRowFrom, String sumRowFrom2, String sumRowTo) {
		if (mode == "type_a") {
			sheet.getRow(sumRow).getCell(1).setCellFormula("SUM(B" + sumRowFrom + ":B" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(2).setCellFormula("SUM(C" + sumRowFrom + ":C" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(3).setCellFormula("SUM(D" + sumRowFrom + ":D" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(4).setCellFormula("SUM(E" + sumRowFrom + ":E" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(5).setCellFormula("SUM(F" + sumRowFrom + ":F" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(6).setCellFormula("SUM(G" + sumRowFrom + ":G" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(7).setCellFormula("SUM(H" + sumRowFrom + ":H" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(8).setCellFormula("SUM(I" + sumRowFrom + ":I" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(9).setCellFormula("SUM(J" + sumRowFrom + ":J" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(10).setCellFormula("SUM(K" + sumRowFrom + ":K" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(11).setCellFormula("SUM(L" + sumRowFrom + ":L" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(12).setCellFormula("SUM(M" + sumRowFrom + ":M" + sumRowTo + ")");
		} else if (mode == "type_b") {
			//=SUM(B11,B17:B21)
			sheet.getRow(sumRow).getCell(1).setCellFormula("SUM(B" + sumRowFrom + ",B" + sumRowFrom2 + ":B" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(2).setCellFormula("SUM(C" + sumRowFrom + ",C" + sumRowFrom2 + ":C" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(3).setCellFormula("SUM(D" + sumRowFrom + ",D" + sumRowFrom2 + ":D" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(4).setCellFormula("SUM(E" + sumRowFrom + ",E" + sumRowFrom2 + ":E" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(5).setCellFormula("SUM(F" + sumRowFrom + ",F" + sumRowFrom2 + ":F" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(6).setCellFormula("SUM(G" + sumRowFrom + ",G" + sumRowFrom2 + ":G" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(7).setCellFormula("SUM(H" + sumRowFrom + ",H" + sumRowFrom2 + ":H" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(8).setCellFormula("SUM(I" + sumRowFrom + ",I" + sumRowFrom2 + ":I" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(9).setCellFormula("SUM(J" + sumRowFrom + ",J" + sumRowFrom2 + ":J" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(10).setCellFormula("SUM(K" + sumRowFrom + ",K" + sumRowFrom2 + ":K" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(11).setCellFormula("SUM(L" + sumRowFrom + ",L" + sumRowFrom2 + ":L" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(12).setCellFormula("SUM(M" + sumRowFrom + ",M" + sumRowFrom2 + ":M" + sumRowTo + ")");
		} else if (mode == "type_c") {
			//=SUM(B8:M8)
			int j = 0;
			int row_cnt = 0;
			String col = "";

			if (ConstantsServerSide.isHKAH()) {
				row_cnt = 20;
			} else if (ConstantsServerSide.isTWAH()) {
				row_cnt = 22;
			}
			for (j = 7; j < row_cnt; j++) {
				col = Integer.toString(j + 1);
				sheet.getRow(j).getCell(sumCol).setCellFormula("SUM(B" + col + ":M" + col + ")");
			}
			//=SUM(N11,N16:N21)
			sheet.getRow(row_cnt).getCell(sumCol).setCellFormula("SUM(N11,N16:N" + row_cnt + ")");
		} else if (mode == "type_d") {
			sheet.getRow(70).getCell(sumCol).setCellFormula("SUM(N21)");
			sheet.getRow(71).getCell(sumCol).setCellFormula("SUM(N19)");
			sheet.getRow(72).getCell(sumCol).setCellFormula("SUM(N14)");
			sheet.getRow(73).getCell(sumCol).setCellFormula("SUM(N12)");
			sheet.getRow(74).getCell(sumCol).setCellFormula("SUM(N10)");
			sheet.getRow(75).getCell(sumCol).setCellFormula("SUM(N8)");
			sheet.getRow(76).getCell(sumCol).setCellFormula("SUM(N18)");
			sheet.getRow(77).getCell(sumCol).setCellFormula("SUM(N17)");
			sheet.getRow(78).getCell(sumCol).setCellFormula("SUM(N20)");
			sheet.getRow(79).getCell(sumCol).setCellFormula("SUM(N9+N13+N15)");
		} else if (mode == "unit_b") {
			//=SUM(B4:B21)
			sheet.getRow(sumRow).getCell(1).setCellFormula("SUM(B" + sumRowFrom + ":B" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(2).setCellFormula("SUM(C" + sumRowFrom + ":C" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(3).setCellFormula("SUM(D" + sumRowFrom + ":D" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(4).setCellFormula("SUM(E" + sumRowFrom + ":E" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(5).setCellFormula("SUM(F" + sumRowFrom + ":F" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(6).setCellFormula("SUM(G" + sumRowFrom + ":G" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(7).setCellFormula("SUM(H" + sumRowFrom + ":H" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(8).setCellFormula("SUM(I" + sumRowFrom + ":I" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(9).setCellFormula("SUM(J" + sumRowFrom + ":J" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(10).setCellFormula("SUM(K" + sumRowFrom + ":K" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(11).setCellFormula("SUM(L" + sumRowFrom + ":L" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(12).setCellFormula("SUM(M" + sumRowFrom + ":M" + sumRowTo + ")");
		} else if (mode == "unit_c") {
			//=SUM(B4:M4)
			int j = 0;
			int row_cnt = 0;

			if (ConstantsServerSide.isHKAH()) {
				row_cnt = 29;
			} else if (ConstantsServerSide.isTWAH()) {
				row_cnt = 35;
			}

			String col = "";
			//for (j = 3; j < 29; j++) {
			for (j = 3; j < row_cnt; j++) {
				col = Integer.toString(j + 1);
				sheet.getRow(j).getCell(sumCol).setCellFormula("SUM(B" + col + ":M" + col + ")");
			}
			//=SUM(N11,N16:N21)
			if (ConstantsServerSide.isHKAH()) {
				row_cnt = 28;
			} else if (ConstantsServerSide.isTWAH()) {
				row_cnt = 35;
			}
			//sheet.getRow(28).getCell(sumCol).setCellFormula("SUM(N4:N28)");
			sheet.getRow(row_cnt).getCell(sumCol).setCellFormula("SUM(N4:N" + row_cnt + ")");
		} else if (mode == "type_unit_b") {
			//=SUM(B4:B21) sumRow = 33, sumRowFrom = 4, sumRowTo = 34
			sheet.getRow(sumRow).getCell(1).setCellFormula("SUM(B" + sumRowFrom + ":B" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(2).setCellFormula("SUM(C" + sumRowFrom + ":C" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(3).setCellFormula("SUM(D" + sumRowFrom + ":D" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(4).setCellFormula("SUM(E" + sumRowFrom + ":E" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(5).setCellFormula("SUM(F" + sumRowFrom + ":F" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(6).setCellFormula("SUM(G" + sumRowFrom + ":G" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(7).setCellFormula("SUM(H" + sumRowFrom + ":H" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(8).setCellFormula("SUM(I" + sumRowFrom + ":I" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(9).setCellFormula("SUM(J" + sumRowFrom + ":J" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(10).setCellFormula("SUM(K" + sumRowFrom + ":K" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(11).setCellFormula("SUM(L" + sumRowFrom + ":L" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(12).setCellFormula("SUM(M" + sumRowFrom + ":M" + sumRowTo + ")");
			if (ConstantsServerSide.isTWAH()) {
				sheet.getRow(sumRow).getCell(13).setCellFormula("SUM(N" + sumRowFrom + ":N" + sumRowTo + ")");
				sheet.getRow(sumRow).getCell(14).setCellFormula("SUM(O" + sumRowFrom + ":O" + sumRowTo + ")");
			}
		} else if (mode == "type_unit_c") {
			//=SUM(B4:M4
			//int j = 0;
			//String col = "";
			//for (j = 3; j < 28; j++) {
			//	col = Integer.toString(j + 1);
			//	sheet.getRow(j).getCell(sumCol).setCellFormula("SUM(B" + col + ":M" + col + ")");
			//}
			//=SUM(N11,N16:N21)
			//sheet.getRow(28).getCell(sumCol).setCellFormula("SUM(N4:N28)");

			//=SUM(B4:M4
			int j = 0;
			int li_cnt = 0;
			String col = "";
			if (ConstantsServerSide.isHKAH()) {
				li_cnt = 28;
			} if (ConstantsServerSide.isTWAH()) {
				li_cnt = 35;
			}
			for (j = 3; j < li_cnt; j++) {
				col = Integer.toString(j + 1);
				if (ConstantsServerSide.isHKAH()) {
					sheet.getRow(j).getCell(sumCol).setCellFormula("SUM(B" + col + ":M" + col + ")");
				} else if (ConstantsServerSide.isTWAH()) {
					sheet.getRow(j).getCell(sumCol).setCellFormula("SUM(B" + col + ":O" + col + ")");
				}
			}
			//=SUM(N11,N16:N21)
			if (ConstantsServerSide.isHKAH()) {
				sheet.getRow(li_cnt).getCell(sumCol).setCellFormula("SUM(N4:N" + li_cnt + ")");
			} else if (ConstantsServerSide.isTWAH()) {
				sheet.getRow(li_cnt).getCell(sumCol).setCellFormula("SUM(P4:P" + li_cnt +")");
			}
		} else if (mode == "nurse_type") {
			//=SUM(B2:M2)
			int j = 0;
			String col = "";
			for (j = 1; j < 14; j++) {
				col = Integer.toString(j + 1);
				sheet.getRow(j).getCell(sumCol).setCellFormula("SUM(B" + col + ":M" + col + ")");
				if (j == 1) {
					sheet.getRow(46).getCell(sumCol).setCellFormula("SUM(B47:M47)");
				}
			}
			//=SUM(N11,N16:N21)
			//sheet.getRow(25).getCell(sumCol).setCellFormula("SUM(N4:N25)");
		} else if (mode == "nurse_type_2") {
			//=SUM(B20:E20)
			int j = 0;
			String col = "";
			for (j = 1; j < 14; j++) {
				col = Integer.toString(j + 16);
				sheet.getRow(j + 15).getCell(sumCol).setCellFormula("SUM(B" + col + ":E" + col + ")");
			}
		} else if (mode == "nurse_type_kpi_fall") {
			sheet.getRow(49).getCell(2).setCellFormula("(B51-B50)/B50");
			sheet.getRow(49).getCell(4).setCellFormula("(D51-D50)/D50");
			sheet.getRow(49).getCell(6).setCellFormula("(F51-F50)/F50");
			sheet.getRow(49).getCell(8).setCellFormula("(H51-H50)/H50");
		} else if (mode == "type_a_ceo") {
			sheet.getRow(sumRow).getCell(5).setCellFormula("SUM(F" + sumRowFrom + ":F" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(6).setCellFormula("SUM(G" + sumRowFrom + ":G" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(7).setCellFormula("SUM(H" + sumRowFrom + ":H" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(8).setCellFormula("SUM(I" + sumRowFrom + ":I" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(9).setCellFormula("SUM(J" + sumRowFrom + ":J" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(10).setCellFormula("SUM(K" + sumRowFrom + ":K" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(11).setCellFormula("SUM(L" + sumRowFrom + ":L" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(12).setCellFormula("SUM(M" + sumRowFrom + ":M" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(13).setCellFormula("SUM(N" + sumRowFrom + ":N" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(14).setCellFormula("SUM(O" + sumRowFrom + ":O" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(15).setCellFormula("SUM(P" + sumRowFrom + ":P" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(16).setCellFormula("SUM(Q" + sumRowFrom + ":Q" + sumRowTo + ")");
		} else if (mode == "type_b_ceo") {
			sheet.getRow(sumRow).getCell(5).setCellFormula("SUM(F" + sumRowFrom + ",F" + sumRowFrom2 + ":F" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(6).setCellFormula("SUM(G" + sumRowFrom + ",G" + sumRowFrom2 + ":G" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(7).setCellFormula("SUM(H" + sumRowFrom + ",H" + sumRowFrom2 + ":H" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(8).setCellFormula("SUM(I" + sumRowFrom + ",I" + sumRowFrom2 + ":I" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(9).setCellFormula("SUM(J" + sumRowFrom + ",J" + sumRowFrom2 + ":J" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(10).setCellFormula("SUM(K" + sumRowFrom + ",K" + sumRowFrom2 + ":K" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(11).setCellFormula("SUM(L" + sumRowFrom + ",L" + sumRowFrom2 + ":L" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(12).setCellFormula("SUM(M" + sumRowFrom + ",M" + sumRowFrom2 + ":M" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(13).setCellFormula("SUM(N" + sumRowFrom + ",N" + sumRowFrom2 + ":N" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(14).setCellFormula("SUM(O" + sumRowFrom + ",O" + sumRowFrom2 + ":O" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(15).setCellFormula("SUM(P" + sumRowFrom + ",P" + sumRowFrom2 + ":P" + sumRowTo + ")");
			sheet.getRow(sumRow).getCell(16).setCellFormula("SUM(Q" + sumRowFrom + ",Q" + sumRowFrom2 + ":Q" + sumRowTo + ")");
		} else if (mode == "type_c_ceo") {
			//=SUM(F6:F6)
			int j = 0;
			int cnt = 0;

			if (ConstantsServerSide.isHKAH()) {
				cnt = 21;
			} else if (ConstantsServerSide.isTWAH()) {
				cnt = 23;
			}
			String col = "";
			for (j = 5; j < cnt; j++) {
				col = Integer.toString(j + 1);
				if (j != cnt - 1) {
					sheet.getRow(j).getCell(sumCol).setCellFormula("SUM(F" + col + ":Q" + col + ")");
				}
			}
			//=SUM(N11,N16:N21)
			//sheet.getRow(21).getCell(sumCol).setCellFormula("SUM(N11,N16:N21)");
		}
	}
}