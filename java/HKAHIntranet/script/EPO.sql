ALTER TABLE EPO_REQUEST_M DROP PRIMARY KEY CASCADE;

DROP TABLE EPO_REQUEST_M CASCADE CONSTRAINTS;

CREATE TABLE EPO_REQUEST_M
(	
	REQ_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,
	REQ_DATE DATE NOT NULL ENABLE,
	REQ_BY VARCHAR2(20 BYTE),
	REQ_SITE_CODE VARCHAR2(10 BYTE),
	REQ_DEPT_CODE NUMBER(*,0), 
	REQ_SHIP_TO NUMBER(*,0), 
	REQ_DESC VARCHAR2(100 BYTE),
	BUDGET_CODE VARCHAR2(30 BYTE),
	AMT_RANGE NUMBER(*,0), 
	REQ_STATUS VARCHAR2(1 BYTE), 
	REMARK VARCHAR2(4000 BYTE),
	SEND_APPROVAL VARCHAR2(20 BYTE),
	INS_BY VARCHAR2(20 BYTE), 
	INS_DATE DATE,
	MOD_BY VARCHAR2(20 BYTE), 
	MOD_DATE DATE,
	APPROVE_FLAG NUMBER(*,0),
	APPROVED_BY VARCHAR2(20 BYTE), 
	APPROVED_DATE DATE,
	FOLDER_ID NUMBER(*,0),
	CURR_CREDIT NUMBER(*,0) DEFAULT 0,
	AD_COUNCIL_NO VARCHAR2(30 BYTE),
	BOARD_COUNCIL_NO VARCHAR2(30 BYTE),	
	FINANCE_COMM_NO VARCHAR2(30 BYTE),
	PUR_REMARK VARCHAR2(4000 BYTE),	
	APPR_REMARK VARCHAR2(4000 BYTE),	
	PRIMARY KEY (REQ_NO)
);

INSERT INTO EPO_REQUEST_M(
	REQ_NO, REQ_DATE, REQ_BY, REQ_DEPT_CODE, REQ_SHIP_TO, REQ_DESC, BUDGET_CODE, REQ_STATUS, REMARK, SEND_APPROVAL, INS_BY, INS_DATE, MOD_BY, MOD_DATE, APPROVE_FLAG, APPROVED_BY, APPROVED_DATE, FOLDER_ID) 
VALUES (
	'R1000001', SYSDATE, 'terence.ho', '720', '720', 'testing', '1234567', 1, 'test remarks', 'mary.chui', 'terence.ho', SYSDATE, 'terence.ho', SYSDATE, 'Y', 'terence.ho',SYSDATE, 1);

ALTER TABLE EPO_REQUEST_D DROP PRIMARY KEY CASCADE;

DROP TABLE EPO_REQUEST_D CASCADE CONSTRAINTS;

CREATE TABLE EPO_REQUEST_D
(	
	REQ_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,
	REQ_SEQ NUMBER(*,0) NOT NULL ENABLE,
	SUPPLIER_NAME VARCHAR2(200 BYTE),	
	ITEM_DESC VARCHAR2(200 BYTE),
	REQ_QTY NUMBER(*,0) DEFAULT 0,
	REQ_AMOUNT NUMBER(*,2) DEFAULT 0,
	ITEM_PRICE NUMBER(*,2) DEFAULT 0,
	ITEM_UNIT VARCHAR2(30 BYTE),
	REMARK VARCHAR2(300 BYTE),
	INS_BY VARCHAR2(20 BYTE), 
	INS_DATE DATE,
	MOD_BY VARCHAR2(20 BYTE), 
	MOD_DATE DATE,
	APPROVE_FLAG NUMBER(*,0) DEFAULT 0,
	APPROVED_BY VARCHAR2(20 BYTE),
	COMPLETED NUMBER(*,0) DEFAULT 0,
	OUTSTANDING NUMBER(*,0) DEFAULT 0,
	PRIMARY KEY (REQ_NO,REQ_SEQ)
);

ALTER TABLE EPO_REQUEST_D ADD (CONSTRAINT EPO_REQUEST_R01 FOREIGN KEY (REQ_NO) REFERENCES EPO_REQUEST_M (REQ_NO));

INSERT INTO EPO_REQUEST_D (
	REQ_NO, REQ_SEQ, SUPPLIER_NAME, ITEM_DESC, REQ_QTY, REQ_AMOUNT, ITEM_PRICE, ITEM_UNIT, REMARK, INS_BY, INS_DATE, MOD_BY, MOD_DATE, APPROVE_FLAG, APPROVED_BY) 
VALUES (
	'R1000001', 1, 'IBM', 'TESTING ITEM', 10, 1000, 100, 'PC', 'ITEM REMARK', 'terence.ho', SYSDATE, 'terence.ho', SYSDATE, 'Y', 'mary.chui');
INSERT INTO EPO_REQUEST_D (
	REQ_NO, REQ_SEQ, SUPPLIER_NAME, ITEM_DESC, REQ_QTY, REQ_AMOUNT, ITEM_PRICE, ITEM_UNIT, REMARK, INS_BY, INS_DATE, MOD_BY, MOD_DATE, APPROVE_FLAG, APPROVED_BY) 
VALUES (
	'R1000001', 2, 'HP', 'TESTING ITEM2', 3, 4.5, 1.5, 'BOOK', 'ITEM REMARK', 'terence.ho', SYSDATE, 'terence.ho', SYSDATE, 'Y', 'mary.chui');

DROP TABLE EPO_REQUEST_D_LOG CASCADE CONSTRAINTS;	
	
CREATE TABLE EPO_REQUEST_D_LOG
(	
	REQ_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,
	REQ_SEQ NUMBER(*,0) NOT NULL ENABLE,
	SUPPLIER_NAME VARCHAR2(200 BYTE),	
	ITEM_DESC VARCHAR2(200 BYTE),
	REQ_QTY NUMBER(*,0) DEFAULT 0,
	REQ_AMOUNT NUMBER(*,2) DEFAULT 0,
	ITEM_PRICE NUMBER(*,2) DEFAULT 0,
	ITEM_UNIT VARCHAR2(30 BYTE),
	REMARK VARCHAR2(300 BYTE),
	INS_BY VARCHAR2(20 BYTE), 
	INS_DATE DATE,
	MOD_BY VARCHAR2(20 BYTE), 
	MOD_DATE DATE,
	APPROVE_FLAG NUMBER(*,0) DEFAULT 0,
	APPROVED_BY VARCHAR2(20 BYTE),
	COMPLETED NUMBER(*,0) DEFAULT 0,
	OUTSTANDING NUMBER(*,0) DEFAULT 0
);	

ALTER TABLE EPO_REQUEST_LOG DROP PRIMARY KEY CASCADE;

DROP TABLE EPO_REQUEST_LOG CASCADE CONSTRAINTS;	
	
CREATE TABLE EPO_REQUEST_LOG
(
	EPO_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,
	RECORD_STATUS VARCHAR2(1 BYTE),
	INSERT_BY VARCHAR2(20 BYTE),
	INSERT_DATE DATE
);

ALTER TABLE EPO_PO_M DROP PRIMARY KEY CASCADE;

DROP TABLE EPO_PO_M CASCADE CONSTRAINTS;

CREATE TABLE EPO_PO_M
(
    PO_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,
    REQ_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,
    PO_DATE DATE NOT NULL ENABLE,
	PO_SITE_CODE VARCHAR2(10 BYTE),  
    PO_DEPT_CODE NUMBER(*,0), 
	PO_SHIP_TO NUMBER(*,0),
	BUDGET_CODE VARCHAR2(30 BYTE),
	VDR_CODE VARCHAR2(6 BYTE),
    VDR_STAFF VARCHAR2(20 BYTE),
    VDR_TEL VARCHAR2(50 BYTE),
    VDR_FAX VARCHAR2(50 BYTE),
    VDR_EMAIL VARCHAR2(50 BYTE),
    VDR_ADDR VARCHAR2(100 BYTE),
    DLV_DATE DATE,
    DLV_PLACE VARCHAR2(150 BYTE),    
    INV_TYPE VARCHAR2(3 BYTE),
    PAY_TYPE VARCHAR2(2 BYTE),
    REMARK VARCHAR2(300 BYTE),
    COMPLETED NUMBER DEFAULT 0,  
    CANCEL_FLAG NUMBER DEFAULT 0,
    CANCEL_RSN VARCHAR2(300 BYTE),
    ORD_AMT NUMBER(*,3) DEFAULT 0,
    PAY_AMT NUMBER(*,3) DEFAULT 0,
	DISC_AMT NUMBER(*,3) DEFAULT 0,
    EX_FEE_ID VARCHAR2(2 BYTE),    
    EX_CHARGES NUMBER(*,3) DEFAULT 0,
    TRANS_CHARGES NUMBER(*,3) DEFAULT 0,
    GIFT_AMT NUMBER(*,3) DEFAULT 0,
    INV_DIS NUMBER(*,3) DEFAULT 0,
    DEPOSIT NUMBER(*,3) DEFAULT 0,
    CURRENCY_ID VARCHAR2(3 BYTE),
    EX_RATE NUMBER(*,3) DEFAULT 0,
    INS_BY VARCHAR2(20 BYTE), 
    INS_DATE DATE,
    MOD_BY VARCHAR2(20 BYTE),
    MOD_DATE DATE,
    APPROVE_FLAG NUMBER DEFAULT 0,    
    APPROVED_BY VARCHAR2(20 BYTE),
    APPROVED_DATE DATE,
    ESEND_FLAG NUMBER DEFAULT 0,
    ESEND_BY VARCHAR2(20 BYTE),
    ESEND_DATE DATE,
    FOLDER_ID NUMBER(*,0),
	PRIMARY KEY (PO_NO, REQ_NO)    
);

ALTER TABLE EPO_PO_M ADD (CONSTRAINT EPO_PO_R01 FOREIGN KEY (REQ_NO) REFERENCES EPO_REQUEST_M (REQ_NO));

DROP TABLE EPO_PO_D CASCADE CONSTRAINTS;

CREATE TABLE EPO_PO_D
(
  PO_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,
  REQ_NO VARCHAR2(8 BYTE) NOT NULL ENABLE,  
  SEQ_NO NUMBER(*,0) NOT NULL ENABLE,  
  ITEM_DESC VARCHAR2(200 BYTE) NOT NULL ENABLE,
  VDR_NAME VARCHAR2(200 BYTE), 
  VDR_ITEM_CODE VARCHAR2(40 BYTE),
  REQ_UNIT VARCHAR2(30 BYTE),
  REQ_QTY NUMBER(*,0) DEFAULT 0,
  ORD_QTY NUMBER(*,0) DEFAULT 0,
  ORD_PRICE NUMBER(*,2) DEFAULT 0,
  ORD_AMT NUMBER(*,2) DEFAULT 0,
  NET_AMT NUMBER(*,2) DEFAULT 0,  
  REMARK VARCHAR2(150 BYTE),
  INS_BY VARCHAR2(20 BYTE), 
  INS_DATE DATE,
  MOD_BY VARCHAR2(20 BYTE), 
  MOD_DATE DATE,
  REQ_SEQ NUMBER(*,0) NOT NULL ENABLE,  
  PRIMARY KEY (PO_NO, REQ_NO, SEQ_NO)
);

ALTER TABLE EPO_PO_D ADD (CONSTRAINT EPO_PO_R02 FOREIGN KEY (PO_NO,REQ_NO) REFERENCES EPO_PO_M (PO_NO,REQ_NO));

ALTER TABLE EPO_WORKFLOW DROP PRIMARY KEY CASCADE;

DROP TABLE EPO_WORKFLOW CASCADE CONSTRAINTS;	

CREATE TABLE EPO_WORKFLOW
(
	PROJECT_NAME VARCHAR2(20 BYTE),
	PROGRAME_NAME VARCHAR2(20 BYTE),
	FLOW_ID NUMBER(*,0),
	FLOW_SEQ NUMBER(*,0),
	MIN_CREDIT NUMBER(*,0),
	ENABLE NUMBER(*,0)
);


CREATE TABLE EPO_WORKFLOW_HUMAN
(
	PROJECT_NAME VARCHAR2(20 BYTE),
	PROGRAME_NAME VARCHAR2(20 BYTE),
	FLOW_ID NUMBER(*,0),
	FLOW_SEQ NUMBER(*,0),
	RELATED_PERSON VARCHAR2(20 BYTE),
	PRIORITY NUMBER(*,0),
	ENABLE NUMBER(*,0)
);


DROP TABLE EPO_APPROVE_LEVEL CASCADE CONSTRAINTS;	

CREATE TABLE EPO_APPROVE_LEVEL
(
AMOUNT_ID NUMBER(*,0),
USE_CREDIT NUMBER(*,0),
REQUIRE_APPROVAL NUMBER(*,0)
);

DROP TABLE EPO_APPROVE_LIST CASCADE CONSTRAINTS;	

CREATE TABLE EPO_APPROVE_LIST
(
FLOW_ID NUMBER(*,0),
FLOW_SEQ NUMBER(*,0),
STAFF_ID VARCHAR2(20 BYTE),
SITE_CODE VARCHAR2(10 BYTE),
DEPT_CODE NUMBER(*,0),
CO_POSITION_1 VARCHAR2(50 BYTE),
CO_POSITION_2 VARCHAR2(50 BYTE),
APPROVAL_CREDIT NUMBER(*,0)                                                                                                                                                                                  
);

INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','4104','hkah','710','Human Resources Director','Division Head',1);
INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','3798','hkah','770','Nursing Administrator','Division Head',1);
INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','3784','hkah','999','Medical Program Administrator','Division Head',1);
INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','3723','hkah','630','Business Manager','Division Head',1);
INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','4006','hkah','630','VP Administration','Senior Officer',2);
INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','3940','hkah','640','VP Finance','Senior Officer',2);
INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','9993','hkah','997','VP Medical','Senior Officer',2);
INSERT INTO EPO_APPROVE_LIST (FLOW_ID, FLOW_SEQ, STAFF_ID, SITE_CODE, DEPT_CODE, CO_POSITION_1, CO_POSITION_2, APPROVAL_CREDIT) VALUES ('1','1','3603','hkah','610','Chief Executive Officer','CEO',4);
 



DROP TABLE EPO_AMOUNT CASCADE CONSTRAINTS;

CREATE TABLE EPO_AMOUNT
(
AMOUNT_ID NUMBER(*,0),
AMOUNT_SEQ NUMBER(*,0),
AMOUNT_DESC VARCHAR2(50 BYTE),
MIN NUMBER(*,0),
MAX NUMBER(*,0)
);

INSERT INTO EPO_AMOUNT (AMOUNT_ID,AMOUNT_DESC,AMOUNT_SEQ) VALUES (1,'<50,000',)

create or replace
TRIGGER TRG_INSERT_REQ_LOG
  AFTER INSERT OR UPDATE ON EPO_REQUEST_D
  FOR EACH ROW
BEGIN
  IF UPDATING ('REQ_QTY') AND :NEW.REQ_QTY <> :OLD.REQ_QTY THEN
    INSERT INTO EPO_REQUEST_D_LOG (
    REQ_NO,
    REQ_SEQ,
    SUPPLIER_NAME,
    ITEM_DESC,
    REQ_QTY,
    REQ_AMOUNT,
    ITEM_PRICE,
    ITEM_UNIT,
    REMARK,
    INS_BY,
    INS_DATE,
    MOD_BY,
    MOD_DATE,
    APPROVE_FLAG,
    APPROVED_BY,
    COMPLETED,
    OUTSTANDING) VALUES(
    :NEW.REQ_NO,
    :NEW.REQ_SEQ,
    :NEW.SUPPLIER_NAME,
    :NEW.ITEM_DESC,
    :NEW.REQ_QTY,
    :NEW.REQ_AMOUNT,
    :NEW.ITEM_PRICE,
    :NEW.ITEM_UNIT,
    :NEW.REMARK,
    :NEW.INS_BY,
    :NEW.INS_DATE,
    :NEW.MOD_BY,
    :NEW.MOD_DATE,
    :NEW.APPROVE_FLAG,
    :NEW.APPROVED_BY,
    :NEW.COMPLETED,
    :NEW.OUTSTANDING);
  END IF;
END;

DROP SEQUENCE EPO_REQ_SEQ;

CREATE SEQUENCE  "HKAH"."EPO_REQ_SEQ"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

DROP SEQUENCE EPO_PO_SEQ;

CREATE SEQUENCE  "HKAH"."EPO_PO_SEQ"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

To create the schedule:
BEGIN
  DBMS_SCHEDULER.CREATE_SCHEDULE(  
	schedule_name => 'RESET_PMS_SEQ_SCHD'
	, start_date =>  SYSDATE
	, repeat_interval=>'FREQ=YEARLY;BYDATE=0101;BYHOUR=00;BYMINUTE=00;BYSECOND=01'
	, comments => 'Reset All PMS sequence to 0');
END;

BEGIN
  DBMS_SCHEDULER.CREATE_JOB(
	job_name => 'RESET_PMS_SEQ_JOB'
	,job_type => 'PLSQL_BLOCK'
	,schedule_name => 'RESET_PMS_SEQ_SCHD'
	,job_action => 'BEGIN PROC_RESET_SEQUENCE(); END;'
	,enabled => TRUE
	,comments => 'Reset All PMS sequence to 0');
END;


To drop the schedule:
BEGIN
	DBMS_SCHEDULER.DROP_SCHEDULE('RESET_PMS_SEQ_SCHD', TRUE);
END;

BEGIN
	DBMS_SCHEDULER.DROP_JOB('RESET_PMS_SEQ_JOB', TRUE);
END;


BEGIN
  -- Run job synchronously.
  DBMS_SCHEDULER.run_job (job_name => 'RESET_PMS_SEQ_JOB',use_current_session => FALSE);
END;

CREATE OR REPLACE PROCEDURE PROC_RESET_SEQUENCE
AS
ls_seq_name varchar2(50);

CURSOR c_getSequence IS
SELECT sequence_name
FROM user_sequences
WHERE sequence_name LIKE 'EPO%'
AND sequence_name <> 'EPO_FOLDER_ID';

BEGIN
  OPEN c_getSequence;
    LOOP
    FETCH c_getSequence INTO ls_seq_name;
    EXIT WHEN c_getSequence%NOTFOUND;  
      execute immediate 'DROP SEQUENCE ' || ls_seq_name;
      execute immediate 'CREATE SEQUENCE '||ls_seq_name||' MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE';
    END LOOP;    
  CLOSE c_getSequence;
EXCEPTION
WHEN OTHERS THEN
	ROLLBACK;
	dbms_output.put_line('An ERROR was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;

create or replace
FUNCTION F_CHK_FINAL_APPROVAL (
as_reqNo VARCHAR2,
as_flowId VARCHAR2,
as_flowSeq VARCHAR2,
as_amtId VARCHAR2,
as_approver VARCHAR2
)
RETURN NUMBER 
IS
	ld_currCredit	NUMBER;
	ld_minCredit	NUMBER;
  ld_apprCredit NUMBER;
  ld_remainCredit NUMBER;
BEGIN
  BEGIN
    SELECT APPROVAL_CREDIT
    INTO ld_apprCredit
    FROM EPO_APPROVE_LIST
    WHERE FLOW_ID = as_flowId
    AND FLOW_SEQ = as_flowSeq 
    AND STAFF_ID = as_approver
    ;    
  EXCEPTION
  WHEN OTHERS THEN
    ld_apprCredit := 0;
  END;

  SELECT EAL.USE_CREDIT
  INTO ld_minCredit
  FROM EPO_APPROVE_LEVEL EAL
  WHERE EAL.AMOUNT_ID = as_amtId
  ;   

  SELECT CURR_CREDIT
  INTO ld_currCredit
  FROM EPO_REQUEST_M
  WHERE REQ_NO = as_reqNo
  ;

  ld_remainCredit := ld_apprCredit - (ld_minCredit - ld_currCredit);

RETURN ld_remainCredit;
END F_CHK_FINAL_APPROVAL;


CREATE OR REPLACE FUNCTION F_GET_PMS_TRANSNO (
as_repType varchar2)
RETURN varchar2 
IS
ls_seqNo NUMBER;
ls_sysYr varchar2(2);
ls_repNo varchar2(8);

BEGIN
	ls_sysYr := TO_CHAR(sysdate,'yy');	
	
	CASE as_repType
  	WHEN 'R' THEN 
  		SELECT EPO_REQ_SEQ.NEXTVAL INTO ls_seqNo FROM dual;
  	WHEN 'J' THEN 
  		SELECT EPO_PO_SEQ.NEXTVAL INTO ls_seqNo FROM dual;  		
--  	WHEN 2 THEN Action2;

--  	ELSE ActionOther;
	END CASE;
	
  	ls_repNo := as_repType||ls_sysYr||SUBSTR('0000'||TO_CHAR(ls_seqNo),-5,5);
	dbms_output.put_line('ls_repNo:'||ls_repNo);  	
  	
	RETURN ls_repNo;
EXCEPTION
WHEN OTHERS THEN
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
      RETURN NULL;      
END F_GET_PMS_TRANSNO;


create or replace
PROCEDURE PROC_UPDATE_TO_COMP(
AS_REQNO IN EPO_REQUEST_D.REQ_NO%TYPE,
AS_MODBY IN EPO_REQUEST_D.MOD_BY%TYPE,
AS_MODATE IN VARCHAR2)
IS
LS_SYSDATE DATE;

BEGIN
--		LS_SYSDATE := SYSDATE;

  	UPDATE EPO_REQUEST_D
  	SET COMPLETED = 1,
  	MOD_BY = AS_MODBY,
  	MOD_DATE = TO_DATE(AS_MODATE,'DDMMYYYYHH24MISS')
  	WHERE REQ_NO = AS_REQNO
    AND OUTSTANDING = 0;
EXCEPTION
WHEN OTHERS THEN
	ROLLBACK;
	DBMS_OUTPUT.PUT_LINE('AN ERROR WAS ENCOUNTERED - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


create or replace
FUNCTION F_UPDATE_ORDERED (
v_action		IN VARCHAR2,--ADD
AS_REQNO IN EPO_REQUEST_M.REQ_NO%TYPE,
AS_MODBY IN EPO_REQUEST_D.MOD_BY%TYPE,
AS_MODDATE IN VARCHAR2,
o_errmsg OUT VARCHAR2)
RETURN VARCHAR2
IS
LS_OUTSTANDING NUMBER;
LS_RETURN NUMBER;
LS_SYSDATE DATE;

BEGIN
--	LS_SYSDATE := SYSDATE;
  
  SELECT SUM(D.OUTSTANDING) 
  INTO LS_OUTSTANDING
  FROM EPO_REQUEST_D D 
  WHERE D.REQ_NO = AS_REQNO
  AND D.APPROVE_FLAG>0;

	UPDATE 
  EPO_REQUEST_M ERM
	SET ERM.REQ_STATUS = 'O',
	ERM.MOD_BY = AS_MODBY,
	ERM.MOD_DATE = TO_DATE(AS_MODDATE,'DDMMYYYYHH24MISS')
	WHERE ERM.REQ_NO = AS_REQNO
  AND ERM.REQ_STATUS IN ('P','A','Z','D')
	AND LS_OUTSTANDING = 0;
  
  IF SQL%FOUND THEN  -- update succeeded
    LS_RETURN :=	'1';
  ELSE
    LS_RETURN :=	'0';
  END IF;
  
  RETURN LS_RETURN;
EXCEPTION
WHEN OTHERS THEN
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
      RETURN NULL;      
END F_UPDATE_ORDERED;

DROP SEQUENCE "HKAH"."EPO_FOLDER_ID";
CREATE SEQUENCE "HKAH"."EPO_FOLDER_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;